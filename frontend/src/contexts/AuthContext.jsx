/**
 * üîê –ö–û–ù–¢–ï–ö–°–¢ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */

import { createContext, useContext, useReducer, useEffect } from 'react'
import { authApi, usersApi } from '../services/api'

// –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
const initialState = {
  user: null,
  isAuthenticated: false,
  isLoading: false,
  error: null
}

// –¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π
const AUTH_ACTIONS = {
  SET_USER: 'SET_USER',
  SET_AUTHENTICATED: 'SET_AUTHENTICATED',
  SET_LOADING: 'SET_LOADING',
  SET_ERROR: 'SET_ERROR',
  LOGOUT: 'LOGOUT',
  UPDATE_USER: 'UPDATE_USER'
}

// –†–µ–¥—É–∫—Ç–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const authReducer = (state, action) => {
  switch (action.type) {
    case AUTH_ACTIONS.SET_USER: {
      return {
        ...state,
        user: action.payload,
        isAuthenticated: !!action.payload,
        isLoading: false,
        error: null
      }
    }

    case AUTH_ACTIONS.SET_AUTHENTICATED: {
      return {
        ...state,
        isAuthenticated: action.payload
      }
    }

    case AUTH_ACTIONS.SET_LOADING: {
      return {
        ...state,
        isLoading: action.payload
      }
    }

    case AUTH_ACTIONS.SET_ERROR: {
      return {
        ...state,
        error: action.payload,
        isLoading: false
      }
    }

    case AUTH_ACTIONS.LOGOUT: {
      return {
        ...state,
        user: null,
        isAuthenticated: false,
        isLoading: false,
        error: null
      }
    }

    case AUTH_ACTIONS.UPDATE_USER: {
      return {
        ...state,
        user: { ...state.user, ...action.payload }
      }
    }

    default:
      return state
  }
}

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
const AuthContext = createContext()

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const useAuth = () => {
  const context = useContext(AuthContext)
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider')
  }
  return context
}

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const AuthProvider = ({ children }) => {
  console.log('AuthContext: AuthProvider rendering')
  const [state, dispatch] = useReducer(authReducer, initialState)

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    console.log('AuthContext: useEffect triggered, calling loadUser')
    loadUser()
  }, [])

  const loadUser = async () => {
    try {
      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: true })
      const token = localStorage.getItem('token')

      if (token) {
        console.log('AuthContext: Checking token validity...')

        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ API
          const response = await authApi.verifyToken()

          if (response.success && response.user) {
            console.log('AuthContext: Token valid, loading user:', response.user)
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            localStorage.setItem('user', JSON.stringify(response.user))
            dispatch({ type: AUTH_ACTIONS.SET_USER, payload: response.user })
          } else {
            throw new Error('Invalid token response')
          }
        } catch (error) {
          console.error('AuthContext: Token validation failed:', error.message)

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
          if (error.response?.status === 401) {
            console.log('AuthContext: Token expired or invalid, clearing data')
            // –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
            // –ü–æ–ø—Ä–æ–±—É–µ–º –º—è–≥–∫–∏–π fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
            const storedUser = (() => { try { return JSON.parse(localStorage.getItem('user')) } catch { return null } })()
            if (storedUser) {
              console.warn('AuthContext: using stored user fallback')
              dispatch({ type: AUTH_ACTIONS.SET_USER, payload: storedUser })
            } else {
              localStorage.removeItem('token')
              localStorage.removeItem('user')
              dispatch({ type: AUTH_ACTIONS.LOGOUT })
            }
          } else {
            // –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ (—Å–µ—Ç—å, —Å–µ—Ä–≤–µ—Ä), –Ω–µ –æ—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω
            console.warn('AuthContext: Network/server error, keeping token for retry')
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
            const storedUser = (() => { try { return JSON.parse(localStorage.getItem('user')) } catch { return null } })()
            if (storedUser) {
              dispatch({ type: AUTH_ACTIONS.SET_USER, payload: storedUser })
            } else {
              dispatch({ type: AUTH_ACTIONS.SET_ERROR, payload: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞' })
            }
          }
        }
      } else {
        console.log('AuthContext: No token found')
        dispatch({ type: AUTH_ACTIONS.LOGOUT })
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
      localStorage.removeItem('token')
      localStorage.removeItem('user')
      dispatch({ type: AUTH_ACTIONS.LOGOUT })
    } finally {
      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: false })
    }
  }

  const login = async (credentials) => {
    try {
      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: true })

      console.log('üîê AuthContext: –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è:', credentials.email)

      // –†–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤
      const response = await authApi.login(credentials)
      
      console.log('‚úÖ AuthContext: –û—Ç–≤–µ—Ç API:', response)
      
      if (response.success && response.token && response.user) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        localStorage.setItem('token', response.token)
        localStorage.setItem('user', JSON.stringify(response.user))
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        dispatch({ type: AUTH_ACTIONS.SET_USER, payload: response.user })
        
        return { 
          success: true, 
          message: response.message || '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥'
        }
      } else {
        return { 
          success: false, 
          error: response.error || '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞'
        }
      }
    } catch (error) {
      console.error('‚ùå AuthContext: –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error)
      return { 
        success: false, 
        error: error.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É'
      }
    } finally {
      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: false })
    }
  }

  const register = async (userData) => {
    try {
      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: true })
      
      console.log('üìù AuthContext: –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', userData)
      
      // –†–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤
      const response = await authApi.register(userData)
      
      console.log('‚úÖ AuthContext: –û—Ç–≤–µ—Ç API —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', response)
      
      if (response.success && response.token && response.user) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        localStorage.setItem('token', response.token)
        localStorage.setItem('user', JSON.stringify(response.user))
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        dispatch({ type: AUTH_ACTIONS.SET_USER, payload: response.user })
        
        return { 
          success: true, 
          message: response.message || '–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
        }
      } else {
        return { 
          success: false, 
          error: response.error || '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞'
        }
      }
    } catch (error) {
      console.error('‚ùå AuthContext: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error)
      return { 
        success: false, 
        error: error.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞'
      }
    } finally {
      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: false })
    }
  }

  const logout = async () => {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—Ö–æ–¥
      await authApi.logout()
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error.message)
    } finally {
      localStorage.removeItem('token')
      localStorage.removeItem('user')
      dispatch({ type: AUTH_ACTIONS.LOGOUT })
    }
  }

  const updateProfile = async (profileData) => {
    try {
      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: true })
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
      const response = await usersApi.updateProfile(profileData)
      
      const updatedUser = { ...state.user, ...response.data }
      localStorage.setItem('user', JSON.stringify(updatedUser))
      
      dispatch({ type: AUTH_ACTIONS.UPDATE_USER, payload: response.data })
      return { success: true }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error)
      return { 
        success: false, 
        error: error.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è'
      }
    } finally {
      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: false })
    }
  }

  const updateUser = async (userId, userData) => {
    try {
      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: true })
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
      const response = await usersApi.updateProfile(userData)
      return { success: true, data: response.data }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
      return { 
        success: false, 
        error: error.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
      }
    } finally {
      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: false })
    }
  }

  const clearError = () => {
    dispatch({ type: AUTH_ACTIONS.SET_ERROR, payload: null })
  }

  const value = {
    ...state,
    login,
    register,
    logout,
    updateProfile,
    updateUser,
    clearError
  }

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  )
}