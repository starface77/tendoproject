/**
 * üõçÔ∏è –ö–ê–¢–ê–õ–û–ì –¢–û–í–ê–†–û–í
 * –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 */

import { useState, useEffect, useCallback } from 'react'
import { useSearchParams, useLocation } from 'react-router-dom'
import { FiGrid, FiList, FiShoppingBag } from 'react-icons/fi'
import LoadingSpinner from '../components/ui/LoadingSpinner'
import ProductCard from '../components/product/ProductCard'
import { productsApi, categoriesApi, checkApiHealth } from '../services/api'
import { useLanguage } from '../contexts/LanguageContext'

const CatalogPage = () => {
  const [searchParams] = useSearchParams()
  const location = useLocation()
  const { t } = useLanguage()
  const [products, setProducts] = useState([])
  const [categories, setCategories] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [isApiConnected, setIsApiConnected] = useState(false)
  const [viewMode, setViewMode] = useState('grid')
  const [sortBy, setSortBy] = useState('popularity')
  const [filters, setFilters] = useState({
    category: searchParams.get('category') || '',
    priceMin: '',
    priceMax: '',
    brand: '',
    rating: ''
  })

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ URL
  const getPageType = () => {
    const path = location.pathname
    if (path.includes('/brands')) return 'brands'
    if (path.includes('/sales')) return 'sales' 
    if (path.includes('/new')) return 'new'
    return 'catalog'
  }

  const pageType = getPageType()

  const loadCatalogData = useCallback(async () => {
    setLoading(true)
    setError(null)

    try {
      console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è:', pageType)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
      const isApiHealthy = await checkApiHealth()
      console.log('üè• API —Å—Ç–∞—Ç—É—Å:', isApiHealthy)

      if (isApiHealthy) {
        setIsApiConnected(true)

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categoriesResponse = await categoriesApi.getCategories()
        console.log('üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:', categoriesResponse)
        setCategories(categoriesResponse.data || [])

        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
        const productParams = {
          category: filters.category,
          sortBy,
          page: 1,
          limit: 20,
          ...(pageType === 'sales' && { onSale: true }),
          ...(pageType === 'new' && { isNew: true }),
          ...(filters.priceMin && { priceMin: filters.priceMin }),
          ...(filters.priceMax && { priceMax: filters.priceMax }),
          ...(filters.brand && { brand: filters.brand }),
          ...(filters.rating && { rating: filters.rating })
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        let productsResponse
        if (pageType === 'brands') {
          // –î–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—Ä–µ–Ω–¥–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
          productsResponse = await productsApi.getProducts(productParams)
        } else {
          productsResponse = await productsApi.getProducts(productParams)
        }

        console.log('üõçÔ∏è –¢–æ–≤–∞—Ä—ã:', productsResponse)
        setProducts(productsResponse.data || [])

      } else {
        throw new Error('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞:', error)
      setError(t('failed_to_load_data', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.'))
      setIsApiConnected(false)

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      setCategories([])
      setProducts([])
    } finally {
      setLoading(false)
    }
  }, [pageType, filters, sortBy, t])

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadCatalogData()
  }, [loadCatalogData])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const getPageTitle = () => {
    switch (pageType) {
      case 'brands': return t('all_brands', '–í—Å–µ –±—Ä–µ–Ω–¥—ã')
      case 'sales': return t('sales_discounts', '–ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏')
      case 'new': return t('new_products', '–ù–æ–≤–∏–Ω–∫–∏')
      default: return t('product_catalog', '–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤')
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const getPageDescription = () => {
    switch (pageType) {
      case 'brands': return t('popular_brands', '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –±—Ä–µ–Ω–¥—ã –Ω–∞ –Ω–∞—à–µ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ')
      case 'sales': return t('best_offers', '–õ—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ —Å–∫–∏–¥–∫–∏ –¥–æ 70%')
      case 'new': return t('latest_arrivals', '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤')
      default: return t('wide_selection', '–ë–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤')
    }
  }






  if (loading) {
    return <LoadingSpinner />
  }

  return (
    <div className="min-h-screen bg-gray-50 pb-24 sm:pb-0">
      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">

        {/* Simple Header */}
        <div className="mb-6">
          <div className="flex items-center justify-between">
            <h1 className="text-2xl font-bold text-gray-900">
              {getPageTitle()}
            </h1>
            {products.length > 0 && (
              <span className="text-sm text-gray-500">
                {products.length} —Ç–æ–≤–∞—Ä–æ–≤
              </span>
            )}
          </div>
        </div>

        {/* Simple Controls */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4 mb-6">
          <div className="flex items-center justify-between">
            {/* Sort */}
            <div className="flex items-center space-x-3">
              <span className="text-sm text-gray-600">–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:</span>
              <select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
                className="border border-gray-300 rounded px-3 py-1 text-sm focus:outline-none focus:ring-1 focus:ring-blue-500"
              >
                <option value="popularity">–ü–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏</option>
                <option value="price_asc">–¶–µ–Ω–∞: –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é</option>
                <option value="price_desc">–¶–µ–Ω–∞: –ø–æ —É–±—ã–≤–∞–Ω–∏—é</option>
                <option value="rating">–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É</option>
                <option value="new">–°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ</option>
              </select>
            </div>

            {/* View Toggle */}
            <div className="flex items-center space-x-1">
              <button
                onClick={() => setViewMode('grid')}
                className={`p-1 rounded transition-colors ${
                  viewMode === 'grid' ? 'bg-blue-100 text-blue-600' : 'text-gray-600 hover:bg-gray-100'
                }`}
              >
                <FiGrid className="h-4 w-4" />
              </button>
              <button
                onClick={() => setViewMode('list')}
                className={`p-1 rounded transition-colors ${
                  viewMode === 'list' ? 'bg-blue-100 text-blue-600' : 'text-gray-600 hover:bg-gray-100'
                }`}
              >
                <FiList className="h-4 w-4" />
              </button>
            </div>
          </div>
        </div>

        {/* Products Grid */}
        <div className={`grid gap-4 ${
          viewMode === 'grid'
            ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4'
            : 'grid-cols-1'
        }`}
        >
          {products.length > 0 ? (
            products.map(product => (
              <ProductCard key={product.id || product._id} product={product} viewMode={viewMode} />
            ))
          ) : (
            <div className="col-span-full text-center py-16">
              <FiShoppingBag className="mx-auto h-12 w-12 text-gray-400 mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
              </h3>
              <p className="text-gray-600">
                –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
              </p>
            </div>
          )}
        </div>
      </div>

    </div>
  )
}

export default CatalogPage
