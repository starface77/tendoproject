import { useState, useEffect } from 'react'
import { Link, useNavigate } from 'react-router-dom'
import { FiPackage, FiTruck, FiCheckCircle, FiClock, FiArrowLeft, FiEye } from 'react-icons/fi'
import LoadingSpinner from '../components/ui/LoadingSpinner'
import { ordersApi } from '../services/api'
import { useAuth } from '../contexts/AuthContext'
import { useLanguage } from '../contexts/LanguageContext'

const OrdersPage = () => {
  const navigate = useNavigate()
  const { isAuthenticated } = useAuth()
  const { t } = useLanguage()
  const [orders, setOrders] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)

  useEffect(() => {
    if (isAuthenticated) {
      loadOrders()
    }
  }, [isAuthenticated])

  const loadOrders = async () => {
    try {
      setLoading(true)
      setError(null)

      console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
      const response = await ordersApi.getUserOrders()

      console.log('‚úÖ –ó–∞–∫–∞–∑—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', response)
      setOrders(response.data || [])
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error)
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.')
      setOrders([])
    } finally {
      setLoading(false)
    }
  }

  const getStatusInfo = (status) => {
    switch (status) {
      case 'pending':
        return { text: t('order_status_pending', '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'), color: 'text-yellow-600', bg: 'bg-yellow-100', icon: FiClock }
      case 'confirmed':
        return { text: t('order_status_confirmed', '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'), color: 'text-blue-600', bg: 'bg-blue-100', icon: FiPackage }
      case 'shipped':
        return { text: t('order_status_shipped', '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω'), color: 'text-purple-600', bg: 'bg-purple-100', icon: FiTruck }
      case 'delivered':
        return { text: t('order_status_delivered', '–î–æ—Å—Ç–∞–≤–ª–µ–Ω'), color: 'text-green-600', bg: 'bg-green-100', icon: FiCheckCircle }
      default:
        return { text: t('order_status_unknown', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'), color: 'text-gray-600', bg: 'bg-gray-100', icon: FiPackage }
    }
  }

  if (loading) {
    return <LoadingSpinner />
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container-custom py-8">
        
        {/* –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ */}
        <div className="mb-8">
          <button
            onClick={() => navigate(-1)}
            className="flex items-center text-blue-600 hover:text-blue-700 transition-colors mb-6"
          >
            <FiArrowLeft className="mr-2" />
{t('back', '–ù–∞–∑–∞–¥')}
          </button>
          
          <div className="flex items-center space-x-3 mb-4">
            <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center">
              <FiPackage className="h-6 w-6 text-blue-500" />
            </div>
            <div>
              <h1 className="text-3xl font-bold text-gray-900">{t('my_orders', '–ú–æ–∏ –∑–∞–∫–∞–∑—ã')}</h1>
              <p className="text-gray-600">{t('purchase_history', '–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫')}</p>
            </div>
          </div>
        </div>

        {/* Error State */}
        {error && (
          <div className="text-center py-16">
            <div className="w-24 h-24 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-6">
              <FiPackage className="h-12 w-12 text-red-500" />
            </div>
            <h3 className="text-xl font-semibold text-gray-900 mb-2">{t('loading_error', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏')}</h3>
            <p className="text-gray-600 mb-6">{error}</p>
            <button
              onClick={loadOrders}
              className="bg-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors"
            >
              {t('try_again', '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞')}
            </button>
          </div>
        )}

        {/* Content */}
        {!error && orders.length === 0 && !loading ? (
          <div className="text-center py-16">
            <div className="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
              <FiPackage className="h-12 w-12 text-gray-400" />
            </div>
            <h3 className="text-xl font-semibold text-gray-900 mb-2">{t('no_orders_yet', '–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç')}</h3>
            <p className="text-gray-600 mb-6">{t('make_first_order', '–°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –∏ –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å')}</p>
            <Link
              to="/"
              className="bg-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors"
            >
              {t('start_shopping', '–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–∞–º')}
            </Link>
          </div>
        ) : !error && (
          <div className="space-y-6">
            {orders.map((order) => {
              const statusInfo = getStatusInfo(order.status)
              const StatusIcon = statusInfo.icon
              
              return (
                <div key={order.id || order._id} className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
                  {/* Order Header */}
                  <div className="p-6 border-b border-gray-100">
                    <div className="flex items-center justify-between mb-4">
                      <div>
                        <h3 className="text-lg font-semibold text-gray-900">–ó–∞–∫–∞–∑ {order.orderNumber || order.id}</h3>
                        <p className="text-sm text-gray-500">
                          {new Date(order.createdAt || order.date || Date.now()).toLocaleDateString('ru-RU', {
                            year: 'numeric',
                            month: 'long',
                            day: 'numeric'
                          })}
                        </p>
                      </div>
                      
                      <div className="flex items-center space-x-3">
                        <div className={`px-3 py-1 rounded-full ${statusInfo.bg}`}>
                          <span className={`text-sm font-medium ${statusInfo.color}`}>
                            {statusInfo.text}
                          </span>
                        </div>
                        
                        <Link
                          to={`/order/${order.id}`}
                          className="p-2 text-gray-400 hover:text-blue-600 transition-colors"
                        >
                          <FiEye className="h-5 w-5" />
                        </Link>
                      </div>
                    </div>

                    {/* Order Items */}
                    <div className="space-y-3">
                      {order.items && order.items.length > 0 ? (
                        order.items.map((item, index) => (
                          <div key={item.id || item._id || index} className="flex items-center justify-between py-2">
                            <div className="flex items-center space-x-3">
                              <div className="w-10 h-10 bg-gray-100 rounded-md flex items-center justify-center">
                                <span className="text-lg">üì±</span>
                              </div>
                              <div>
                                <p className="font-medium text-gray-900">{item.name || t('product', '–¢–æ–≤–∞—Ä')}</p>
                                <p className="text-sm text-gray-500">{t('quantity', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')}: {item.quantity || 1}</p>
                              </div>
                            </div>
                            <span className="font-semibold text-gray-900">
                              {new Intl.NumberFormat('uz-UZ').format(item.price || 0)} —Å—É–º
                            </span>
                          </div>
                        ))
                      ) : (
                        <div className="text-center py-4">
                          <p className="text-gray-500">{t('product_info_unavailable', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')}</p>
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Order Footer */}
                  <div className="px-6 py-4 bg-gray-50">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-2">
                        <StatusIcon className={`h-5 w-5 ${statusInfo.color}`} />
                        <span className="text-sm text-gray-600">
{t('status', '–°—Ç–∞—Ç—É—Å')}: {statusInfo.text}
                        </span>
                      </div>
                      
                      <div className="text-right">
                        <p className="text-sm text-gray-600">{t('total', '–ò—Ç–æ–≥–æ')}:</p>
                        <p className="text-xl font-bold text-gray-900">
                          {new Intl.NumberFormat('uz-UZ').format(order.pricing?.total || order.total || 0)} —Å—É–º
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              )
            })}
          </div>
        )}
      </div>
    </div>
  )
}

export default OrdersPage
