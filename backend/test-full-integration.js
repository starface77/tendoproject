const http = require('http');

/**
 * üß™ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ü–†–û–ï–ö–¢–ê
 * –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
 */

console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...\n');

// –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function testEndpoint(url, method = 'GET', data = null, headers = {}) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const options = {
      hostname: urlObj.hostname,
      port: urlObj.port,
      path: urlObj.pathname + urlObj.search,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        ...headers
      }
    };

    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => {
        body += chunk;
      });

      res.on('end', () => {
        try {
          const response = {
            status: res.statusCode,
            data: body ? JSON.parse(body) : null,
            headers: res.headers
          };
          resolve(response);
        } catch (e) {
          resolve({
            status: res.statusCode,
            data: body,
            headers: res.headers
          });
        }
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }

    req.end();
  });
}

async function runTests() {
  const tests = [
    {
      name: '–¢–µ—Å—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã',
      test: async () => {
        const response = await testEndpoint('http://localhost:5000/api/v1/contacts', 'POST', {
          name: 'Test User',
          email: 'test@example.com',
          subject: 'Test Message',
          message: 'This is a test message for integration testing'
        });
        return response.status === 201 && response.data.success;
      }
    },
    {
      name: '–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)',
      test: async () => {
        const response = await testEndpoint('http://localhost:5000/api/v1/contacts');
        return response.status === 401; // –î–æ–ª–∂–µ–Ω —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      }
    },
    {
      name: '–¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏',
      test: async () => {
        const response = await testEndpoint('http://localhost:3001');
        return response.status === 200;
      }
    },
    {
      name: '–¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∞–π—Ç–∞',
      test: async () => {
        const response = await testEndpoint('http://localhost:5173');
        return response.status === 200;
      }
    },
    {
      name: '–¢–µ—Å—Ç API –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã',
      test: async () => {
        const response = await testEndpoint('http://localhost:5000/api/v1/admin/health');
        return response.status === 401; // –î–æ–ª–∂–µ–Ω —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      }
    }
  ];

  console.log('üìã –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã:\n');

  let passed = 0;
  let failed = 0;

  for (const testCase of tests) {
    try {
      console.log(`‚è≥ ${testCase.name}...`);
      const result = await testCase.test();

      if (result) {
        console.log(`‚úÖ ${testCase.name} - –ü–†–û–®–ï–õ`);
        passed++;
      } else {
        console.log(`‚ùå ${testCase.name} - –ù–ï –ü–†–û–®–ï–õ`);
        failed++;
      }
    } catch (error) {
      console.log(`‚ùå ${testCase.name} - –û–®–ò–ë–ö–ê: ${error.message}`);
      failed++;
    }
    console.log('');
  }

  console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`);
  console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
  console.log(`üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${passed + failed}`);

  if (failed === 0) {
    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ü–†–û–ï–ö–¢ –ì–û–¢–û–í –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!');
  } else {
    console.log('\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´. –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê.');
  }

  console.log('\nüîß –†–£–ß–ù–´–ï –¢–ï–°–¢–´:');
  console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:5173 –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é —Ñ–æ—Ä–º—É');
  console.log('2. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3001 –∏ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å');
  console.log('3. –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–¥–µ–ª "Messages"');
  console.log('4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ');
  console.log('5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ dashboard - –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(console.error);




