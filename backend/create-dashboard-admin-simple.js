const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

async function createDashboardAdmin() {
  try {
    console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
    
    // –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ë–î —á—Ç–æ –∏ backend)
    await mongoose.connect('mongodb://localhost:27017/chexoluz', {
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
    });
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ö–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userSchema = new mongoose.Schema({
      email: { 
        type: String, 
        required: true, 
        unique: true,
        lowercase: true,
        trim: true
      },
      password: { 
        type: String, 
        required: true,
        select: false
      },
      firstName: { 
        type: String, 
        required: true,
        trim: true
      },
      lastName: { 
        type: String, 
        required: true,
        trim: true
      },
      phone: String,
      role: {
        type: String,
        enum: ['user', 'seller', 'admin', 'super_admin', 'moderator', 'courier'],
        default: 'user'
      },
      isActive: { 
        type: Boolean, 
        default: true 
      },
      isVerified: { 
        type: Boolean, 
        default: false 
      },
      permissions: {
        type: mongoose.Schema.Types.Mixed,
        default: {}
      },
      createdAt: { 
        type: Date, 
        default: Date.now 
      },
      updatedAt: { 
        type: Date, 
        default: Date.now 
      }
    });

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
    userSchema.methods.checkPassword = async function(candidatePassword) {
      if (!this.password) return false;
      try {
        return await bcrypt.compare(candidatePassword, this.password);
      } catch (error) {
        console.error('Password check error:', error);
        return false;
      }
    };

    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
    const User = mongoose.model('User', userSchema);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∞
    const existingAdmin = await User.findOne({ email: 'admin@tendo.uz' });
    
    if (existingAdmin) {
      console.log('‚úÖ –ê–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:');
      console.log(`üìß Email: ${existingAdmin.email}`);
      console.log(`üëë –†–æ–ª—å: ${existingAdmin.role}`);
      console.log(`üîí –ê–∫—Ç–∏–≤–µ–Ω: ${existingAdmin.isActive}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å...');
      const hashedPassword = await bcrypt.hash('admin123456', 12);
      existingAdmin.password = hashedPassword;
      existingAdmin.role = 'admin';
      existingAdmin.isActive = true;
      existingAdmin.isVerified = true;
      
      await existingAdmin.save();
      console.log('‚úÖ –ü–∞—Ä–æ–ª—å –∏ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
    console.log('üîê –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–æ–ª—å...');
    const hashedPassword = await bcrypt.hash('admin123456', 12);

    console.log('üëë –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞...');
    const admin = new User({
      email: 'admin@tendo.uz',
      password: hashedPassword,
      firstName: 'Admin',
      lastName: 'Dashboard',
      phone: '+998901234567',
      role: 'admin',
      isActive: true,
      isVerified: true,
      permissions: {
        canManageUsers: true,
        canManageProducts: true,
        canManageOrders: true,
        canManageSettings: true,
        canViewAnalytics: true,
        canManagePayments: true,
        canManageSellers: true,
        canManageCategories: true,
        canManageReviews: true
      }
    });

    await admin.save();

    console.log('üéâ ==========================================');
    console.log('‚úÖ –ê–î–ú–ò–ù –î–õ–Ø –î–ê–®–ë–û–†–î–ê –°–û–ó–î–ê–ù –£–°–ü–ï–®–ù–û!');
    console.log('üéâ ==========================================');
    console.log(`üìß Email: ${admin.email}`);
    console.log('üîê –ü–∞—Ä–æ–ª—å: admin123456');
    console.log(`üëë –†–æ–ª—å: ${admin.role}`);
    console.log('üéâ ==========================================');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.error(' Stack:', error.stack);
  } finally {
    await mongoose.connection.close();
    console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MongoDB');
    process.exit(0);
  }
}

createDashboardAdmin();