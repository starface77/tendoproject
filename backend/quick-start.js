#!/usr/bin/env node

/**
 * üöÄ QUICK START SCRIPT FOR TENDO MARKET
 * –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
 */

const mongoose = require('mongoose');
const bcryptjs = require('bcryptjs');
require('dotenv').config();

// Import models
const User = require('./models/User');
const Category = require('./models/Category');
const Product = require('./models/Product');
const Setting = require('./models/Setting');

async function quickStart() {
  console.log('\nüöÄ === TENDO MARKET QUICK START ===\n');
  
  try {
    // 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
    await mongoose.connect(process.env.MONGO_URI || 'mongodb://localhost:27017/tendomarketuz');
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');

    // 2. –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    console.log('\nüëë –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞...');
    const adminExists = await User.findOne({ role: 'super_admin' });
    
    if (!adminExists) {
      const hashedPassword = await bcryptjs.hash('admin123', 12);
      
      const admin = new User({
        firstName: 'Admin',
        lastName: 'Tendo Market',
        email: 'admin@tendo.uz',
        password: hashedPassword,
        role: 'super_admin',
        isEmailVerified: true,
        isActive: true,
        profile: {
          bio: '–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä Tendo Market'
        },
        permissions: {
          canManageUsers: true,
          canManageProducts: true,
          canManageOrders: true,
          canManageSettings: true,
          canViewAnalytics: true,
          canManagePayments: true,
          canManageSellers: true
        }
      });

      await admin.save();
      console.log('‚úÖ –ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω: admin@tendo.uz / admin123');
    } else {
      console.log('‚ÑπÔ∏è  –ê–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // 3. –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    console.log('\nüìÇ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
    const categories = [
      { name: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', slug: 'electronics', icon: 'üì±', description: '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã, –ø–ª–∞–Ω—à–µ—Ç—ã, –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã' },
      { name: '–û–¥–µ–∂–¥–∞', slug: 'clothing', icon: 'üëï', description: '–ú—É–∂—Å–∫–∞—è –∏ –∂–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞' },
      { name: '–û–±—É–≤—å', slug: 'shoes', icon: 'üëü', description: '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –∏ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è –æ–±—É–≤—å' },
      { name: '–î–æ–º –∏ –±—ã—Ç', slug: 'home', icon: 'üè†', description: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞ –∏ –±—ã—Ç–∞' },
      { name: '–ö—Ä–∞—Å–æ—Ç–∞', slug: 'beauty', icon: 'üíÑ', description: '–ö–æ—Å–º–µ—Ç–∏–∫–∞ –∏ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏—è' },
      { name: '–°–ø–æ—Ä—Ç', slug: 'sport', icon: '‚öΩ', description: '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã' },
      { name: '–ê–≤—Ç–æ', slug: 'auto', icon: 'üöó', description: '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã' },
      { name: '–ö–Ω–∏–≥–∏', slug: 'books', icon: 'üìö', description: '–ö–Ω–∏–≥–∏ –∏ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—è' }
    ];

    for (const catData of categories) {
      const exists = await Category.findOne({ slug: catData.slug });
      if (!exists) {
        const category = new Category({
          name: {
            ru: catData.name,
            uz: catData.name,
            en: catData.name
          },
          slug: catData.slug,
          icon: catData.icon,
          description: {
            ru: catData.description,
            uz: catData.description,
            en: catData.description
          },
          isActive: true,
          isVisible: true,
          productsCount: 0
        });
        await category.save();
        console.log(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${catData.name}" —Å–æ–∑–¥–∞–Ω–∞`);
      }
    }

    // 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    console.log('\n‚öôÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
    const defaultSettings = [
      {
        key: 'site_name',
        value: 'Tendo Market',
        meta: {
          category: 'general',
          title: { ru: '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞' },
          fieldType: 'text',
          isSystem: true
        }
      },
      {
        key: 'contact_phone',
        value: '+998 78 150 15 15',
        meta: {
          category: 'general',
          title: { ru: '–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–∏' },
          fieldType: 'text'
        }
      },
      {
        key: 'contact_email',
        value: 'support@tendo.uz',
        meta: {
          category: 'general',
          title: { ru: 'Email –ø–æ–¥–¥–µ—Ä–∂–∫–∏' },
          fieldType: 'email'
        }
      },
      {
        key: 'free_delivery_threshold',
        value: 200000,
        meta: {
          category: 'delivery',
          title: { ru: '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç' },
          fieldType: 'number'
        }
      },
      {
        key: 'delivery_cost',
        value: 25000,
        meta: {
          category: 'delivery',
          title: { ru: '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏' },
          fieldType: 'number'
        }
      }
    ];

    for (const settingData of defaultSettings) {
      const exists = await Setting.findOne({ key: settingData.key });
      if (!exists) {
        const setting = new Setting(settingData);
        await setting.save();
        console.log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ "${settingData.key}" —Å–æ–∑–¥–∞–Ω–∞`);
      }
    }

    console.log('\nüéâ === TENDO MARKET –ì–û–¢–û–í! ===');
    console.log('\nüìç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:');
    console.log(`üåê Frontend: http://localhost:3000`);
    console.log(`üîß Admin Panel: http://localhost:3001`);
    console.log(`‚öôÔ∏è  Backend API: http://localhost:5000`);
    console.log('\nüîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:');
    console.log(`Email: admin@tendo.uz`);
    console.log(`Password: admin123`);
    
    console.log('\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:');
    console.log('npm start (–≤ –ø–∞–ø–∫–µ backend)');
    console.log('npm run dev (–≤ –ø–∞–ø–∫–µ frontend)');
    console.log('npm start (–≤ –ø–∞–ø–∫–µ dashboard)');

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error);
    process.exit(1);
  } finally {
    mongoose.connection.close();
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
quickStart();

