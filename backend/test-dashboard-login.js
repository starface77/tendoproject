const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

async function testDashboardLogin() {
  try {
    console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
    
    // –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await mongoose.connect('mongodb://localhost:27017/tendo-market', {
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
    });
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ö–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userSchema = new mongoose.Schema({
      email: { 
        type: String, 
        required: true, 
        unique: true,
        lowercase: true,
        trim: true
      },
      password: { 
        type: String, 
        required: true,
        select: false
      },
      firstName: { 
        type: String, 
        required: true,
        trim: true
      },
      lastName: { 
        type: String, 
        required: true,
        trim: true
      },
      phone: String,
      role: {
        type: String,
        enum: ['user', 'seller', 'admin', 'super_admin', 'moderator', 'courier'],
        default: 'user'
      },
      isActive: { 
        type: Boolean, 
        default: true 
      },
      isVerified: { 
        type: Boolean, 
        default: false 
      },
      permissions: {
        type: mongoose.Schema.Types.Mixed,
        default: {}
      },
      createdAt: { 
        type: Date, 
        default: Date.now 
      },
      updatedAt: { 
        type: Date, 
        default: Date.now 
      }
    });

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
    userSchema.methods.checkPassword = async function(candidatePassword) {
      if (!this.password) return false;
      try {
        return await bcrypt.compare(candidatePassword, this.password);
      } catch (error) {
        console.error('Password check error:', error);
        return false;
      }
    };

    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
    const User = mongoose.model('User', userSchema);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∞
    const admin = await User.findOne({ email: 'admin@tendo.uz' }).select('+password');
    
    if (!admin) {
      console.log('‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log('‚úÖ –ê–¥–º–∏–Ω –Ω–∞–π–¥–µ–Ω:');
    console.log(`üìß Email: ${admin.email}`);
    console.log(`üëë –†–æ–ª—å: ${admin.role}`);
    console.log(`üîí –ê–∫—Ç–∏–≤–µ–Ω: ${admin.isActive}`);
    console.log(`üîê –ü–∞—Ä–æ–ª—å —Ö–µ—à: ${admin.password ? admin.password.substring(0, 20) + '...' : 'NONE'}`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    console.log('\nüîê –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥ —Å –ø–∞—Ä–æ–ª–µ–º "admin123456"...');
    const isPasswordValid = await admin.checkPassword('admin123456');
    console.log(`‚úÖ –ü–∞—Ä–æ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: ${isPasswordValid}`);
    
    if (isPasswordValid) {
      console.log('\nüéâ ==========================================');
      console.log('‚úÖ –í–•–û–î –í –î–ê–®–ë–û–†–î –î–û–°–¢–£–ü–ï–ù!');
      console.log('üéâ ==========================================');
      console.log(`üìß Email: ${admin.email}`);
      console.log('üîê –ü–∞—Ä–æ–ª—å: admin123456');
      console.log('üéâ ==========================================');
      console.log('–í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –ø–æ –∞–¥—Ä–µ—Å—É:');
      console.log('http://localhost:3001');
    } else {
      console.log('\n‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–∞—Ä–æ–ª—å.');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.error(' Stack:', error.stack);
  } finally {
    await mongoose.connection.close();
    console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MongoDB');
    process.exit(0);
  }
}

testDashboardLogin();