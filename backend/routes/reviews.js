const express = require('express');
const { body, query, param } = require('express-validator');
const {
  getReviews,
  getReview,
  approveReview,
  rejectReview,
  deleteReview,
  respondToReview,
  getReviewStats,
  bulkReviewOperations
} = require('../controllers/reviews');

const { protect, authorize } = require('../middleware/auth');
const validate = require('../middleware/validate');

const router = express.Router();

// Validation middleware
const validateReviewResponse = [
  body('content')
    .notEmpty()
    .withMessage('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
    .isLength({ min: 10, max: 1000 })
    .withMessage('–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 10 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤')
];

const validateReviewRejection = [
  body('reason')
    .notEmpty()
    .withMessage('–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞')
    .isLength({ min: 5, max: 500 })
    .withMessage('–ü—Ä–∏—á–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 5 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤')
];

const validateBulkOperations = [
  body('action')
    .isIn(['approve', 'reject', 'delete'])
    .withMessage('–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'),
  body('reviewIds')
    .isArray({ min: 1 })
    .withMessage('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –æ—Ç–∑—ã–≤'),
  body('reviewIds.*')
    .isMongoId()
    .withMessage('–ù–µ–≤–µ—Ä–Ω—ã–π ID –æ—Ç–∑—ã–≤–∞'),
  body('reason')
    .if(body('action').equals('reject'))
    .notEmpty()
    .withMessage('–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤')
];

const validateGetReviews = [
  query('page')
    .optional()
    .isInt({ min: 1 })
    .withMessage('–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º'),
  query('limit')
    .optional()
    .isInt({ min: 1, max: 100 })
    .withMessage('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100'),
  query('rating')
    .optional()
    .isInt({ min: 1, max: 5 })
    .withMessage('–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5'),
  query('isApproved')
    .optional()
    .isBoolean()
    .withMessage('–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è'),
  query('product')
    .optional()
    .isMongoId()
    .withMessage('–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞'),
  query('user')
    .optional()
    .isMongoId()
    .withMessage('–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
];

const validateMongoId = [
  param('id')
    .isMongoId()
    .withMessage('–ù–µ–≤–µ—Ä–Ω—ã–π ID –æ—Ç–∑—ã–≤–∞')
];

// üìä –ú–ê–†–®–†–£–¢–´ –î–õ–Ø –ê–î–ú–ò–ù–û–í –ò –ú–û–î–ï–†–ê–¢–û–†–û–í

// @route   GET /api/v1/reviews/stats
// @desc    Get review statistics
// @access  Private (Admin)
router.get('/stats', 
  protect, 
  authorize('admin', 'super_admin'), 
  getReviewStats
);

// @route   GET /api/v1/reviews
// @desc    Get all reviews with filtering and pagination
// @access  Private (Admin/Moderator)
router.get('/', 
  protect, 
  authorize('admin', 'super_admin', 'moderator'), 
  validateGetReviews, 
  validate, 
  getReviews
);

// @route   POST /api/v1/reviews/bulk
// @desc    Bulk operations on reviews (approve/reject/delete multiple)
// @access  Private (Admin)
router.post('/bulk', 
  protect, 
  authorize('admin', 'super_admin'), 
  validateBulkOperations, 
  validate, 
  bulkReviewOperations
);

// @route   GET /api/v1/reviews/:id
// @desc    Get single review by ID
// @access  Private (Admin/Moderator)
router.get('/:id', 
  protect, 
  authorize('admin', 'super_admin', 'moderator'), 
  validateMongoId, 
  validate, 
  getReview
);

// @route   PATCH /api/v1/reviews/:id/approve
// @desc    Approve a review
// @access  Private (Admin/Moderator)
router.patch('/:id/approve', 
  protect, 
  authorize('admin', 'super_admin', 'moderator'), 
  validateMongoId, 
  validate, 
  approveReview
);

// @route   PATCH /api/v1/reviews/:id/reject
// @desc    Reject a review
// @access  Private (Admin/Moderator)
router.patch('/:id/reject', 
  protect, 
  authorize('admin', 'super_admin', 'moderator'), 
  validateMongoId, 
  validateReviewRejection, 
  validate, 
  rejectReview
);

// @route   POST /api/v1/reviews/:id/respond
// @desc    Respond to a review
// @access  Private (Admin/Moderator/Seller)
router.post('/:id/respond', 
  protect, 
  authorize('admin', 'super_admin', 'moderator', 'seller'), 
  validateMongoId, 
  validateReviewResponse, 
  validate, 
  respondToReview
);

// @route   DELETE /api/v1/reviews/:id
// @desc    Delete a review
// @access  Private (Admin/Super Admin)
router.delete('/:id', 
  protect, 
  authorize('admin', 'super_admin'), 
  validateMongoId, 
  validate, 
  deleteReview
);

module.exports = router;