const express = require('express');
const { protect } = require('../middleware/auth');
const NotificationService = require('../services/notificationService');
const Notification = require('../models/Notification');

const router = express.Router();

// üîî –ü–û–õ–£–ß–ò–¢–¨ –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
router.get('/', protect, async (req, res) => {
  try {
    const { page = 1, limit = 20, unreadOnly = false } = req.query;
    
    const result = await NotificationService.getUserNotifications(
      req.user._id, 
      { page: parseInt(page), limit: parseInt(limit), unreadOnly: unreadOnly === 'true' }
    );
    
    res.status(200).json({
      success: true,
      data: result
    });
    
  } catch (error) {
    console.error('Get notifications error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
    });
  }
});

// ‚úÖ –û–¢–ú–ï–¢–ò–¢–¨ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ö–ê–ö –ü–†–û–ß–ò–¢–ê–ù–ù–û–ï
router.patch('/:id/read', protect, async (req, res) => {
  try {
    const notification = await NotificationService.markNotificationAsRead(
      req.params.id, 
      req.user._id
    );
    
    if (!notification) {
      return res.status(404).json({
        success: false,
        message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
      });
    }
    
    res.status(200).json({
      success: true,
      data: notification
    });
    
  } catch (error) {
    console.error('Mark notification as read error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
    });
  }
});

// üóëÔ∏è –ê–†–•–ò–í–ò–†–û–í–ê–¢–¨ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï
router.patch('/:id/archive', protect, async (req, res) => {
  try {
    const notification = await NotificationService.archiveNotification(
      req.params.id, 
      req.user._id
    );
    
    if (!notification) {
      return res.status(404).json({
        success: false,
        message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
      });
    }
    
    res.status(200).json({
      success: true,
      data: notification
    });
    
  } catch (error) {
    console.error('Archive notification error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
    });
  }
});

// üìä –ü–û–õ–£–ß–ò–¢–¨ –°–¢–ê–¢–ò–°–¢–ò–ö–£ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
router.get('/stats', protect, async (req, res) => {
  try {
    const { unreadOnly = false } = req.query;
    
    const result = await NotificationService.getUserNotifications(
      req.user._id, 
      { page: 1, limit: 1000, unreadOnly: unreadOnly === 'true' }
    );
    
    const stats = {
      total: result.pagination.total,
      unread: result.notifications.filter(n => !n.isRead).length,
      read: result.notifications.filter(n => n.isRead).length,
      archived: result.notifications.filter(n => n.isArchived).length,
      byPriority: {
        low: result.notifications.filter(n => n.priority === 'low').length,
        normal: result.notifications.filter(n => n.priority === 'normal').length,
        high: result.notifications.filter(n => n.priority === 'high').length,
        urgent: result.notifications.filter(n => n.priority === 'urgent').length
      }
    };
    
    res.status(200).json({
      success: true,
      data: stats
    });
    
  } catch (error) {
    console.error('Get notification stats error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
    });
  }
});

// üîÑ –û–¢–ú–ï–¢–ò–¢–¨ –í–°–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ö–ê–ö –ü–†–û–ß–ò–¢–ê–ù–ù–´–ï
router.patch('/read-all', protect, async (req, res) => {
  try {
    const result = await NotificationService.getUserNotifications(
      req.user._id, 
      { page: 1, limit: 1000, unreadOnly: true }
    );
    
    const updatePromises = result.notifications.map(notification =>
      NotificationService.markNotificationAsRead(notification._id, req.user._id)
    );
    
    await Promise.all(updatePromises);
    
    res.status(200).json({
      success: true,
      message: `–û—Ç–º–µ—á–µ–Ω–æ ${result.notifications.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ`
    });
    
  } catch (error) {
    console.error('Mark all notifications as read error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
    });
  }
});

// üóëÔ∏è –£–î–ê–õ–ò–¢–¨ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï
router.delete('/:id', protect, async (req, res) => {
  try {
    const notification = await Notification.findOneAndDelete({
      _id: req.params.id,
      recipient: req.user._id
    });
    
    if (!notification) {
      return res.status(404).json({
        success: false,
        message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
      });
    }
    
    res.status(200).json({
      success: true,
      message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ'
    });
    
  } catch (error) {
    console.error('Delete notification error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
    });
  }
});

module.exports = router;

