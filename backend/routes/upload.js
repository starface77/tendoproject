const express = require('express');
const multer = require('multer');
const path = require('path');
const crypto = require('crypto');
const {
  uploadSingle,
  uploadMultiple,
  deleteFile,
  getFileInfo
} = require('../controllers/upload');

const { protect, authorize } = require('../middleware/auth');

const router = express.Router();

// üìÅ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø MULTER
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    let folder = 'uploads/';
    
    switch (file.fieldname) {
      case 'productImage':
      case 'productImages':
        folder += 'products/';
        break;
      case 'categoryImage':
        folder += 'categories/';
        break;
      case 'userAvatar':
        folder += 'users/';
        break;
      case 'reviewImage':
      case 'reviewImages':
        folder += 'reviews/';
        break;
      case 'file': // –¥–ª—è –±–∞–Ω–Ω–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ /upload/single
        folder += 'banners/';
        break;
      default:
        folder += 'misc/';
    }
    
    cb(null, folder);
  },
  filename: (req, file, cb) => {
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    const uniqueSuffix = `${crypto.randomBytes(16).toString('hex')}-${Date.now()}`;
    const extension = path.extname(file.originalname).toLowerCase();
    cb(null, `${file.fieldname}-${uniqueSuffix}${extension}`);
  }
});

// –§–∏–ª—å—Ç—Ä —Ñ–∞–π–ª–æ–≤
const fileFilter = (req, file, cb) => {
  // –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
  
  if (allowedTypes.includes(file.mimetype)) {
    cb(null, true);
  } else {
    cb(new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: JPG, JPEG, PNG, WebP'), false);
  }
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ multer
const upload = multer({
  storage,
  fileFilter,
  limits: {
    fileSize: parseInt(process.env.MAX_FILE_SIZE) || 5 * 1024 * 1024, // 5MB
    files: 10 // –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–∞–π–ª–æ–≤ –∑–∞ —Ä–∞–∑
  }
});

// üîê –ó–ê–©–ò–©–ï–ù–ù–´–ï –ú–ê–†–®–†–£–¢–´

// –ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
router.post('/single', protect, upload.single('file'), uploadSingle);

// –ó–∞–≥—Ä—É–∑–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
router.post('/multiple', protect, upload.array('files', 10), uploadMultiple);

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
router.post('/product', protect, authorize('admin', 'super_admin'), 
  upload.single('productImage'), uploadSingle);

// –ó–∞–≥—Ä—É–∑–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞
router.post('/product/multiple', protect, authorize('admin', 'super_admin'),
  upload.array('productImages', 10), uploadMultiple);

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
router.post('/category', protect, authorize('admin', 'super_admin'),
  upload.single('categoryImage'), uploadSingle);

// –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/avatar', protect, upload.single('userAvatar'), uploadSingle);

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–∑—ã–≤–∞
router.post('/review', protect, upload.array('reviewImages', 5), uploadMultiple);

// üìã –£–ü–†–ê–í–õ–ï–ù–ò–ï –§–ê–ô–õ–ê–ú–ò

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
router.get('/info/:filename', protect, getFileInfo);

// –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª
router.delete('/:filename', protect, authorize('admin', 'super_admin'), deleteFile);

// üö® –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö MULTER
router.use((error, req, res, next) => {
  if (error instanceof multer.MulterError) {
    if (error.code === 'LIMIT_FILE_SIZE') {
      return res.status(400).json({
        success: false,
        error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB'
      });
    }
    
    if (error.code === 'LIMIT_FILE_COUNT') {
      return res.status(400).json({
        success: false,
        error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤. –ú–∞–∫—Å–∏–º—É–º: 10 —Ñ–∞–π–ª–æ–≤'
      });
    }
    
    if (error.code === 'LIMIT_UNEXPECTED_FILE') {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª'
      });
    }
  }
  
  if (error.message.includes('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞')) {
    return res.status(400).json({
      success: false,
      error: error.message
    });
  }
  
  next(error);
});

module.exports = router;
