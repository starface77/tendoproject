const mongoose = require('mongoose');

/**
 * üìÇ –ú–û–î–ï–õ–¨ –ö–ê–¢–ï–ì–û–†–ò–ò
 * –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç—å—é
 */

const categorySchema = new mongoose.Schema({
  // üè∑Ô∏è –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
  name: {
    ru: { type: String, required: true, trim: true },
    uz: { type: String, required: true, trim: true },
    en: { type: String, required: true, trim: true }
  },

  description: {
    ru: { type: String, trim: true },
    uz: { type: String, trim: true },
    en: { type: String, trim: true }
  },

  // üîó –ò–ï–†–ê–†–•–ò–Ø
  parent: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Category',
    default: null
  },

  children: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Category'
  }],

  level: {
    type: Number,
    default: 0,
    min: 0,
    max: 5 // –ú–∞–∫—Å–∏–º—É–º 5 —É—Ä–æ–≤–Ω–µ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
  },

  path: {
    type: String,
    index: true
  }, // –ù–∞–ø—Ä–∏–º–µ—Ä: "/electronics/phones/iphone"

  // üñºÔ∏è –í–ò–ó–£–ê–õ
  icon: {
    type: String,
    default: 'üì±'
  },

  image: {
    url: String,
    alt: {
      ru: String,
      uz: String,
      en: String
    }
  },

  color: {
    type: String,
    default: '#3B82F6',
    match: /^#[0-9A-F]{6}$/i
  },

  // üîó SEO
  slug: {
    type: String,
    required: true,
    unique: true,
    lowercase: true,
    trim: true
  },

  metaTitle: {
    ru: String,
    uz: String,
    en: String
  },

  metaDescription: {
    ru: String,
    uz: String,
    en: String
  },

  keywords: [String],

  // üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê
  productCount: {
    type: Number,
    default: 0,
    min: 0
  },

  viewCount: {
    type: Number,
    default: 0,
    min: 0
  },

  orderCount: {
    type: Number,
    default: 0,
    min: 0
  },

  // üéØ –ù–ê–°–¢–†–û–ô–ö–ò
  isActive: {
    type: Boolean,
    default: true
  },

  isFeatured: {
    type: Boolean,
    default: false
  },

  isVisible: {
    type: Boolean,
    default: true
  },

  // üìã –ü–û–†–Ø–î–û–ö –°–û–†–¢–ò–†–û–í–ö–ò
  sortOrder: {
    type: Number,
    default: 0
  },

  // üõí –ö–û–ú–ú–ï–†–ß–ï–°–ö–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò
  commission: {
    type: Number,
    default: 0,
    min: 0,
    max: 100 // –ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏
  },

  minPrice: {
    type: Number,
    default: 0,
    min: 0
  },

  maxPrice: {
    type: Number,
    default: 0,
    min: 0
  },

  // üîß –§–ò–õ–¨–¢–†–´ –ò –ê–¢–†–ò–ë–£–¢–´
  filters: [{
    name: {
      ru: { type: String, required: true },
      uz: { type: String, required: true },
      en: { type: String, required: true }
    },
    type: {
      type: String,
      required: true,
      enum: ['range', 'select', 'checkbox', 'radio', 'color']
    },
    options: [{
      value: String,
      label: {
        ru: String,
        uz: String,
        en: String
      },
      color: String // –¥–ª—è —Ü–≤–µ—Ç–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
    }],
    isRequired: { type: Boolean, default: false },
    order: { type: Number, default: 0 }
  }],

  // üé® –®–ê–ë–õ–û–ù –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø
  template: {
    type: String,
    enum: ['grid', 'list', 'catalog', 'gallery'],
    default: 'grid'
  },

  // üì± –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø –ú–û–ë–ò–õ–¨–ù–´–• –£–°–¢–†–û–ô–°–¢–í
  mobileSettings: {
    showOnHome: { type: Boolean, default: false },
    quickOrderEnabled: { type: Boolean, default: true },
    showFilters: { type: Boolean, default: true }
  },

  // üë§ –°–û–ó–î–ê–¢–ï–õ–¨ –ò –†–ï–î–ê–ö–¢–û–†
  createdBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },

  updatedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  }

}, {
  timestamps: true,
  toJSON: { virtuals: true },
  toObject: { virtuals: true }
});

// üîç –í–ò–†–¢–£–ê–õ–¨–ù–´–ï –ü–û–õ–Ø
categorySchema.virtual('hasChildren').get(function() {
  return this.children && this.children.length > 0;
});

categorySchema.virtual('breadcrumbs').get(function() {
  // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è —á–µ—Ä–µ–∑ populate –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
  return [];
});

categorySchema.virtual('fullPath').get(function() {
  return this.path || '/';
});

// üìä –ò–ù–î–ï–ö–°–´
categorySchema.index({ parent: 1, sortOrder: 1 });
categorySchema.index({ slug: 1 }, { unique: true });
categorySchema.index({ isActive: 1, isVisible: 1 });
categorySchema.index({ level: 1 });
categorySchema.index({ path: 1 });
categorySchema.index({ isFeatured: 1, sortOrder: 1 });
categorySchema.index({ productCount: -1 });
categorySchema.index({ 'name.ru': 'text', 'name.uz': 'text', 'name.en': 'text' });

// üîß MIDDLEWARE
categorySchema.pre('save', async function(next) {
  // –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è slug
  if (this.isModified('name') && !this.slug) {
    this.slug = this.name.en
      .toLowerCase()
      .replace(/[^a-z0-9]/g, '-')
      .replace(/-+/g, '-')
      .replace(/^-|-$/g, '');
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –∏ –ø—É—Ç–∏ –¥–ª—è –∏–µ—Ä–∞—Ä—Ö–∏–∏
  if (this.isModified('parent') || this.isNew) {
    if (this.parent) {
      const parentCategory = await this.constructor.findById(this.parent);
      if (parentCategory) {
        this.level = parentCategory.level + 1;
        this.path = `${parentCategory.path}/${this.slug}`;
      }
    } else {
      this.level = 0;
      this.path = `/${this.slug}`;
    }
  }

  next();
});

categorySchema.post('save', async function(category) {
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–π —É —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  if (category.parent) {
    await this.constructor.findByIdAndUpdate(
      category.parent,
      { $addToSet: { children: category._id } }
    );
  }
});

categorySchema.pre('remove', async function(next) {
  // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–µ—Ç–µ–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  if (this.parent) {
    await this.constructor.findByIdAndUpdate(
      this.parent,
      { $pull: { children: this._id } }
    );
  }

  // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ –∏–ª–∏ —É–¥–∞–ª—è–µ–º
  if (this.children && this.children.length > 0) {
    await this.constructor.updateMany(
      { parent: this._id },
      { parent: this.parent, level: this.level }
    );
  }

  next();
});

// üìà –ú–ï–¢–û–î–´
categorySchema.methods.incrementProductCount = function() {
  this.productCount += 1;
  return this.save();
};

categorySchema.methods.decrementProductCount = function() {
  if (this.productCount > 0) {
    this.productCount -= 1;
  }
  return this.save();
};

categorySchema.methods.incrementViewCount = function() {
  this.viewCount += 1;
  return this.save();
};

categorySchema.methods.getAncestors = async function() {
  const ancestors = [];
  let current = this;

  while (current.parent) {
    current = await this.constructor.findById(current.parent);
    if (current) {
      ancestors.unshift(current);
    } else {
      break;
    }
  }

  return ancestors;
};

categorySchema.methods.getDescendants = async function() {
  const descendants = [];
  
  const findChildren = async (categoryId) => {
    const children = await this.constructor.find({ parent: categoryId });
    for (const child of children) {
      descendants.push(child);
      await findChildren(child._id);
    }
  };

  await findChildren(this._id);
  return descendants;
};

categorySchema.methods.getBreadcrumbs = async function() {
  const ancestors = await this.getAncestors();
  return [...ancestors, this];
};

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
categorySchema.statics.findTopLevel = function() {
  return this.find({ parent: null, isActive: true, isVisible: true })
    .sort({ sortOrder: 1, 'name.ru': 1 });
};

categorySchema.statics.findBySlug = function(slug) {
  return this.findOne({ slug, isActive: true, isVisible: true });
};

categorySchema.statics.findFeatured = function(limit = 10) {
  return this.find({ isFeatured: true, isActive: true, isVisible: true })
    .sort({ sortOrder: 1 })
    .limit(limit);
};

categorySchema.statics.getTree = async function() {
  const categories = await this.find({ isActive: true, isVisible: true })
    .sort({ level: 1, sortOrder: 1 });

  const buildTree = (parentId = null) => {
    return categories
      .filter(cat => (cat.parent?.toString() || null) === (parentId?.toString() || null))
      .map(cat => ({
        ...cat.toObject(),
        children: buildTree(cat._id)
      }));
  };

  return buildTree();
};

categorySchema.statics.updateProductCounts = async function() {
  const Product = require('./Product');
  
  const pipeline = [
    { $match: { isActive: true } },
    { $group: { _id: '$category', count: { $sum: 1 } } }
  ];

  const productCounts = await Product.aggregate(pipeline);
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å—á–µ—Ç—á–∏–∫–∏
  await this.updateMany({}, { productCount: 0 });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
  for (const item of productCounts) {
    await this.findByIdAndUpdate(item._id, { productCount: item.count });
  }
};

module.exports = mongoose.model('Category', categorySchema);