const mongoose = require('mongoose');

/**
 * üß± Idempotency Key Model
 * –•—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
 */
const idempotencyKeySchema = new mongoose.Schema({
  key: {
    type: String,
    required: true,
    unique: true,
    index: true
  },

  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },

  method: {
    type: String,
    required: true
  },

  path: {
    type: String,
    required: true
  },

  action: {
    type: String
  },

  requestHash: {
    type: String,
    index: true
  },

  status: {
    type: String,
    enum: ['in_progress', 'completed'],
    default: 'in_progress'
  },

  responseStatus: Number,
  responseBody: mongoose.Schema.Types.Mixed,

  createdAt: {
    type: Date,
    default: Date.now,
    index: { expires: '2d' } // TTL: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 –¥–Ω—è
  },

  updatedAt: {
    type: Date,
    default: Date.now
  }
});

idempotencyKeySchema.pre('save', function(next) {
  this.updatedAt = new Date();
  next();
});

module.exports = mongoose.model('IdempotencyKey', idempotencyKeySchema);


