const mongoose = require('mongoose');

/**
 * üß© HomeSection
 * –ê–¥–º–∏–Ω-–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ —Å–µ–∫—Ü–∏–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π: "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ", "–ù–æ–≤–∏–Ω–∫–∏", "–°–∫–∏–¥–∫–∏", –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –∏ —Ç.–¥.
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ä–µ–∂–∏–º–∞:
 * - manual: —Å–ø–∏—Å–æ–∫ productIds
 * - dynamic: query-–∫–æ–Ω—Ñ–∏–≥ (category, tags, —Ñ–ª–∞–≥–∏, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞)
 */

const HomeSectionSchema = new mongoose.Schema({
  title: { type: String, required: true, trim: true },
  key: { type: String, trim: true }, // –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –∫–ª—é—á
  type: { type: String, enum: ['manual', 'dynamic'], default: 'manual' },
  description: { type: String, default: '' },
  order: { type: Number, default: 0, index: true },
  isActive: { type: Boolean, default: true, index: true },

  productIds: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Product' }],

  query: {
    categoryId: { type: mongoose.Schema.Types.ObjectId, ref: 'Category' },
    tag: { type: String },
    isFeatured: { type: Boolean },
    isOnSale: { type: Boolean },
    limit: { type: Number, default: 12, min: 1, max: 48 },
    sort: { type: String, default: '-createdAt' } // –Ω–∞–ø—Ä–∏–º–µ—Ä: '-createdAt', '-rating.average', '-purchases'
  },

  createdBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' }
}, { timestamps: true });

module.exports = mongoose.model('HomeSection', HomeSectionSchema);


