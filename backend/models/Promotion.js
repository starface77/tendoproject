const mongoose = require('mongoose');

/**
 * üéÅ –ú–û–î–ï–õ–¨ –ü–†–û–ú–û–ê–ö–¶–ò–ô –ò –ü–†–û–ú–û–ö–û–î–û–í
 * –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤, —Å–∫–∏–¥–æ–∫ –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
 */

const promotionSchema = new mongoose.Schema({
  // üè∑Ô∏è –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
  name: {
    ru: { type: String, required: true },
    uz: { type: String, required: true },
    en: { type: String, required: true }
  },

  description: {
    ru: String,
    uz: String,
    en: String
  },

  // üîë –ö–û–î –ü–†–û–ú–û–ê–ö–¶–ò–ò
  code: {
    type: String,
    required: true,
    unique: true,
    uppercase: true,
    trim: true,
    minlength: 3,
    maxlength: 20
  },

  // üéØ –¢–ò–ü –ü–†–û–ú–û–ê–ö–¶–ò–ò
  type: {
    type: String,
    required: true,
    enum: [
      'percentage',      // –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å–∫–∏–¥–∫–∞
      'fixed_amount',    // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ —Å–∫–∏–¥–∫–∏
      'free_shipping',   // –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞
      'buy_x_get_y',     // –ö—É–ø–∏ X –ø–æ–ª—É—á–∏ Y
      'cashback',        // –ö–µ—à–±—ç–∫
      'loyalty_points'   // –ë–∞–ª–ª—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
    ]
  },

  // üí∞ –ü–ê–†–ê–ú–ï–¢–†–´ –°–ö–ò–î–ö–ò
  discount: {
    value: { 
    type: Number,
      required: true,
      min: 0
    },
    
    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –∞–∫—Ü–∏–π
    maxAmount: {
      type: Number,
      min: 0
    },
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
    minOrderAmount: {
      type: Number,
      default: 0,
      min: 0
    }
  },

  // üõçÔ∏è –£–°–õ–û–í–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø
  conditions: {
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
    minQuantity: {
      type: Number,
      default: 1,
      min: 1
    },

    // –ü—Ä–∏–º–µ–Ω–∏–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories: [{
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Category'
    }],

    // –ü—Ä–∏–º–µ–Ω–∏–º—ã–µ —Ç–æ–≤–∞—Ä—ã
    products: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Product'
  }],

    // –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    excludeCategories: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Category'
  }],

    // –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    excludeProducts: [{
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Product'
    }],

    // –¢–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    newCustomersOnly: {
      type: Boolean,
      default: false
    },

    // –¢–æ–ª—å–∫–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    targetUsers: [{
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User'
    }],

    // –£—Ä–æ–≤–Ω–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
    loyaltyLevels: [{
      type: String,
      enum: ['bronze', 'silver', 'gold', 'platinum']
    }]
  },

  // üïí –í–†–ï–ú–ï–ù–ù–´–ï –†–ê–ú–ö–ò
  validFrom: {
    type: Date,
    required: true,
    default: Date.now
  },

  validUntil: {
    type: Date,
    required: true
  },

  // ‚è∞ –ê–ö–¢–ò–í–ù–´–ï –ß–ê–°–´ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  activeHours: {
    start: String, // "09:00"
    end: String,   // "18:00"
    timezone: {
      type: String,
      default: 'Asia/Tashkent'
    }
  },

  // üìÖ –ê–ö–¢–ò–í–ù–´–ï –î–ù–ò –ù–ï–î–ï–õ–ò
  activeDays: [{
    type: String,
    enum: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
  }],

  // üî¢ –õ–ò–ú–ò–¢–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
  usage: {
    // –û–±—â–∏–π –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    totalLimit: {
      type: Number,
      min: 0
    },

    // –õ–∏–º–∏—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    perUserLimit: {
    type: Number,
      default: 1,
      min: 1
  },

    // –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    currentUsage: {
    type: Number,
      default: 0,
      min: 0
    },

    // –ò—Å—Ç–æ—Ä–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    usageHistory: [{
      user: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User'
      },
      order: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Order'
      },
      usedAt: {
        type: Date,
        default: Date.now
      },
      discountAmount: Number
    }]
  },

  // üéÅ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
  settings: {
    // –ú–æ–∂–Ω–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ–º–æ
    combinable: {
      type: Boolean,
      default: false
    },

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ (–±–µ–∑ –∫–æ–¥–∞)
    autoApply: {
      type: Boolean,
      default: false
    },

    // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ –ø—É–±–ª–∏—á–Ω–æ–º —Å–ø–∏—Å–∫–µ
    public: {
      type: Boolean,
      default: true
    },

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è)
    priority: {
    type: Number,
    default: 0
    }
  },

  // üìä –°–¢–ê–¢–£–°
  status: {
    type: String,
    enum: ['draft', 'active', 'paused', 'expired', 'discontinued'],
    default: 'active'
  },

  // üë§ –°–û–ó–î–ê–¢–ï–õ–¨
  createdBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },

  updatedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },

  // üìà –ê–ù–ê–õ–ò–¢–ò–ö–ê
  analytics: {
    views: { type: Number, default: 0 },
    attempts: { type: Number, default: 0 },
    successes: { type: Number, default: 0 },
    totalSaved: { type: Number, default: 0 },
    revenue: { type: Number, default: 0 }
  }

}, {
  timestamps: true,
  toJSON: { virtuals: true },
  toObject: { virtuals: true }
});

// üîç –í–ò–†–¢–£–ê–õ–¨–ù–´–ï –ü–û–õ–Ø
promotionSchema.virtual('isActive').get(function() {
  const now = new Date();
  return this.status === 'active' &&
         now >= this.validFrom && 
         now <= this.validUntil &&
         (!this.usage.totalLimit || this.usage.currentUsage < this.usage.totalLimit);
});

promotionSchema.virtual('isExpired').get(function() {
  return new Date() > this.validUntil;
});

promotionSchema.virtual('usagePercentage').get(function() {
  if (!this.usage.totalLimit) return 0;
  return Math.round((this.usage.currentUsage / this.usage.totalLimit) * 100);
});

promotionSchema.virtual('conversionRate').get(function() {
  if (this.analytics.attempts === 0) return 0;
  return Math.round((this.analytics.successes / this.analytics.attempts) * 100);
});

// üìä –ò–ù–î–ï–ö–°–´
promotionSchema.index({ code: 1 }, { unique: true });
promotionSchema.index({ status: 1, validFrom: 1, validUntil: 1 });
promotionSchema.index({ type: 1, status: 1 });
promotionSchema.index({ validUntil: 1 });
promotionSchema.index({ 'conditions.categories': 1 });
promotionSchema.index({ 'conditions.products': 1 });

// üîß MIDDLEWARE
promotionSchema.pre('save', function(next) {
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
  const now = new Date();

  if (now > this.validUntil && this.status === 'active') {
    this.status = 'expired';
  }
  
  if (this.usage.totalLimit && this.usage.currentUsage >= this.usage.totalLimit) {
    this.status = 'expired';
  }

  next();
});

// üìà –ú–ï–¢–û–î–´
promotionSchema.methods.canUse = function(user, orderData) {
  const now = new Date();
  
  // –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  if (!this.isActive) return { valid: false, reason: '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' };
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
  if (now < this.validFrom || now > this.validUntil) {
    return { valid: false, reason: '–ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—Ç–µ–∫ –∏–ª–∏ –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω' };
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
  if (this.usage.totalLimit && this.usage.currentUsage >= this.usage.totalLimit) {
    return { valid: false, reason: '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞' };
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (user) {
    const userUsage = this.usage.usageHistory.filter(h => 
      h.user && h.user.toString() === user._id.toString()
    ).length;
    
    if (userUsage >= this.usage.perUserLimit) {
      return { valid: false, reason: '–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑' };
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if (this.conditions.newCustomersOnly && user) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    // –≠—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –º–æ–¥–µ–ª–∏ Order
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞
  if (orderData && this.discount.minOrderAmount > 0) {
    if (orderData.subtotal < this.discount.minOrderAmount) {
      return { 
        valid: false, 
        reason: `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${this.discount.minOrderAmount} —Å—É–º` 
      };
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã)
  if (orderData && orderData.items) {
    const hasValidItems = this.checkItemsEligibility(orderData.items);
    if (!hasValidItems.valid) {
      return hasValidItems;
    }
  }
  
  return { valid: true };
};

promotionSchema.methods.checkItemsEligibility = function(items) {
  // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/—Ç–æ–≤–∞—Ä—ã, —Ç–æ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—Ç
  if (this.conditions.categories.length === 0 && this.conditions.products.length === 0) {
    return { valid: true };
  }
  
  let validItems = 0;
  
  for (const item of items) {
    let itemValid = false;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    if (this.conditions.products.length > 0) {
      if (this.conditions.products.includes(item.productId || item.product)) {
        itemValid = true;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (this.conditions.categories.length > 0 && item.categoryId) {
      if (this.conditions.categories.includes(item.categoryId)) {
        itemValid = true;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    if (this.conditions.excludeProducts.includes(item.productId || item.product)) {
      itemValid = false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (item.categoryId && this.conditions.excludeCategories.includes(item.categoryId)) {
      itemValid = false;
    }
    
    if (itemValid) validItems++;
  }
  
  if (validItems === 0) {
    return { valid: false, reason: '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º –∫ —Ç–æ–≤–∞—Ä–∞–º –≤ –∫–æ—Ä–∑–∏–Ω–µ' };
  }
  
  if (validItems < this.conditions.minQuantity) {
    return { 
      valid: false, 
      reason: `–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º ${this.conditions.minQuantity} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤` 
    };
  }
  
  return { valid: true, validItems };
};

promotionSchema.methods.calculateDiscount = function(orderData) {
  let discountAmount = 0;
  
  switch (this.type) {
    case 'percentage':
      discountAmount = (orderData.subtotal * this.discount.value) / 100;
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
      if (this.discount.maxAmount && discountAmount > this.discount.maxAmount) {
        discountAmount = this.discount.maxAmount;
      }
      break;
      
    case 'fixed_amount':
      discountAmount = Math.min(this.discount.value, orderData.subtotal);
      break;
      
    case 'free_shipping':
      discountAmount = orderData.shippingCost || 0;
      break;
      
    case 'cashback':
      // –ö–µ—à–±—ç–∫ –Ω–µ —É–º–µ–Ω—å—à–∞–µ—Ç —Å—É–º–º—É –∑–∞–∫–∞–∑–∞, –∞ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –Ω–∞ —Å—á–µ—Ç
      discountAmount = (orderData.subtotal * this.discount.value) / 100;
      break;
      
    default:
      discountAmount = 0;
  }
  
  return Math.max(0, Math.round(discountAmount));
};

promotionSchema.methods.use = function(user, order, discountAmount) {
  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
  this.usage.currentUsage += 1;
  this.analytics.successes += 1;
  this.analytics.totalSaved += discountAmount;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
  this.usage.usageHistory.push({
    user: user._id,
    order: order._id,
    usedAt: new Date(),
    discountAmount
  });
  
  return this.save();
};

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
promotionSchema.statics.findActivePromotions = function() {
  const now = new Date();
  return this.find({
    status: 'active',
    validFrom: { $lte: now },
    validUntil: { $gte: now },
    $or: [
      { 'usage.totalLimit': { $exists: false } },
      { $expr: { $lt: ['$usage.currentUsage', '$usage.totalLimit'] } }
    ]
  });
};

promotionSchema.statics.findByCode = function(code) {
  return this.findOne({ 
    code: code.toUpperCase(),
    status: 'active'
  });
};

module.exports = mongoose.model('Promotion', promotionSchema);