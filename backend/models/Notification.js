const mongoose = require('mongoose');

/**
 * üîî –ú–û–î–ï–õ–¨ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
 * –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ (–ø—Ä–æ–¥–∞–≤—Ü—ã, –∞–¥–º–∏–Ω—ã, –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏)
 */

const notificationSchema = new mongoose.Schema({
  // üë§ –ü–û–õ–£–ß–ê–¢–ï–õ–¨
  recipient: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },

  // üè∑Ô∏è –¢–ò–ü –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
  type: {
    type: String,
    required: true,
    enum: [
      // –ó–∞–∫–∞–∑—ã
      'order_created',           // –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω
      'order_confirmed',         // –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
      'order_shipped',           // –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
      'order_delivered',         // –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω
      'order_cancelled',         // –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω
      
      // –ü–ª–∞—Ç–µ–∂–∏
      'payment_received',        // –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω
      'payment_failed',          // –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª
      'payment_refunded',        // –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤
      
      // –ü—Ä–æ–¥–∞–≤—Ü—ã
      'seller_order_received',   // –ü—Ä–æ–¥–∞–≤—Ü—É: –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
      'seller_payment_received', // –ü—Ä–æ–¥–∞–≤—Ü—É: –ø–æ–ª—É—á–µ–Ω –ø–ª–∞—Ç–µ–∂
      'seller_product_low_stock', // –ü—Ä–æ–¥–∞–≤—Ü—É: –Ω–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫
      
      // –ê–¥–º–∏–Ω—ã
      'admin_new_seller',        // –ê–¥–º–∏–Ω—É: –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
      'admin_order_issue',       // –ê–¥–º–∏–Ω—É: –ø—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–∫–∞–∑–æ–º
      'admin_payment_issue',     // –ê–¥–º–∏–Ω—É: –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–ª–∞—Ç–µ–∂–æ–º
      'admin_system_alert',      // –ê–¥–º–∏–Ω—É: —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      
      // –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏
      'customer_order_update',   // –ü–æ–∫—É–ø–∞—Ç–µ–ª—é: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
      'customer_payment_success', // –ü–æ–∫—É–ø–∞—Ç–µ–ª—é: —É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
      'customer_delivery_update', // –ü–æ–∫—É–ø–∞—Ç–µ–ª—é: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏
      'customer_support_reply'   // –ü–æ–∫—É–ø–∞—Ç–µ–ª—é: –æ—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    ]
  },

  // üìã –ó–ê–ì–û–õ–û–í–û–ö
  title: {
    ru: { type: String, required: true },
    uz: { type: String, required: true },
    en: { type: String, required: true }
  },

  // üìù –°–û–î–ï–†–ñ–ê–ù–ò–ï
  message: {
    ru: { type: String, required: true },
    uz: { type: String, required: true },
    en: { type: String, required: true }
  },

  // üîó –°–í–Ø–ó–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï
  relatedData: {
    order: { type: mongoose.Schema.Types.ObjectId, ref: 'Order' },
    payment: { type: mongoose.Schema.Types.ObjectId, ref: 'Payment' },
    product: { type: mongoose.Schema.Types.ObjectId, ref: 'Product' },
    user: { type: mongoose.Schema.Types.ObjectId, ref: 'User' }
  },

  // üéØ –ü–†–ò–û–†–ò–¢–ï–¢
  priority: {
    type: String,
    enum: ['low', 'normal', 'high', 'urgent'],
    default: 'normal'
  },

  // üì± –ö–ê–ù–ê–õ–´ –î–û–°–¢–ê–í–ö–ò
  channels: [{
    type: String,
    enum: ['in_app', 'email', 'sms', 'telegram', 'push'],
    default: ['in_app']
  }],

  // üìä –°–¢–ê–¢–£–°
  status: {
    type: String,
    enum: ['pending', 'sent', 'delivered', 'read', 'failed'],
    default: 'pending'
  },

  // üìÖ –í–†–ï–ú–ï–ù–ù–´–ï –ú–ï–¢–ö–ò
  scheduledAt: Date,        // –ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
  sentAt: Date,             // –ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
  deliveredAt: Date,        // –ö–æ–≥–¥–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
  readAt: Date,             // –ö–æ–≥–¥–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ

  // üîÑ –ü–û–ü–´–¢–ö–ò –û–¢–ü–†–ê–í–ö–ò
  deliveryAttempts: [{
    attempt: { type: Number, default: 1 },
    timestamp: { type: Date, default: Date.now },
    channel: String,
    success: Boolean,
    error: String
  }],

  // üé® –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï
  metadata: {
    icon: String,           // –ò–∫–æ–Ω–∫–∞ –¥–ª—è UI
    color: String,          // –¶–≤–µ—Ç –¥–ª—è UI
    actionUrl: String,      // URL –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
    actionText: String      // –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è
  },

  // üîí –ù–ê–°–¢–†–û–ô–ö–ò
  isRead: { type: Boolean, default: false },
  isArchived: { type: Boolean, default: false },
  expiresAt: Date,          // –ö–æ–≥–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤–∞–µ—Ç

  // üìä –ê–ù–ê–õ–ò–¢–ò–ö–ê
  analytics: {
    openRate: { type: Number, default: 0 },
    clickRate: { type: Number, default: 0 },
    conversionRate: { type: Number, default: 0 }
  }

}, {
  timestamps: true,
  toJSON: { virtuals: true },
  toObject: { virtuals: true }
});

// üîç –í–ò–†–¢–£–ê–õ–¨–ù–´–ï –ü–û–õ–Ø
notificationSchema.virtual('isExpired').get(function() {
  return this.expiresAt && new Date() > this.expiresAt;
});

notificationSchema.virtual('isScheduled').get(function() {
  return this.scheduledAt && new Date() < this.scheduledAt;
});

notificationSchema.virtual('canSend').get(function() {
  return this.status === 'pending' && !this.isExpired && !this.isScheduled;
});

// üìä –ò–ù–î–ï–ö–°–´
notificationSchema.index({ recipient: 1, createdAt: -1 });
notificationSchema.index({ type: 1, status: 1 });
notificationSchema.index({ status: 1, scheduledAt: 1 });
notificationSchema.index({ 'relatedData.order': 1 });
notificationSchema.index({ 'relatedData.payment': 1 });
notificationSchema.index({ expiresAt: 1 }, { expireAfterSeconds: 0 });

// üîß MIDDLEWARE
notificationSchema.pre('save', function(next) {
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  if (!this.expiresAt && this.createdAt) {
    this.expiresAt = new Date(this.createdAt.getTime() + (30 * 24 * 60 * 60 * 1000)); // 30 –¥–Ω–µ–π
  }
  
  next();
});

// üìà –ú–ï–¢–û–î–´
notificationSchema.methods.markAsSent = function(channel) {
  this.status = 'sent';
  this.sentAt = new Date();
  
  this.deliveryAttempts.push({
    attempt: this.deliveryAttempts.length + 1,
    timestamp: new Date(),
    channel: channel,
    success: true
  });
  
  return this.save();
};

notificationSchema.methods.markAsDelivered = function() {
  this.status = 'delivered';
  this.deliveredAt = new Date();
  return this.save();
};

notificationSchema.methods.markAsRead = function() {
  this.status = 'read';
  this.isRead = true;
  this.readAt = new Date();
  return this.save();
};

notificationSchema.methods.markAsFailed = function(channel, error) {
  this.deliveryAttempts.push({
    attempt: this.deliveryAttempts.length + 1,
    timestamp: new Date(),
    channel: channel,
    success: false,
    error: error
  });
  
  // –ï—Å–ª–∏ –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ failed
  if (this.deliveryAttempts.filter(attempt => !attempt.success).length >= 3) {
    this.status = 'failed';
  }
  
  return this.save();
};

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
notificationSchema.statics.createOrderNotification = async function(orderData, type) {
  const notifications = [];
  
  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
  const customerNotification = {
    recipient: orderData.customer,
    type: `customer_${type}`,
    title: this.getNotificationTitle(type, 'customer'),
    message: this.getNotificationMessage(type, 'customer', orderData),
    relatedData: { order: orderData._id },
    priority: this.getNotificationPriority(type),
    channels: ['in_app', 'email']
  };
  
  notifications.push(customerNotification);
  
  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
  if (orderData.seller) {
    const sellerNotification = {
      recipient: orderData.seller,
      type: `seller_${type}`,
      title: this.getNotificationTitle(type, 'seller'),
      message: this.getNotificationMessage(type, 'seller', orderData),
      relatedData: { order: orderData._id },
      priority: this.getNotificationPriority(type),
      channels: ['in_app', 'email', 'telegram']
    };
    
    notifications.push(sellerNotification);
  }
  
  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
  const adminNotification = {
    recipient: null, // –ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    type: `admin_${type}`,
    title: this.getNotificationTitle(type, 'admin'),
    message: this.getNotificationMessage(type, 'admin', orderData),
    relatedData: { order: orderData._id },
    priority: this.getNotificationPriority(type),
    channels: ['in_app', 'email']
  };
  
  notifications.push(adminNotification);
  
  // –°–æ–∑–¥–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  return await this.insertMany(notifications);
};

notificationSchema.statics.getNotificationTitle = function(type, recipient) {
  const titles = {
    order_created: {
      customer: { ru: '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω', uz: 'Buyurtma yaratildi', en: 'Order created' },
      seller: { ru: '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑', uz: 'Yangi buyurtma', en: 'New order' },
      admin: { ru: '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ —Å–∏—Å—Ç–µ–º–µ', uz: 'Tizimda yangi buyurtma', en: 'New order in system' }
    },
    payment_received: {
      customer: { ru: '–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞', uz: 'To\'lov qabul qilindi', en: 'Payment received' },
      seller: { ru: '–ü–æ–ª—É—á–µ–Ω –ø–ª–∞—Ç–µ–∂', uz: 'To\'lov qabul qilindi', en: 'Payment received' },
      admin: { ru: '–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω', uz: 'To\'lov qayta ishlangan', en: 'Payment processed' }
    },
    customer_support_reply: {
      customer: { ru: '–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏', uz: 'Qo\'llab-quvvatlash javobi', en: 'Support reply' }
    }
  };
  
  return titles[type]?.[recipient] || { ru: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', uz: 'Xabar', en: 'Notification' };
};

notificationSchema.statics.getNotificationMessage = function(type, recipient, data) {
  const messages = {
    order_created: {
      customer: {
        ru: `–í–∞—à –∑–∞–∫–∞–∑ #${data.orderNumber} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.`,
        uz: `Sizning #${data.orderNumber} buyurtmangiz muvaffaqiyatli yaratildi. Tasdiqlanishini kuting.`,
        en: `Your order #${data.orderNumber} has been created successfully. Wait for confirmation.`
      },
      seller: {
        ru: `–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ #${data.orderNumber} –Ω–∞ —Å—É–º–º—É ${data.pricing.total} —Å—É–º.`,
        uz: `${data.pricing.total} so'm miqdorida #${data.orderNumber} raqamli yangi buyurtma qabul qilindi.`,
        en: `New order #${data.orderNumber} received for ${data.pricing.total} UZS.`
      },
      admin: {
        ru: `–í —Å–∏—Å—Ç–µ–º–µ —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ #${data.orderNumber} –æ—Ç ${data.customerInfo.firstName} ${data.customerInfo.lastName}.`,
        uz: `Tizimda ${data.customerInfo.firstName} ${data.customerInfo.lastName} tomonidan #${data.orderNumber} raqamli yangi buyurtma yaratildi.`,
        en: `New order #${data.orderNumber} created in system by ${data.customerInfo.firstName} ${data.customerInfo.lastName}.`
      }
    },
    customer_support_reply: {
      customer: {
        ru: `–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "${data.subject}". –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ —Å–æ–æ–±—â–µ–Ω–∏–π.`,
        uz: `Sizning "${data.subject}" mavzudagi xabaringizga javob keldi. Xabarlar bo'limida tekshiring.`,
        en: `Reply received for your message "${data.subject}". Check in messages section.`
      }
    }
  };
  
  return messages[type]?.[recipient] || { 
    ru: '–£ –≤–∞—Å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', 
    uz: 'Sizda yangi xabar bor', 
    en: 'You have a new notification' 
  };
};

notificationSchema.statics.getNotificationPriority = function(type) {
  const priorities = {
    order_created: 'normal',
    payment_received: 'high',
    order_cancelled: 'high',
    payment_failed: 'urgent',
    admin_system_alert: 'urgent'
  };
  
  return priorities[type] || 'normal';
};

module.exports = mongoose.model('Notification', notificationSchema);

