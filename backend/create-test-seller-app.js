const mongoose = require('mongoose');

// –ü—Ä–æ—Å—Ç–∞—è —Å—Ö–µ–º–∞ –∑–∞—è–≤–∫–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
const sellerApplicationSchema = new mongoose.Schema({
  businessName: String,
  contactName: String,
  email: String,
  phone: String,
  businessType: String,
  address: String,
  status: { type: String, default: 'pending' },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
});

const SellerApplication = mongoose.model('SellerApplication', sellerApplicationSchema);

async function createTestSellerApp() {
  try {
    console.log('üîÑ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ MongoDB...');
    await mongoose.connect('mongodb://localhost:27017/chexoluz');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞—è–≤–∫—É
    const existing = await SellerApplication.findOne({ email: 'seller@test.com' });
    if (existing) {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.log('üìã ID:', existing._id);
      console.log('üè¢ –ö–æ–º–ø–∞–Ω–∏—è:', existing.businessName);
      console.log('üìß Email:', existing.email);
      console.log('üìä –°—Ç–∞—Ç—É—Å:', existing.status);
      await mongoose.disconnect();
      return existing;
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É
    console.log('üìù –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –ø—Ä–æ–¥–∞–≤—Ü–∞...');
    const application = new SellerApplication({
      businessName: 'Test Electronics Store',
      contactName: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
      email: 'seller@test.com',
      phone: '+998901234567',
      businessType: 'individual',
      address: '–¢–∞—à–∫–µ–Ω—Ç, —É–ª. –ê–º–∏—Ä–∞ –¢–µ–º—É—Ä–∞, 15',
      status: 'pending'
    });

    await application.save();
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞');
    console.log('üìã ID:', application._id);
    console.log('üè¢ –ö–æ–º–ø–∞–Ω–∏—è:', application.businessName);
    console.log('üìß Email:', application.email);
    console.log('üìä –°—Ç–∞—Ç—É—Å:', application.status);

    await mongoose.disconnect();
    console.log('‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MongoDB');

    return application;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    await mongoose.disconnect();
  }
}

createTestSellerApp();