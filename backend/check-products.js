const { connectDB } = require('./config/database');
const Product = require('./models/Product');
const Category = require('./models/Category');
const User = require('./models/User');

const checkProducts = async () => {
  try {
    console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await connectDB();

    console.log('üîç –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã...');
    const products = await Product.find({})
      .populate('category', 'name')
      .populate('createdBy', 'email firstName lastName')
      .sort({ createdAt: -1 })
      .limit(10);

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);

    if (products.length === 0) {
      console.log('‚ö†Ô∏è  –¢–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ –Ω–µ—Ç');

      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      console.log('üîß –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä...');

      const testProduct = new Product({
        name: {
          ru: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä',
          uz: 'Test mahsulot',
          en: 'Test Product'
        },
        description: {
          ru: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
          uz: 'Bu test mahsulot tekshirish uchun',
          en: 'This is a test product for checking'
        },
        price: 100000,
        originalPrice: 120000,
        category: null, // –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞
        images: [
          { url: 'https://via.placeholder.com/400x400?text=Test+Product', isPrimary: true }
        ],
        brand: 'Test Brand',
        model: 'Test Model',
        material: 'plastic',
        specifications: [
          {
            name: { ru: '–¢–∏–ø', uz: 'Turi', en: 'Type' },
            value: { ru: '–¢–µ—Å—Ç', uz: 'Test', en: 'Test' },
            order: 1
          }
        ],
        stock: 10,
        isActive: true,
        isFeatured: true, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–ª–∞–µ–º featured –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π
        createdBy: null
      });

      await testProduct.save();
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω!');
      console.log(`   ID: ${testProduct._id}`);
      console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${testProduct.name.ru}`);
      console.log(`   –¶–µ–Ω–∞: ${testProduct.price}`);
      console.log(`   –ê–∫—Ç–∏–≤–µ–Ω: ${testProduct.isActive}`);

      return;
    }

    console.log('\nüìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:');
    products.forEach((product, index) => {
      console.log(`\n${index + 1}. ${product.name?.ru || product.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`);
      console.log(`   ID: ${product._id}`);
      console.log(`   –¶–µ–Ω–∞: ${product.price} —Å—É–º`);
      console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.category?.name?.ru || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}`);
      console.log(`   –ê–∫—Ç–∏–≤–µ–Ω: ${product.isActive}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${product.createdAt}`);
      console.log(`   –ê–≤—Ç–æ—Ä: ${product.createdBy?.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
    });

    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
};

checkProducts();
