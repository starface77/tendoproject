const mongoose = require('mongoose');
const Category = require('./models/Category');

// –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ getCategories
async function debugController() {
  try {
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ getCategories...\n');

    await mongoose.connect('mongodb://localhost:27017/tendo');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const allCategories = await Category.find({});
    console.log(`üìä –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –ë–î: ${allCategories.length}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const activeCategories = await Category.find({ isActive: true });
    console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${activeCategories.length}`);

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
    const query = { isActive: true };
    console.log('üîç –ó–∞–ø—Ä–æ—Å:', JSON.stringify(query, null, 2));

    const categories = await Category.find(query)
      .populate('parent', 'name slug')
      .sort({ sortOrder: 1, 'name.ru': 1 }) // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: sortOrder –≤–º–µ—Å—Ç–æ order
      .select('-createdBy -updatedBy -__v');

    console.log(`üåê –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞: ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);

    console.log('\nüìã –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:');
    categories.forEach((cat, i) => {
      console.log(`${i+1}. ${cat.name?.ru || cat.name} (ID: ${cat._id}, sortOrder: ${cat.sortOrder})`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ sortOrder
    console.log('\nüîé –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ sortOrder:');
    for (const cat of categories) {
      console.log(`${cat.name?.ru}: sortOrder = ${cat.sortOrder}`);
    }

    await mongoose.disconnect();
    console.log('\n‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.error(error.stack);
  }
}

debugController();




