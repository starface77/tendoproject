const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

async function createAdminDirect() {
  try {
    console.log('üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB...');

    // –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –æ–ø—Ü–∏–π
    await mongoose.connect('mongodb://localhost:27017/tendomarketuz');

    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ö–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é
    const userSchema = new mongoose.Schema({
      email: { type: String, required: true, unique: true },
      password: { type: String, required: true },
      firstName: { type: String, default: 'Admin' },
      lastName: { type: String, default: 'User' },
      phone: { type: String, default: '+998901234567' },
      role: { type: String, default: 'user' },
      isActive: { type: Boolean, default: true },
      isEmailVerified: { type: Boolean, default: true },
      permissions: { type: [String], default: [] },
      createdAt: { type: Date, default: Date.now },
      updatedAt: { type: Date, default: Date.now }
    });

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
    userSchema.methods.checkPassword = async function(candidatePassword) {
      return await bcrypt.compare(candidatePassword, this.password);
    };

    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
    const User = mongoose.model('User', userSchema);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∞
    const existingAdmin = await User.findOne({ email: 'admin@market.com' });
    if (existingAdmin) {
      console.log('‚ùå –ê–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', existingAdmin.email);
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
    console.log('üîê –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–æ–ª—å...');
    const hashedPassword = await bcrypt.hash('admin123456', 12);

    console.log('üëë –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞...');
    const admin = new User({
      email: 'admin@market.com',
      password: hashedPassword,
      firstName: 'Admin',
      lastName: 'Market',
      phone: '+998901234567',
      role: 'admin',
      isActive: true,
      isEmailVerified: true,
      permissions: [
        'read:products', 'write:products', 'read:orders', 'write:orders',
        'read:users', 'write:users', 'read:analytics', 'manage:site'
      ]
    });

    await admin.save();

    console.log('‚úÖ –ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìß Email: admin@market.com');
    console.log('üîê Password: admin123456');
    console.log('üéØ –†–æ–ª—å: admin');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥...');
    const testAdmin = await User.findOne({ email: 'admin@market.com' });
    if (testAdmin) {
      const passwordValid = await testAdmin.checkPassword('admin123456');
      console.log('‚úÖ –ü–∞—Ä–æ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç:', passwordValid);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await mongoose.disconnect();
    console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MongoDB');
    process.exit(0);
  }
}

createAdminDirect();




