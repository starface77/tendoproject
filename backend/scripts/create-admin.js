#!/usr/bin/env node

/**
 * üîê CREATE ADMIN USER SCRIPT
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ Tendo Market
 */

const mongoose = require('mongoose');
const bcryptjs = require('bcryptjs');
const readline = require('readline');
require('dotenv').config();

// Import models
const User = require('../models/User');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = (prompt) => {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
};

const createAdmin = async () => {
  console.log('\nüöÄ === TENDO MARKET ADMIN CREATOR ===\n');
  
  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await mongoose.connect(process.env.MONGO_URI || 'mongodb://localhost:27017/tendomarketuz', {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ
    console.log('\nüìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:');
    
    const firstName = await question('üë§ –ò–º—è: ');
    const lastName = await question('üë§ –§–∞–º–∏–ª–∏—è: ');
    const email = await question('üìß Email: ');
    let password = await question('üîë –ü–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤): ');
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!firstName || firstName.length < 2) {
      throw new Error('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
    }
    
    if (!lastName || lastName.length < 2) {
      throw new Error('–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
    }
    
    if (!email || !email.includes('@')) {
      throw new Error('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å');
    }
    
    if (!password || password.length < 6) {
      throw new Error('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω —Å —Ç–∞–∫–∏–º email
    const existingAdmin = await User.findOne({ email });
    if (existingAdmin) {
      const overwrite = await question(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email ${email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/N): `);
      if (overwrite.toLowerCase() !== 'y') {
        console.log('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        process.exit(0);
      }
      
      // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await User.deleteOne({ email });
      console.log('üóëÔ∏è  –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω');
    }

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    console.log('\nüîí –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è...');
    const salt = await bcryptjs.genSalt(12);
    const hashedPassword = await bcryptjs.hash(password, salt);

    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    console.log('üë®‚Äçüíº –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
    const admin = new User({
      firstName,
      lastName,
      email,
      password: hashedPassword,
      role: 'super_admin',
      isEmailVerified: true,
      isActive: true,
      profile: {
        avatar: null,
        bio: '–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä Tendo Market',
        preferences: {
          language: 'ru',
          notifications: {
            email: true,
            sms: false,
            push: true
          }
        }
      },
      permissions: {
        canManageUsers: true,
        canManageProducts: true,
        canManageOrders: true,
        canManageSettings: true,
        canViewAnalytics: true,
        canManagePayments: true,
        canManageSellers: true
      }
    });

    await admin.save();

    console.log('\n‚úÖ === –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–† –°–û–ó–î–ê–ù –£–°–ü–ï–®–ù–û! ===');
    console.log(`üë§ –ò–º—è: ${firstName} ${lastName}`);
    console.log(`üìß Email: ${email}`);
    console.log(`üõ°Ô∏è  –†–æ–ª—å: –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä`);
    console.log(`üÜî ID: ${admin._id}`);
    
    console.log('\nüéØ –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log(`Email: ${email}`);
    console.log(`–ü–∞—Ä–æ–ª—å: [—Å–∫—Ä—ã—Ç]`);
    
    console.log('\nüìç –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É:');
    console.log(`üåê http://localhost:3001/login`);
    console.log(`üåê http://localhost:3001`);
    
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞');
    console.log('‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é');
    console.log('‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error.message);
    
    if (error.code === 11000) {
      console.error('üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    process.exit(1);
  } finally {
    rl.close();
    mongoose.connection.close();
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
process.on('SIGINT', () => {
  console.log('\n\n‚ö†Ô∏è  –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
  rl.close();
  mongoose.connection.close();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  createAdmin();
}

module.exports = createAdmin;