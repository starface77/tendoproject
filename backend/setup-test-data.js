const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

async function setupTestData() {
  try {
    console.log('üîÑ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ MongoDB...');
    await mongoose.connect('mongodb://localhost:27017/tendomarketuz');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');

    // –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—ã
    const userSchema = new mongoose.Schema({
      email: String,
      password: String,
      firstName: String,
      lastName: String,
      phone: String,
      role: String,
      isActive: { type: Boolean, default: true },
      isEmailVerified: { type: Boolean, default: true },
      createdAt: { type: Date, default: Date.now }
    });

    const sellerAppSchema = new mongoose.Schema({
      businessName: String,
      contactName: String,
      email: String,
      phone: String,
      businessType: String,
      address: String,
      status: { type: String, default: 'pending' },
      createdAt: { type: Date, default: Date.now }
    });

    const categorySchema = new mongoose.Schema({
      name: { ru: String, uz: String, en: String },
      slug: String,
      description: { ru: String, uz: String, en: String },
      icon: String,
      isActive: { type: Boolean, default: true },
      isVisible: { type: Boolean, default: true },
      level: { type: Number, default: 0 },
      path: String,
      createdAt: { type: Date, default: Date.now }
    });

    const productSchema = new mongoose.Schema({
      name: String,
      price: Number,
      description: String,
      brand: String,
      model: String,
      images: [String],
      isActive: { type: Boolean, default: true },
      inStock: { type: Boolean, default: true },
      stock: { type: Number, default: 1 },
      createdAt: { type: Date, default: Date.now }
    });

    const User = mongoose.model('User', userSchema);
    const SellerApplication = mongoose.model('SellerApplication', sellerAppSchema);
    const Category = mongoose.model('Category', categorySchema);
    const Product = mongoose.model('Product', productSchema);

    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
    console.log('üëë –ü—Ä–æ–≤–µ—Ä—è—é –∞–¥–º–∏–Ω–∞...');
    let admin = await User.findOne({ email: 'admin@market.com' });
    if (!admin) {
      console.log('–°–æ–∑–¥–∞—é –∞–¥–º–∏–Ω–∞...');
      const hashedPassword = await bcrypt.hash('admin123456', 12);
      admin = new User({
        email: 'admin@market.com',
        password: hashedPassword,
        firstName: 'Admin',
        lastName: 'Market',
        phone: '+998901234567',
        role: 'admin',
        isActive: true,
        isEmailVerified: true
      });
      await admin.save();
      console.log('‚úÖ –ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω');
    } else {
      console.log('‚úÖ –ê–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    console.log('üìÇ –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é...');
    let category = await Category.findOne({ slug: 'electronics' });
    if (!category) {
      console.log('–°–æ–∑–¥–∞—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é...');
      category = new Category({
        name: { ru: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', uz: 'Elektronika', en: 'Electronics' },
        slug: 'electronics',
        description: { ru: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ –≥–∞–¥–∂–µ—Ç—ã', uz: 'Elektronika va gadjetlar', en: 'Electronics and gadgets' },
        icon: 'üì±',
        path: '/electronics'
      });
      await category.save();
      console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞');
    } else {
      console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –ø—Ä–æ–¥–∞–≤—Ü–∞
    console.log('üìù –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞—è–≤–∫—É –ø—Ä–æ–¥–∞–≤—Ü–∞...');
    let application = await SellerApplication.findOne({ email: 'seller@test.com' });
    if (!application) {
      console.log('–°–æ–∑–¥–∞—é –∑–∞—è–≤–∫—É –ø—Ä–æ–¥–∞–≤—Ü–∞...');
      application = new SellerApplication({
        businessName: 'Test Electronics Store',
        contactName: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
        email: 'seller@test.com',
        phone: '+998901234567',
        businessType: 'individual',
        address: '–¢–∞—à–∫–µ–Ω—Ç, —É–ª. –ê–º–∏—Ä–∞ –¢–µ–º—É—Ä–∞, 15',
        status: 'pending'
      });
      await application.save();
      console.log('‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞');
    } else {
      console.log('‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
    console.log('üì± –ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–æ–¥—É–∫—Ç...');
    let product = await Product.findOne({ name: 'Test iPhone 15' });
    if (!product) {
      console.log('–°–æ–∑–¥–∞—é –ø—Ä–æ–¥—É–∫—Ç...');
      product = new Product({
        name: 'Test iPhone 15',
        price: 1500000,
        description: '–¢–µ—Å—Ç–æ–≤—ã–π iPhone 15 –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏',
        brand: 'Apple',
        model: 'iPhone 15',
        images: ['https://example.com/iphone15.jpg'],
        isActive: true,
        inStock: true,
        stock: 5
      });
      await product.save();
      console.log('‚úÖ –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω');
    } else {
      console.log('‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã!');
    console.log('üìß Admin: admin@market.com / admin123456');
    console.log('üìù –ó–∞—è–≤–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ ID:', application._id);
    console.log('üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è ID:', category._id);
    console.log('üì± –ü—Ä–æ–¥—É–∫—Ç ID:', product._id);

    await mongoose.disconnect();
    console.log('‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MongoDB');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    await mongoose.disconnect();
  }
}

setupTestData();




