/**
 * üöÄ CHEXOL.UZ BACKEND API
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ —á–µ—Ö–ª–æ–≤
 */

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
require('dotenv').config();

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã
const jwt = require('jsonwebtoken');

const express = require('express');
const cors = require('cors');
const morgan = require('morgan');
const helmet = require('helmet');
const compression = require('compression');
const rateLimit = require('express-rate-limit');
const path = require('path');

// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
const { connectDB } = require('./config/database');

// –ò–º–ø–æ—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤
const authRoutes = require('./routes/auth');
const productRoutes = require('./routes/products');
const categoryRoutes = require('./routes/categories');
const orderRoutes = require('./routes/orders');
const userRoutes = require('./routes/users');
const uploadRoutes = require('./routes/upload');
const cityRoutes = require('./routes/cities');
const sellerApplicationRoutes = require('./routes/sellerApplications');
const sellerRoutes = require('./routes/sellers');
const chatRoutes = require('./routes/chat');
const favoritesRoutes = require('./routes/favorites');
const reviewsRoutes = require('./routes/reviews');
const contactRoutes = require('./routes/contacts');

// –ò–º–ø–æ—Ä—Ç middleware
const errorHandler = require('./middleware/errorHandler');
const notFound = require('./middleware/notFound');

// JWT —Å–µ–∫—Ä–µ—Ç (–¥–µ–º–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
const JWT_SECRET = process.env.JWT_SECRET || 'super_secret_jwt_key_for_demo_development_only_change_in_production_2025';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
const LAUNCH_CONFIG = {
  isLaunched: process.env.IS_LAUNCHED === 'true' || false,
  launchDate: process.env.LAUNCH_DATE ? new Date(process.env.LAUNCH_DATE) : new Date('2025-09-15T00:00:00Z'), // –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞
  preLaunchEnabled: process.env.PRE_LAUNCH_ENABLED !== 'false' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–∞
};

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JWT —Ç–æ–∫–µ–Ω–∞
const generateToken = (userData) => {
  return jwt.sign(userData, JWT_SECRET, { expiresIn: '7d' });
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT
const authenticateToken = (req, res, next) => {
  try {
    let token;

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
    const authHeader = req.headers['authorization'];
    if (authHeader && authHeader.startsWith('Bearer ')) {
      token = authHeader.split(' ')[1];
    }
    // –ò–ª–∏ –∏–∑ cookies
    else if (req.cookies && req.cookies.token) {
      token = req.cookies.token;
    }

    if (!token) {
      return res.status(401).json({
        success: false,
        error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
      });
    }

    // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
    jwt.verify(token, JWT_SECRET, (err, decoded) => {
      if (err) {
        console.log('JWT Error:', err.message);

        if (err.name === 'TokenExpiredError') {
          return res.status(401).json({
            success: false,
            error: '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫',
            code: 'TOKEN_EXPIRED'
          });
        }

        if (err.name === 'JsonWebTokenError') {
          return res.status(401).json({
            success: false,
            error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω',
            code: 'INVALID_TOKEN'
          });
        }

        return res.status(401).json({
          success: false,
          error: '–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞',
          code: 'VERIFICATION_ERROR'
        });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
      if (decoded.exp && Date.now() >= decoded.exp * 1000) {
        return res.status(401).json({
          success: false,
          error: '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫',
          code: 'TOKEN_EXPIRED'
        });
      }

      req.user = decoded;
      next();
    });

  } catch (error) {
    console.error('Auth middleware error:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
    });
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();

// üîê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨
app.use(helmet({
  contentSecurityPolicy: false, // –û—Ç–∫–ª—é—á–∞–µ–º CSP –¥–ª—è –≥–∏–±–∫–æ—Å—Ç–∏
  crossOriginEmbedderPolicy: false
}));

// üìä –°–ñ–ê–¢–ò–ï –û–¢–í–ï–¢–û–í
app.use(compression());

// üåê CORS –ù–ê–°–¢–†–û–ô–ö–ò (–î–õ–Ø –ú–û–ë–ò–õ–¨–ù–û–ì–û –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø)
const corsOptions = {
  origin: [
    process.env.FRONTEND_URL || 'http://localhost:3000',
    process.env.ADMIN_FRONTEND_URL || 'http://localhost:3001',
    'http://localhost:3000',
    'http://localhost:3001',
    'http://localhost:5173', // Vite dev server
    'http://26.160.28.208:3000', // Admin dashboard IP
    'http://26.160.28.208:3001', // Frontend IP
    'http://26.160.28.208:5173', // Vite dev server IP
    // –ú–æ–±–∏–ª—å–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã
    'http://10.0.2.2:5000',
    'http://127.0.0.1:5000',
    'http://localhost:5000',
    // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    /^https?:\/\/.*$/
  ],
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'Accept', 'Origin', 'X-Requested-With'],
  credentials: true,
  optionsSuccessStatus: 200
};
app.use(cors(corsOptions));

// üö¶ –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï –ó–ê–ü–†–û–°–û–í (–ë–û–õ–ï–ï –ú–Ø–ì–ö–ò–ï –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ò)
const limiter = rateLimit({
  windowMs: 1 * 60 * 1000, // 1 –º–∏–Ω—É—Ç–∞ –≤–º–µ—Å—Ç–æ 15
  max: 1000, // 1000 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–º–µ—Å—Ç–æ 100
  message: {
    error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
    message: 'Too many requests, please try again later'
  },
  standardHeaders: true,
  legacyHeaders: false
});

// üîê –ë–û–õ–ï–ï –ú–Ø–ì–ö–ò–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –î–õ–Ø –ê–î–ú–ò–ù –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò
const adminAuthLimiter = rateLimit({
  windowMs: 1 * 60 * 1000, // 1 –º–∏–Ω—É—Ç–∞
  max: 100, // 100 –ø–æ–ø—ã—Ç–æ–∫ –∑–∞ –º–∏–Ω—É—Ç—É
  message: {
    error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
    message: 'Too many login attempts, please try again later'
  },
  standardHeaders: true,
  legacyHeaders: false
});

// –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –∞–¥–º–∏–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
app.use('/api/v1/auth/admin', adminAuthLimiter);

// –û–±—ã—á–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö API
app.use('/api/', limiter);

// üìù –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
if (process.env.NODE_ENV === 'development') {
  app.use(morgan('dev'));
} else {
  app.use(morgan('combined'));
}

// üîÑ –ü–ê–†–°–ò–ù–ì –î–ê–ù–ù–´–•
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// üìç API –ú–ê–†–®–†–£–¢–´
const apiVersion = process.env.API_VERSION || 'v1';

// üöÄ MIDDLEWARE –î–õ–Ø PRE-LAUNCH –°–¢–†–ê–ù–ò–¶–´
const preLaunchMiddleware = (req, res, next) => {
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º API –∑–∞–ø—Ä–æ—Å—ã
  if (req.path.startsWith(`/api/${apiVersion}`)) {
    return next();
  }

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
  if (req.path.startsWith('/uploads') || req.path.startsWith('/public')) {
    return next();
  }

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º health check
  if (req.path === '/health' || req.path === `/api/${apiVersion}/health`) {
    return next();
  }

  // –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ pre-launch –æ—Ç–∫–ª—é—á–µ–Ω
  if (LAUNCH_CONFIG.isLaunched || !LAUNCH_CONFIG.preLaunchEnabled) {
    return next();
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
  const now = new Date();
  if (now >= LAUNCH_CONFIG.launchDate) {
    console.log('üöÄ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞—Å—Ç—É–ø–∏–ª–æ! –ü—Ä–æ–µ–∫—Ç –∑–∞–ø—É—â–µ–Ω.');
    LAUNCH_CONFIG.isLaunched = true;
    return next();
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º pre-launch —Å—Ç—Ä–∞–Ω–∏—Ü—É
  const timeLeft = LAUNCH_CONFIG.launchDate - now;
  const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
  const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
  const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);

  res.send(`
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üöÄ Tendo Market - –°–∫–æ—Ä–æ –∑–∞–ø—É—Å–∫!</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
        }

        .container {
            text-align: center;
            max-width: 600px;
            padding: 2rem;
            animation: fadeInUp 1s ease-out;
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .logo {
            font-size: 4rem;
            margin-bottom: 1rem;
            animation: bounce 2s infinite;
        }

        @keyframes bounce {
            0%, 20%, 50%, 80%, 100% {
                transform: translateY(0);
            }
            40% {
                transform: translateY(-10px);
            }
            60% {
                transform: translateY(-5px);
            }
        }

        h1 {
            font-size: 2.5rem;
            margin-bottom: 2rem;
            font-weight: 300;
            letter-spacing: 1px;
        }

        .timer {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin: 3rem 0;
            flex-wrap: wrap;
        }

        .time-block {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 1.5rem;
            min-width: 100px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: transform 0.3s ease;
        }

        .time-block:hover {
            transform: scale(1.05);
        }

        .time-value {
            font-size: 2.5rem;
            font-weight: bold;
            display: block;
            margin-bottom: 0.5rem;
        }

        .time-label {
            font-size: 0.9rem;
            opacity: 0.8;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .message {
            font-size: 1.2rem;
            margin: 2rem 0;
            opacity: 0.9;
            line-height: 1.6;
        }

        .progress-bar {
            width: 100%;
            height: 4px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 2px;
            margin: 2rem 0;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #ff6b6b, #4ecdc4);
            border-radius: 2px;
            animation: progress 2s ease-in-out infinite;
        }

        @keyframes progress {
            0% { width: 0%; }
            50% { width: 70%; }
            100% { width: 100%; }
        }

        .social-links {
            margin-top: 3rem;
        }

        .social-links a {
            color: white;
            text-decoration: none;
            margin: 0 1rem;
            font-size: 1.5rem;
            transition: opacity 0.3s ease;
        }

        .social-links a:hover {
            opacity: 0.7;
        }

        @media (max-width: 768px) {
            .container {
                padding: 1rem;
            }

            h1 {
                font-size: 2rem;
            }

            .timer {
                gap: 0.5rem;
            }

            .time-block {
                min-width: 80px;
                padding: 1rem;
            }

            .time-value {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="logo">üöÄ</div>
        <h1>–ó–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑:</h1>

        <div class="timer">
            <div class="time-block">
                <span class="time-value" id="days">${days}</span>
                <span class="time-label">–¥–Ω–µ–π</span>
            </div>
            <div class="time-block">
                <span class="time-value" id="hours">${hours}</span>
                <span class="time-label">—á–∞—Å–æ–≤</span>
            </div>
            <div class="time-block">
                <span class="time-value" id="minutes">${minutes}</span>
                <span class="time-label">–º–∏–Ω—É—Ç</span>
            </div>
            <div class="time-block">
                <span class="time-value" id="seconds">${seconds}</span>
                <span class="time-label">—Å–µ–∫—É–Ω–¥</span>
            </div>
        </div>

        <div class="progress-bar">
            <div class="progress-fill"></div>
        </div>

        <div class="message">
            <p>–ú—ã –≥–æ—Ç–æ–≤–∏–º —á—Ç–æ-—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–µ –¥–ª—è –≤–∞—Å!</p>
            <p>–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∏ –±—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º–∏, –∫—Ç–æ —É–∑–Ω–∞–µ—Ç –æ –∑–∞–ø—É—Å–∫–µ.</p>
        </div>

        <div class="social-links">
            <a href="#" title="Telegram">üì±</a>
            <a href="#" title="Instagram">üì∏</a>
            <a href="#" title="Facebook">üìò</a>
        </div>
    </div>

    <script>
        function updateTimer() {
            const now = new Date().getTime();
            const launchDate = new Date('${LAUNCH_CONFIG.launchDate.toISOString()}').getTime();
            const timeLeft = launchDate - now;

            if (timeLeft <= 0) {
                // –í—Ä–µ–º—è –≤—ã—à–ª–æ - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                window.location.reload();
                return;
            }

            const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
            const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);

            document.getElementById('days').textContent = days;
            document.getElementById('hours').textContent = hours;
            document.getElementById('minutes').textContent = minutes;
            document.getElementById('seconds').textContent = seconds;
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        setInterval(updateTimer, 1000);

        // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        let progress = 0;
        setInterval(() => {
            progress = (progress + 1) % 100;
            document.querySelector('.progress-fill').style.width = progress + '%';
        }, 50);
    </script>
</body>
</html>
  `);
};

// –ü—Ä–∏–º–µ–Ω—è–µ–º pre-launch middleware –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(preLaunchMiddleware);

// üè• HEALTH CHECK ENDPOINT
app.get(`/api/${apiVersion}/health`, (req, res) => {
  res.status(200).json({
    status: 'OK',
    message: 'Tendo Market API —Ä–∞–±–æ—Ç–∞–µ—Ç',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    environment: process.env.NODE_ENV || 'development'
  });
});

// üöÄ MIDDLEWARE –î–õ–Ø PRE-LAUNCH –°–¢–†–ê–ù–ò–¶–´
const preLaunchMiddleware = (req, res, next) => {
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º API –∑–∞–ø—Ä–æ—Å—ã
  if (req.path.startsWith(`/api/${apiVersion}`)) {
    return next();
  }

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
  if (req.path.startsWith('/uploads') || req.path.startsWith('/public')) {
    return next();
  }

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º health check
  if (req.path === '/health' || req.path === `/api/${apiVersion}/health`) {
    return next();
  }

  // –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ pre-launch –æ—Ç–∫–ª—é—á–µ–Ω
  if (LAUNCH_CONFIG.isLaunched || !LAUNCH_CONFIG.preLaunchEnabled) {
    return next();
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
  const now = new Date();
  if (now >= LAUNCH_CONFIG.launchDate) {
    console.log('üöÄ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞—Å—Ç—É–ø–∏–ª–æ! –ü—Ä–æ–µ–∫—Ç –∑–∞–ø—É—â–µ–Ω.');
    LAUNCH_CONFIG.isLaunched = true;
    return next();
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º pre-launch —Å—Ç—Ä–∞–Ω–∏—Ü—É
  const timeLeft = LAUNCH_CONFIG.launchDate - now;
  const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
  const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
  const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);

  res.send(`
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üöÄ Tendo Market - –°–∫–æ—Ä–æ –∑–∞–ø—É—Å–∫!</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
        }

        .container {
            text-align: center;
            max-width: 600px;
            padding: 2rem;
            animation: fadeInUp 1s ease-out;
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .logo {
            font-size: 4rem;
            margin-bottom: 1rem;
            animation: bounce 2s infinite;
        }

        @keyframes bounce {
            0%, 20%, 50%, 80%, 100% {
                transform: translateY(0);
            }
            40% {
                transform: translateY(-10px);
            }
            60% {
                transform: translateY(-5px);
            }
        }

        h1 {
            font-size: 2.5rem;
            margin-bottom: 2rem;
            font-weight: 300;
            letter-spacing: 1px;
        }

        .timer {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin: 3rem 0;
            flex-wrap: wrap;
        }

        .time-block {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 1.5rem;
            min-width: 100px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: transform 0.3s ease;
        }

        .time-block:hover {
            transform: scale(1.05);
        }

        .time-value {
            font-size: 2.5rem;
            font-weight: bold;
            display: block;
            margin-bottom: 0.5rem;
        }

        .time-label {
            font-size: 0.9rem;
            opacity: 0.8;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .message {
            font-size: 1.2rem;
            margin: 2rem 0;
            opacity: 0.9;
            line-height: 1.6;
        }

        .progress-bar {
            width: 100%;
            height: 4px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 2px;
            margin: 2rem 0;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #ff6b6b, #4ecdc4);
            border-radius: 2px;
            animation: progress 2s ease-in-out infinite;
        }

        @keyframes progress {
            0% { width: 0%; }
            50% { width: 70%; }
            100% { width: 100%; }
        }

        .social-links {
            margin-top: 3rem;
        }

        .social-links a {
            color: white;
            text-decoration: none;
            margin: 0 1rem;
            font-size: 1.5rem;
            transition: opacity 0.3s ease;
        }

        .social-links a:hover {
            opacity: 0.7;
        }

        @media (max-width: 768px) {
            .container {
                padding: 1rem;
            }

            h1 {
                font-size: 2rem;
            }

            .timer {
                gap: 0.5rem;
            }

            .time-block {
                min-width: 80px;
                padding: 1rem;
            }

            .time-value {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="logo">üöÄ</div>
        <h1>–ó–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑:</h1>

        <div class="timer">
            <div class="time-block">
                <span class="time-value" id="days">${days}</span>
                <span class="time-label">–¥–Ω–µ–π</span>
            </div>
            <div class="time-block">
                <span class="time-value" id="hours">${hours}</span>
                <span class="time-label">—á–∞—Å–æ–≤</span>
            </div>
            <div class="time-block">
                <span class="time-value" id="minutes">${minutes}</span>
                <span class="time-label">–º–∏–Ω—É—Ç</span>
            </div>
            <div class="time-block">
                <span class="time-value" id="seconds">${seconds}</span>
                <span class="time-label">—Å–µ–∫—É–Ω–¥</span>
            </div>
        </div>

        <div class="progress-bar">
            <div class="progress-fill"></div>
        </div>

        <div class="message">
            <p>–ú—ã –≥–æ—Ç–æ–≤–∏–º —á—Ç–æ-—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–µ –¥–ª—è –≤–∞—Å!</p>
            <p>–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∏ –±—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º–∏, –∫—Ç–æ —É–∑–Ω–∞–µ—Ç –æ –∑–∞–ø—É—Å–∫–µ.</p>
        </div>

        <div class="social-links">
            <a href="#" title="Telegram">üì±</a>
            <a href="#" title="Instagram">üì∏</a>
            <a href="#" title="Facebook">üìò</a>
        </div>
    </div>

    <script>
        function updateTimer() {
            const now = new Date().getTime();
            const launchDate = new Date('${LAUNCH_CONFIG.launchDate.toISOString()}').getTime();
            const timeLeft = launchDate - now;

            if (timeLeft <= 0) {
                // –í—Ä–µ–º—è –≤—ã—à–ª–æ - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                window.location.reload();
                return;
            }

            const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
            const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);

            document.getElementById('days').textContent = days;
            document.getElementById('hours').textContent = hours;
            document.getElementById('minutes').textContent = minutes;
            document.getElementById('seconds').textContent = seconds;
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        setInterval(updateTimer, 1000);

        // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        let progress = 0;
        setInterval(() => {
            progress = (progress + 1) % 100;
            document.querySelector('.progress-fill').style.width = progress + '%';
        }, 50);
    </script>
</body>
</html>
  `);
};

// –ü—Ä–∏–º–µ–Ω—è–µ–º pre-launch middleware –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(preLaunchMiddleware);

// üîê –ó–ê–©–ò–©–ï–ù–ù–´–ï –ú–ê–†–®–†–£–¢–´ (—Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
app.use(`/api/${apiVersion}/users`, authenticateToken);
app.use(`/api/${apiVersion}/orders`, authenticateToken);
app.use(`/api/${apiVersion}/notifications`, authenticateToken);

// Removed conflicting demo categories endpoint - using proper routes instead

// üõçÔ∏è FEATURED –¢–û–í–ê–†–´ (–æ—Ç–∫–ª—é—á–µ–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º MongoDB)
// app.get(`/api/${apiVersion}/products/featured`, ...);

// üîê –î–ï–ú–û –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø (–æ—Ç–∫–ª—é—á–µ–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º MongoDB)
// app.post(`/api/${apiVersion}/auth/register`, ...);

// üîê –î–ï–ú–û –õ–û–ì–ò–ù (–æ—Ç–∫–ª—é—á–µ–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º MongoDB)
// app.post(`/api/${apiVersion}/auth/login`, ...);

// üöÄ ENDPOINTS –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–ü–£–°–ö–û–ú –ü–†–û–ï–ö–¢–ê

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–ø—É—Å–∫–∞ (–ø—É–±–ª–∏—á–Ω—ã–π)
app.get(`/api/${apiVersion}/launch/status`, (req, res) => {
  const now = new Date();
  const timeLeft = LAUNCH_CONFIG.isLaunched ? 0 : Math.max(0, LAUNCH_CONFIG.launchDate - now);

  res.json({
    success: true,
    data: {
      isLaunched: LAUNCH_CONFIG.isLaunched,
      launchDate: LAUNCH_CONFIG.launchDate,
      preLaunchEnabled: LAUNCH_CONFIG.preLaunchEnabled,
      timeLeft: timeLeft,
      days: Math.floor(timeLeft / (1000 * 60 * 60 * 24)),
      hours: Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),
      minutes: Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60)),
      seconds: Math.floor((timeLeft % (1000 * 60)) / 1000)
    }
  });
});

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–ø—É—Å–∫–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
app.put(`/api/${apiVersion}/launch/status`, authenticateToken, (req, res) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
  if (!req.user || (req.user.role !== 'admin' && req.user.role !== 'super_admin')) {
    return res.status(403).json({
      success: false,
      error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è'
    });
  }

  const { isLaunched, launchDate, preLaunchEnabled } = req.body;

  if (typeof isLaunched === 'boolean') {
    LAUNCH_CONFIG.isLaunched = isLaunched;
    console.log(`üöÄ –°—Ç–∞—Ç—É—Å –∑–∞–ø—É—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${isLaunched ? '–ó–ê–ü–£–©–ï–ù' : 'PRE-LAUNCH'}`);
  }

  if (launchDate) {
    LAUNCH_CONFIG.launchDate = new Date(launchDate);
    console.log(`üìÖ –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${LAUNCH_CONFIG.launchDate.toISOString()}`);
  }

  if (typeof preLaunchEnabled === 'boolean') {
    LAUNCH_CONFIG.preLaunchEnabled = preLaunchEnabled;
    console.log(`‚öôÔ∏è Pre-launch —Ä–µ–∂–∏–º: ${preLaunchEnabled ? '–í–ö–õ–Æ–ß–ï–ù' : '–û–¢–ö–õ–Æ–ß–ï–ù'}`);
  }

  res.json({
    success: true,
    message: '–°—Ç–∞—Ç—É—Å –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω',
    data: {
      isLaunched: LAUNCH_CONFIG.isLaunched,
      launchDate: LAUNCH_CONFIG.launchDate,
      preLaunchEnabled: LAUNCH_CONFIG.preLaunchEnabled
    }
  });
});

// üîç –ü–†–û–í–ï–†–ö–ê –¢–û–ö–ï–ù–ê
app.get(`/api/${apiVersion}/auth/me`, authenticateToken, (req, res) => {
  console.log('‚úÖ –¢–æ–∫–µ–Ω –ø—Ä–æ–≤–µ—Ä–µ–Ω —É—Å–ø–µ—à–Ω–æ');

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Ç–æ–∫–µ–Ω–∞
  res.json({
    success: true,
    user: req.user
  });
});

// üîê –ê–î–ú–ò–ù–°–ö–ê–Ø –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø (–æ—Ç–∫–ª—é—á–µ–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º MongoDB)
// app.post(`/api/${apiVersion}/auth/admin/login`, ...);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω —Ç–æ–∫–µ–Ω–∞
app.get(`/api/${apiVersion}/auth/admin/verify`, authenticateToken, (req, res) => {
  console.log('‚úÖ –ê–¥–º–∏–Ω —Ç–æ–∫–µ–Ω –ø—Ä–æ–≤–µ—Ä–µ–Ω —É—Å–ø–µ—à–Ω–æ');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
  if (req.user.role === 'admin') {
    res.json({
      success: true,
      user: req.user
    });
  } else {
    res.status(403).json({
      success: false,
      error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'
    });
  }
});

// üìÅ –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –§–ê–ô–õ–´
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));
app.use('/public', express.static(path.join(__dirname, 'public')));

// üè• HEALTH CHECK
app.get('/health', (req, res) => {
  res.status(200).json({
    status: 'success',
    message: 'Chexol.uz API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    environment: process.env.NODE_ENV || 'development',
    version: process.env.npm_package_version || '1.0.0'
  });
});

// üè• HEALTH CHECK –¥–ª—è API
app.get(`/api/${apiVersion}/health`, (req, res) => {
  res.status(200).json({
    status: 'success',
    message: 'Chexol.uz API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    environment: process.env.NODE_ENV || 'development',
    version: process.env.npm_package_version || '1.0.0'
  });
});

app.use(`/api/${apiVersion}/auth`, authRoutes);
app.use(`/api/${apiVersion}/products`, productRoutes);
app.use(`/api/${apiVersion}/categories`, categoryRoutes);
app.use(`/api/${apiVersion}/orders`, orderRoutes);
app.use(`/api/${apiVersion}/users`, userRoutes);
app.use(`/api/${apiVersion}/customers`, require('./routes/customers'));
app.use(`/api/${apiVersion}/promotions`, require('./routes/promotions'));
app.use(`/api/${apiVersion}/payouts`, require('./routes/payouts'));
app.use(`/api/${apiVersion}/inventory`, require('./routes/inventory'));
app.use(`/api/${apiVersion}/support`, require('./routes/support'));
app.use(`/api/${apiVersion}/payments`, require('./routes/payments'));
app.use(`/api/${apiVersion}/admin`, require('./routes/admin'));
app.use(`/api/${apiVersion}/upload`, uploadRoutes);
app.use(`/api/${apiVersion}/cities`, cityRoutes);
app.use(`/api/${apiVersion}/seller-applications`, sellerApplicationRoutes);
app.use(`/api/${apiVersion}/sellers`, sellerRoutes);
app.use(`/api/${apiVersion}/chats`, chatRoutes);
app.use(`/api/${apiVersion}/favorites`, favoritesRoutes);
app.use(`/api/${apiVersion}/reviews`, reviewsRoutes);
app.use(`/api/${apiVersion}/contacts`, require('./routes/contacts'));
app.use(`/api/${apiVersion}/notifications`, require('./routes/notifications'));
app.use(`/api/${apiVersion}/webhooks`, require('./routes/webhooks'));

// üìã –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê API
app.get('/', (req, res) => {
  res.json({
    message: 'üõçÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Chexol.uz API',
    version: apiVersion,
    documentation: `/api/${apiVersion}/docs`,
    health: '/health',
    endpoints: {
      auth: `/api/${apiVersion}/auth`,
      products: `/api/${apiVersion}/products`,
      categories: `/api/${apiVersion}/categories`,
      orders: `/api/${apiVersion}/orders`,
      users: `/api/${apiVersion}/users`,
      upload: `/api/${apiVersion}/upload`,
      cities: `/api/${apiVersion}/cities`,
      'seller-applications': `/api/${apiVersion}/seller-applications`,
      sellers: `/api/${apiVersion}/sellers`,
      chats: `/api/${apiVersion}/chats`
    }
  });
});

// üîç –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø API (–∑–∞–≥–ª—É—à–∫–∞)
app.get(`/api/${apiVersion}/docs`, (req, res) => {
  res.json({
    message: 'API Documentation –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ',
    contact: 'support@chexol.uz'
  });
});

// ‚ùå –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
app.use(notFound);
app.use(errorHandler);

// üöÄ –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
const PORT = process.env.PORT || 5000;

const startServer = async () => {
  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üóÑÔ∏è  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
    await connectDB();
    
    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    const server = app.listen(PORT, () => {
      console.log('');
      console.log('üü¢ ==========================================');
      console.log('üöÄ    CHEXOL.UZ BACKEND API –ó–ê–ü–£–©–ï–ù');
      console.log('üü¢ ==========================================');
      console.log(`üìç –°–µ—Ä–≤–µ—Ä:        http://localhost:${PORT}`);
      console.log(`üåê API:           http://localhost:${PORT}/api/${apiVersion}`);
      console.log(`üè• Health:        http://localhost:${PORT}/health`);
      console.log(`üìã –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:  http://localhost:${PORT}/api/${apiVersion}/docs`);
      console.log(`üåç –°—Ä–µ–¥–∞:         ${process.env.NODE_ENV || 'development'}`);
      console.log('üü¢ ==========================================');
      console.log('');
    });

    // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
    process.on('SIGTERM', () => {
      console.log('üîÑ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä–≤–µ—Ä–∞...');
      server.close((err) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞:', err);
          process.exit(1);
        }
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç');
        process.exit(0);
      });
    });

    process.on('SIGINT', () => {
      console.log('üîÑ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä–≤–µ—Ä–∞...');
      server.close((err) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞:', err);
          process.exit(1);
        }
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç');
        process.exit(0);
      });
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
    process.exit(1);
  }
};

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
startServer();

module.exports = app;
