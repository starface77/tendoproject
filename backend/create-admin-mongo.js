const { MongoClient } = require('mongodb');
const bcrypt = require('bcryptjs');

async function createAdminMongo() {
  const client = new MongoClient('mongodb://localhost:27017');

  try {
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');

    const db = client.db('chexoluz');

    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
    const users = db.collection('users');
    const existingAdmin = await users.findOne({ email: 'admin@market.com' });

    if (!existingAdmin) {
      console.log('üëë –°–æ–∑–¥–∞—é –∞–¥–º–∏–Ω–∞...');
      const hashedPassword = await bcrypt.hash('admin123456', 12);

      await users.insertOne({
        email: 'admin@market.com',
        password: hashedPassword,
        firstName: 'Admin',
        lastName: 'Market',
        phone: '+998901234567',
        role: 'admin',
        isActive: true,
        isEmailVerified: true,
        createdAt: new Date(),
        updatedAt: new Date()
      });
      console.log('‚úÖ –ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω');
    } else {
      console.log('‚úÖ –ê–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const categories = db.collection('categories');
    const existingCategory = await categories.findOne({ slug: 'electronics' });

    if (!existingCategory) {
      console.log('üìÇ –°–æ–∑–¥–∞—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é...');
      await categories.insertOne({
        name: { ru: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', uz: 'Elektronika', en: 'Electronics' },
        slug: 'electronics',
        description: { ru: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ –≥–∞–¥–∂–µ—Ç—ã', uz: 'Elektronika va gadjetlar', en: 'Electronics and gadgets' },
        icon: 'üì±',
        isActive: true,
        isVisible: true,
        level: 0,
        path: '/electronics',
        createdAt: new Date(),
        updatedAt: new Date()
      });
      console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞');
    } else {
      console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –ø—Ä–æ–¥–∞–≤—Ü–∞
    const sellerApplications = db.collection('sellerapplications');
    const existingApp = await sellerApplications.findOne({ email: 'seller@test.com' });

    if (!existingApp) {
      console.log('üìù –°–æ–∑–¥–∞—é –∑–∞—è–≤–∫—É –ø—Ä–æ–¥–∞–≤—Ü–∞...');
      await sellerApplications.insertOne({
        businessName: 'Test Electronics Store',
        contactName: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
        email: 'seller@test.com',
        phone: '+998901234567',
        businessType: 'individual',
        address: '–¢–∞—à–∫–µ–Ω—Ç, —É–ª. –ê–º–∏—Ä–∞ –¢–µ–º—É—Ä–∞, 15',
        status: 'pending',
        createdAt: new Date(),
        updatedAt: new Date()
      });
      console.log('‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞');
    } else {
      console.log('‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
    const products = db.collection('products');
    const existingProduct = await products.findOne({ name: 'Test iPhone 15' });

    if (!existingProduct) {
      console.log('üì± –°–æ–∑–¥–∞—é –ø—Ä–æ–¥—É–∫—Ç...');
      await products.insertOne({
        name: 'Test iPhone 15',
        price: 1500000,
        description: '–¢–µ—Å—Ç–æ–≤—ã–π iPhone 15 –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏',
        brand: 'Apple',
        model: 'iPhone 15',
        images: ['https://example.com/iphone15.jpg'],
        isActive: true,
        inStock: true,
        stock: 5,
        createdAt: new Date(),
        updatedAt: new Date()
      });
      console.log('‚úÖ –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω');
    } else {
      console.log('‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    console.log('\nüéØ –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìß Admin: admin@market.com / admin123456');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await client.close();
    console.log('‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MongoDB');
  }
}

createAdminMongo();




