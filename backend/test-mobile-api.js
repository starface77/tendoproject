/**
 * üß™ –¢–ï–°–¢ –ú–û–ë–ò–õ–¨–ù–û–ì–û API
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 */

const axios = require('axios');

const API_BASE_URL = 'http://localhost:5000/api/v1';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testData = {
  user: {
    email: 'test@example.com',
    password: 'test123456',
    firstName: 'Test',
    lastName: 'User'
  },
  product: {
    name: 'Test Product',
    price: 1000,
    description: 'Test description'
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
async function testEndpoint(name, method, url, data = null, headers = {}) {
  try {
    console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${name}`);
    console.log(`${method.toUpperCase()} ${url}`);
    
    const config = {
      method,
      url: `${API_BASE_URL}${url}`,
      headers: {
        'Content-Type': 'application/json',
        ...headers
      }
    };
    
    if (data) {
      config.data = data;
    }
    
    const response = await axios(config);
    
    console.log(`‚úÖ –£–°–ü–ï–• (${response.status}):`);
    console.log('–û—Ç–≤–µ—Ç:', JSON.stringify(response.data, null, 2));
    
    return { success: true, data: response.data };
    
  } catch (error) {
    console.log(`‚ùå –û–®–ò–ë–ö–ê:`);
    console.log('–°—Ç–∞—Ç—É—Å:', error.response?.status);
    console.log('–°–æ–æ–±—â–µ–Ω–∏–µ:', error.response?.data?.message || error.message);
    console.log('–î–∞–Ω–Ω—ã–µ:', error.response?.data);
    
    return { success: false, error: error.response?.data || error.message };
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runMobileAPITests() {
  console.log('üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ú–û–ë–ò–õ–¨–ù–û–ì–û API');
  console.log('=====================================');
  
  const results = [];
  
  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
  results.push(await testEndpoint('Health Check', 'get', '/health'));
  
  // 2. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
  results.push(await testEndpoint('Get Categories', 'get', '/categories'));
  
  // 3. –¢–æ–≤–∞—Ä—ã
  results.push(await testEndpoint('Get Products', 'get', '/products'));
  results.push(await testEndpoint('Get Featured Products', 'get', '/products?featured=true&limit=4'));
  results.push(await testEndpoint('Get Popular Products', 'get', '/products?popular=true&limit=4'));
  
  // 4. –ì–æ—Ä–æ–¥–∞
  results.push(await testEndpoint('Get Cities', 'get', '/cities'));
  
  // 5. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞)
  results.push(await testEndpoint('Login (–±–µ–∑ –¥–∞–Ω–Ω—ã—Ö)', 'post', '/auth/login'));
  
  // 6. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  results.push(await testEndpoint('Register', 'post', '/auth/register', testData.user));
  
  // 7. –õ–æ–≥–∏–Ω —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  results.push(await testEndpoint('Login', 'post', '/auth/login', {
    email: testData.user.email,
    password: testData.user.password
  }));
  
  // –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const successful = results.filter(r => r.success).length;
  const failed = results.filter(r => !r.success).length;
  
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log('=====================================');
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: ${successful}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${failed}`);
  console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((successful / results.length) * 100)}%`);
  
  if (failed > 0) {
    console.log('\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:');
    console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    console.log('3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ —Ä–æ—É—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
  }
  
  return results;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runMobileAPITests()
    .then(() => {
      console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
      process.exit(0);
    })
    .catch(error => {
      console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { runMobileAPITests, testEndpoint };


