const mongoose = require('mongoose');
const SellerApplication = require('./models/SellerApplication');
const User = require('./models/User');
const Seller = require('./models/Seller');

async function testSellerApproval() {
  try {
    await mongoose.connect('mongodb://localhost:27017/tendo');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞—è–≤–æ–∫
    const applications = await SellerApplication.find().limit(5);
    console.log('üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫:', applications.length);

    if (applications.length > 0) {
      const app = applications[0];
      console.log('üìÑ –ó–∞—è–≤–∫–∞:', {
        id: app._id,
        email: app.email,
        status: app.status,
        businessName: app.businessName,
        contactName: app.contactName,
        phone: app.phone
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const user = await User.findOne({ email: app.email });
      if (user) {
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.email, '–†–æ–ª—å:', user.role);
      } else {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', app.email);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
    const sellers = await Seller.find().limit(3);
    console.log('üè™ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤:', sellers.length);

    await mongoose.disconnect();
    console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.error(error.stack);
  }
}

testSellerApproval();




