const { Buffer } = require('buffer');
const crypto = require('crypto');

/**
 * üîê Payme (Paycom) Webhook Auth Middleware
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization: Basic base64("Paycom:<SECRET>")
 */
const verifyPaymeBasicAuth = (req, res, next) => {
  try {
    const secret = process.env.PAYME_SECRET_KEY;

    if (!secret) {
      // –ï—Å–ª–∏ —Å–µ–∫—Ä–µ—Ç –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –æ—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      return res.status(500).json({ success: false, error: 'Payme secret not configured' });
    }

    const auth = req.get('authorization') || req.get('Authorization');
    if (!auth || !auth.startsWith('Basic ')) {
      return res.status(401).json({ success: false, error: 'Missing or invalid Authorization header' });
    }

    const expected = 'Basic ' + Buffer.from(`Paycom:${secret}`).toString('base64');

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    const a = Buffer.from(auth);
    const b = Buffer.from(expected);
    const isMatch = a.length === b.length && crypto.timingSafeEqual ? crypto.timingSafeEqual(a, b) : auth === expected;

    if (!isMatch) {
      return res.status(401).json({ success: false, error: 'Unauthorized' });
    }

    next();
  } catch (error) {
    console.error('Payme auth middleware error:', error.message);
    return res.status(500).json({ success: false, error: 'Auth middleware error' });
  }
};

module.exports = { verifyPaymeBasicAuth };


