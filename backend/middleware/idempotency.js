const crypto = require('crypto');
const IdempotencyKey = require('../models/IdempotencyKey');

/**
 * üß± Idempotency middleware
 * –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –∑–∞–ø—Ä–æ—Å–∞
 */
const buildRequestHash = (req) => {
  const payload = {
    method: req.method,
    path: req.originalUrl,
    userId: req.user?.id || req.user?._id?.toString(),
    body: req.body
  };

  const str = JSON.stringify(payload);
  return crypto.createHash('sha256').update(str).digest('hex');
};

const idempotencyMiddleware = (action = 'generic') => {
  return async (req, res, next) => {
    try {
      // –ö–ª—é—á –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–ª–∏ —Ö—ç—à –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
      const providedKey = req.get('Idempotency-Key');
      const computedHash = buildRequestHash(req);
      const effectiveKey = providedKey || `${action}:${computedHash}`;

      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      const existing = await IdempotencyKey.findOne({ key: effectiveKey });

      if (existing) {
        if (existing.status === 'completed') {
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
          return res.status(existing.responseStatus || 200).json(existing.responseBody);
        }

        // –ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
        return res.status(409).json({
          success: false,
          error: '–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è',
          code: 'IDEMPOTENT_IN_PROGRESS'
        });
      }

      // –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å ¬´–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ¬ª
      const keyDoc = await IdempotencyKey.create({
        key: effectiveKey,
        user: req.user?.id || req.user?._id,
        method: req.method,
        path: req.originalUrl,
        action,
        requestHash: computedHash,
        status: 'in_progress'
      });

      // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
      req.idempotencyKeyDoc = keyDoc;

      // –•—É–∫ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (–Ω–∞ —Å–ª—É—á–∞–π —Ä–∞–Ω–Ω–µ–≥–æ return –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ)
      const originalJson = res.json.bind(res);
      res.json = async (body) => {
        try {
          if (req.idempotencyKeyDoc) {
            await IdempotencyKey.findByIdAndUpdate(req.idempotencyKeyDoc._id, {
              status: 'completed',
              responseStatus: res.statusCode,
              responseBody: body,
              updatedAt: new Date()
            });
          }
        } catch (e) {
          // –õ–æ–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –º–µ—à–∞–µ–º –æ—Ç–≤–µ—Ç—É
          console.error('Idempotency save error:', e.message);
        }
        return originalJson(body);
      };

      next();
    } catch (error) {
      console.error('Idempotency middleware error:', error.message);
      return res.status(500).json({ success: false, error: 'Idempotency error' });
    }
  };
};

module.exports = { idempotencyMiddleware };


