const jwt = require('jsonwebtoken');
const User = require('../models/User');
const Seller = require('../models/Seller');

/**
 * üîê MIDDLEWARE –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–æ–≤ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const protect = async (req, res, next) => {
  try {
    let token;

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
    if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
      token = req.headers.authorization.split(' ')[1];
    }
    // –ò–ª–∏ –∏–∑ cookies
    else if (req.cookies && req.cookies.token) {
      token = req.cookies.token;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
    if (!token) {
      return res.status(401).json({
        success: false,
        error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
        code: 'NO_TOKEN'
      });
    }

    try {
      // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
      const decoded = jwt.verify(token, process.env.JWT_SECRET || 'super_secret_jwt_key_for_demo_development_only_change_in_production_2025');

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
      if (decoded.exp && Date.now() >= decoded.exp * 1000) {
        return res.status(401).json({
          success: false,
          error: '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫',
          code: 'TOKEN_EXPIRED'
        });
      }

      let user;

      // –û—Ç–∫–ª—é—á–∞–µ–º –¥–µ–º–æ —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ MongoDB
      user = await User.findById(decoded.id)
        .select('-password -__v')
        .populate('permissions')
        .lean();

      if (!user) {
        return res.status(401).json({
          success: false,
          error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
          code: 'USER_NOT_FOUND'
        });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
      if (!user.isActive) {
        return res.status(401).json({
          success: false,
          error: '–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω',
          code: 'ACCOUNT_INACTIVE'
        });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      if (user.isLocked) {
        return res.status(423).json({
          success: false,
          error: '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
          code: 'ACCOUNT_LOCKED'
        });
      }

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–ø—Ä–æ—Å
      req.user = user;
      next();

    } catch (jwtError) {
      console.error('JWT Error:', jwtError.message);
      
      if (jwtError.name === 'TokenExpiredError') {
        return res.status(401).json({
          success: false,
          error: '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫',
          code: 'TOKEN_EXPIRED'
        });
      }
      
      if (jwtError.name === 'JsonWebTokenError') {
        return res.status(401).json({
          success: false,
          error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω',
          code: 'INVALID_TOKEN'
        });
      }
      
      return res.status(401).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
        code: 'AUTH_ERROR'
      });
    }

  } catch (error) {
    console.error('Auth Error:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
      code: 'SERVER_ERROR'
    });
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π
const authorize = (...roles) => {
  return (req, res, next) => {
    if (!req.user) {
      return res.status(401).json({
        success: false,
        error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'
      });
    }

    if (!roles.includes(req.user.role)) {
      return res.status(403).json({
        success: false,
        error: `–†–æ–ª—å ${req.user.role} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–µ—Å—É—Ä—Å—É`
      });
    }

    next();
  };
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
const requirePermission = (permission) => {
  return (req, res, next) => {
    if (!req.user) {
      return res.status(401).json({
        success: false,
        error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'
      });
    }

    if (!req.user.hasPermission(permission)) {
      return res.status(403).json({
        success: false,
        error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è: ${permission}`
      });
    }

    next();
  };
};

// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è)
const optionalAuth = async (req, res, next) => {
  try {
    let token;

    if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
      token = req.headers.authorization.split(' ')[1];
    } else if (req.cookies && req.cookies.token) {
      token = req.cookies.token;
    }

    if (token) {
      try {
        const JWT_SECRET = process.env.JWT_SECRET || 'super_secret_jwt_key_for_demo_development_only_change_in_production_2025';
        const decoded = jwt.verify(token, JWT_SECRET);
        const user = await User.findById(decoded.id).select('-password');
        
        if (user && user.isActive && !user.isLocked) {
          req.user = user;
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ç–æ–∫–µ–Ω–∞ –≤ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        console.warn('Optional auth warning:', error.message);
      }
    }

    next();
  } catch (error) {
    next();
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ä–µ—Å—É—Ä—Å–∞
const checkOwnership = (resourceModel, resourceField = '_id') => {
  return async (req, res, next) => {
    try {
      const Resource = require(`../models/${resourceModel}`);
      const resourceId = req.params.id || req.params[resourceField];
      
      const resource = await Resource.findById(resourceId);
      
      if (!resource) {
        return res.status(404).json({
          success: false,
          error: '–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }

      // –ê–¥–º–∏–Ω—ã –∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ä–µ—Å—É—Ä—Å–∞–º
      if (['admin', 'super_admin'].includes(req.user.role)) {
        req.resource = resource;
        return next();
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
      const ownerId = resource.user || resource.customer || resource.createdBy;
      
      if (!ownerId || !ownerId.equals(req.user._id)) {
        return res.status(403).json({
          success: false,
          error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'
        });
      }

      req.resource = resource;
      next();

    } catch (error) {
      console.error('Ownership check error:', error.message);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞'
      });
    }
  };
};

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const logUserActivity = (action) => {
  return (req, res, next) => {
    if (req.user) {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ë–î –∏–ª–∏ —Ñ–∞–π–ª
      console.log(`üìä User Activity: ${req.user.email} - ${action} - ${new Date().toISOString()}`);
    }
    next();
  };
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
const sellerProtect = async (req, res, next) => {
  try {
    let token;

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
    if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
      token = req.headers.authorization.split(' ')[1];
    }
    // –ò–ª–∏ –∏–∑ cookies
    else if (req.cookies && req.cookies.token) {
      token = req.cookies.token;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
    if (!token) {
      return res.status(401).json({
        success: false,
        message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      });
    }

    try {
      // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
      const decoded = jwt.verify(token, process.env.JWT_SECRET || 'super_secret_jwt_key_for_demo_development_only_change_in_production_2025');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–æ–∫–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü–∞
      if (decoded.type !== 'seller') {
        return res.status(401).json({
          success: false,
          message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞'
        });
      }
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞
      const seller = await Seller.findById(decoded.id).select('-password');

      if (!seller) {
        return res.status(401).json({
          success: false,
          message: '–ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
      if (!seller.isActive) {
        let message = '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
        if (seller.status === 'suspended') {
          message = `–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ ${seller.suspendedUntil?.toLocaleDateString('ru-RU')}`;
          if (seller.suspensionReason) {
            message += `. –ü—Ä–∏—á–∏–Ω–∞: ${seller.suspensionReason}`;
          }
        } else if (seller.status === 'banned') {
          message = '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞';
        } else if (seller.status === 'inactive') {
          message = '–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω';
        }

        return res.status(403).json({
          success: false,
          message
        });
      }

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ –≤ –∑–∞–ø—Ä–æ—Å
      req.seller = seller;
      next();

    } catch (error) {
      console.error('JWT Error:', error.message);
      return res.status(401).json({
        success: false,
        message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω'
      });
    }

  } catch (error) {
    console.error('Seller Auth Error:', error.message);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
    });
  }
};

module.exports = {
  protect,
  authorize,
  requirePermission,
  optionalAuth,
  checkOwnership,
  logUserActivity,
  sellerProtect
};

