const mongoose = require('mongoose');
const jwt = require('jsonwebtoken');
const User = require('./models/User');
const http = require('http');

async function testApproveHTTP() {
  try {
    await mongoose.connect('mongodb://localhost:27017/tendo-market');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');

    // –ù–∞–π–¥–µ–º –∞–¥–º–∏–Ω–∞
    const admin = await User.findOne({ role: 'admin' });
    if (!admin) {
      console.log('‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –ù–∞–π–¥–µ–º –∑–∞—è–≤–∫—É
    const SellerApplication = require('./models/SellerApplication');
    const application = await SellerApplication.findOne({ status: 'pending' });
    if (!application) {
      console.log('‚ùå –ó–∞—è–≤–∫–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    console.log('üìã –ù–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞:', application._id);
    console.log('üìä –°—Ç–∞—Ç—É—Å:', application.status);

    // –°–æ–∑–¥–∞–¥–∏–º JWT —Ç–æ–∫–µ–Ω
    const token = jwt.sign(
      {
        id: admin._id,
        role: admin.role,
        email: admin.email,
        iat: Math.floor(Date.now() / 1000)
      },
      process.env.JWT_SECRET || 'super_secret_jwt_key_for_demo_development_only_change_in_production_2025',
      { expiresIn: '7d' }
    );

    console.log('üîë –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω');

    // –û—Ç–ø—Ä–∞–≤–∏–º HTTP –∑–∞–ø—Ä–æ—Å
    const postData = JSON.stringify({
      comments: '–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ —á–µ—Ä–µ–∑ API —Ç–µ—Å—Ç'
    });

    const options = {
      hostname: 'localhost',
      port: 5000,
      path: `/api/v1/seller-applications/${application._id}/approve`,
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`,
        'Content-Length': Buffer.byteLength(postData)
      }
    };

    console.log('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', options.path);

    const req = http.request(options, (res) => {
      console.log('üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', res.statusCode);
      console.log('üì• –ó–∞–≥–æ–ª–æ–≤–∫–∏:', res.headers);

      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });

      res.on('end', () => {
        console.log('üì• –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:', data);

        if (res.statusCode === 200) {
          console.log('‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç!');
        } else {
          console.log('‚ùå API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ö–æ–¥:', res.statusCode);
        }

        mongoose.disconnect();
      });
    });

    req.on('error', (e) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', e.message);
      mongoose.disconnect();
    });

    req.write(postData);
    req.end();

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    mongoose.disconnect();
  }
}

testApproveHTTP();
