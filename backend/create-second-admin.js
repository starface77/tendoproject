const { connectDB } = require('./config/database');
const User = require('./models/User');
const bcrypt = require('bcryptjs');

const createSecondAdmin = async () => {
  try {
    console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await connectDB();

    const email = 'admin2@tendo.uz';
    const password = 'admin123456';

    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–¥–º–∏–Ω —Å email: ${email}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω
    const existingAdmin = await User.findOne({ email });

    if (existingAdmin) {
      console.log(`‚ùå –ê–¥–º–∏–Ω —Å email ${email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      console.log(`   ID: ${existingAdmin._id}`);
      console.log(`   –†–æ–ª—å: ${existingAdmin.role}`);
      return;
    }

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    console.log(`üîê –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å...`);
    const saltRounds = 12;
    const hashedPassword = await bcrypt.hash(password, saltRounds);

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
    console.log(`üëë –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∞–¥–º–∏–Ω–∞...`);
    const newAdmin = new User({
      email,
      password: hashedPassword,
      firstName: 'Admin',
      lastName: 'Second',
      phone: '+998901234569',
      role: 'admin',
      isActive: true,
      isEmailVerified: true,
      permissions: [
        'read:products',
        'write:products',
        'read:orders',
        'write:orders',
        'read:users',
        'write:users',
        'read:analytics',
        'manage:site'
      ]
    });

    await newAdmin.save();

    console.log(`‚úÖ –í—Ç–æ—Ä–æ–π –∞–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω!`);
    console.log(`   ID: ${newAdmin._id}`);
    console.log(`   Email: ${newAdmin.email}`);
    console.log(`   –ü–∞—Ä–æ–ª—å: ${password}`);
    console.log(`   –†–æ–ª—å: ${newAdmin.role}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å...`);
    const isMatch = await bcrypt.compare(password, hashedPassword);
    console.log(`   –ü–∞—Ä–æ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç: ${isMatch ? '‚úÖ' : '‚ùå'}`);

    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
};

createSecondAdmin();




