const NotificationService = require('../services/notificationService')
const Payment = require('../models/Payment')
const Order = require('../models/Order')

/**
 * üîó WEBHOOK –ö–û–ù–¢–†–û–õ–õ–ï–†
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
 */

class WebhookController {
  
  /**
   * üîî –û–ë–†–ê–ë–û–¢–ö–ê WEBHOOK –û–¢ –ü–õ–ê–¢–ï–ñ–ù–û–ô –°–ò–°–¢–ï–ú–´
   */
  static async handlePaymentWebhook(req, res) {
    try {
      const { 
        paymentId, 
        status, 
        transactionId, 
        amount, 
        method,
        signature,
        timestamp 
      } = req.body

      console.log('üîó Webhook –ø–æ–ª—É—á–µ–Ω:', { paymentId, status, method })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      if (!this.verifyWebhookSignature(req.body, signature)) {
        console.error('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook')
        return res.status(401).json({ 
          success: false, 
          message: 'Unauthorized' 
        })
      }

      // –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂
      const payment = await Payment.findById(paymentId)
        .populate('order')
        .populate('user')

      if (!payment) {
        console.error('‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω:', paymentId)
        return res.status(404).json({ 
          success: false, 
          message: 'Payment not found' 
        })
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
      switch (status) {
        case 'completed':
        case 'success':
          await this.handleSuccessfulPayment(payment, transactionId, method)
          break
          
        case 'failed':
        case 'declined':
          await this.handleFailedPayment(payment, req.body.error || 'Payment failed')
          break
          
        case 'pending':
          await this.handlePendingPayment(payment)
          break
          
        case 'refunded':
          await this.handleRefundedPayment(payment, req.body.refundAmount)
          break
          
        default:
          console.log('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞:', status)
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      res.status(200).json({ 
        success: true, 
        message: 'Webhook processed successfully' 
      })

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error)
      res.status(500).json({ 
        success: false, 
        message: 'Internal server error' 
      })
    }
  }

  /**
   * ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –£–°–ü–ï–®–ù–û–ì–û –ü–õ–ê–¢–ï–ñ–ê
   */
  static async handleSuccessfulPayment(payment, transactionId, method) {
    try {
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', payment._id)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
      await payment.markAsCompleted({ 
        transactionId, 
        method,
        processedAt: new Date()
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
      if (payment.order) {
        await Order.findByIdAndUpdate(payment.order._id, {
          status: 'confirmed',
          paymentStatus: 'paid',
          confirmedAt: new Date()
        })
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
      await NotificationService.sendPaymentNotifications(payment)

      console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω:', payment._id)

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', error)
      throw error
    }
  }

  /**
   * ‚ùå –û–ë–†–ê–ë–û–¢–ö–ê –ù–ï–£–î–ê–ß–ù–û–ì–û –ü–õ–ê–¢–ï–ñ–ê
   */
  static async handleFailedPayment(payment, errorMessage) {
    try {
      console.log('‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', payment._id)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
      await payment.markAsFailed('WEBHOOK_ERROR', errorMessage)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
      if (payment.order) {
        await Order.findByIdAndUpdate(payment.order._id, {
          status: 'payment_failed',
          paymentStatus: 'failed'
        })
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
      await this.sendPaymentFailureNotifications(payment, errorMessage)

      console.log('‚ùå –ü–ª–∞—Ç–µ–∂ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–π:', payment._id)

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', error)
      throw error
    }
  }

  /**
   * ‚è≥ –û–ë–†–ê–ë–û–¢–ö–ê –û–ñ–ò–î–ê–Æ–©–ï–ì–û –ü–õ–ê–¢–ï–ñ–ê
   */
  static async handlePendingPayment(payment) {
    try {
      console.log('‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', payment._id)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
      await payment.markAsProcessing()

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
      if (payment.order) {
        await Order.findByIdAndUpdate(payment.order._id, {
          status: 'payment_pending',
          paymentStatus: 'pending'
        })
      }

      console.log('‚è≥ –ü–ª–∞—Ç–µ–∂ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–∂–∏–¥–∞—é—â–∏–π:', payment._id)

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', error)
      throw error
    }
  }

  /**
   * üí∞ –û–ë–†–ê–ë–û–¢–ö–ê –í–û–ó–í–†–ê–¢–ê –°–†–ï–î–°–¢–í
   */
  static async handleRefundedPayment(payment, refundAmount) {
    try {
      console.log('üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤:', payment._id)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
      await payment.markAsRefunded(refundAmount)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
      if (payment.order) {
        await Order.findByIdAndUpdate(payment.order._id, {
          status: 'refunded',
          paymentStatus: 'refunded'
        })
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–µ
      await this.sendRefundNotifications(payment, refundAmount)

      console.log('üí∞ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω:', payment._id)

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤:', error)
      throw error
    }
  }

  /**
   * üîî –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –û –ù–ï–£–î–ê–ß–ù–û–ú –ü–õ–ê–¢–ï–ñ–ï
   */
  static async sendPaymentFailureNotifications(payment, errorMessage) {
    try {
      const Notification = require('../models/Notification')
      const User = require('../models/User')

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
      const customerNotification = {
        recipient: payment.user._id,
        type: 'customer_payment_failed',
        title: {
          ru: '–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã',
          uz: 'To\'lov xatosi',
          en: 'Payment error'
        },
        message: {
          ru: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: ${errorMessage}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.`,
          uz: `To'lovni qayta ishlashda xatolik: ${errorMessage}. Qaytadan urinib ko'ring yoki boshqa to'lov usulini tanlang.`,
          en: `Error processing payment: ${errorMessage}. Please try again or choose another payment method.`
        },
        relatedData: { 
          payment: payment._id,
          order: payment.order?._id 
        },
        priority: 'high',
        channels: ['in_app', 'email'],
        metadata: {
          icon: '‚ùå',
          color: '#EF4444',
          actionUrl: `/orders/${payment.order?._id}`,
          actionText: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞'
        }
      }

      await Notification.create(customerNotification)

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
      const admins = await User.find({ role: 'admin', isActive: true })
      
      for (const admin of admins) {
        const adminNotification = {
          recipient: admin._id,
          type: 'admin_payment_issue',
          title: {
            ru: '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–ª–∞—Ç–µ–∂–æ–º',
            uz: 'To\'lov bilan bog\'liq muammo',
            en: 'Payment issue'
          },
          message: {
            ru: `–ü–ª–∞—Ç–µ–∂ ${payment._id} –Ω–µ –ø—Ä–æ—à–µ–ª. –û—à–∏–±–∫–∞: ${errorMessage}. –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è.`,
            uz: `To'lov ${payment._id} amalga oshmadi. Xato: ${errorMessage}. E'tibor talab qilinadi.`,
            en: `Payment ${payment._id} failed. Error: ${errorMessage}. Requires attention.`
          },
          relatedData: { 
            payment: payment._id,
            order: payment.order?._id 
          },
          priority: 'high',
          channels: ['in_app', 'email'],
          metadata: {
            icon: '‚ö†Ô∏è',
            color: '#F59E0B',
            actionUrl: `/admin/payments/${payment._id}`,
            actionText: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞—Ç–µ–∂'
          }
        }

        await Notification.create(adminNotification)
      }

      console.log('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã')

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–µ –ø–ª–∞—Ç–µ–∂–∞:', error)
    }
  }

  /**
   * üîî –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –û –í–û–ó–í–†–ê–¢–ï
   */
  static async sendRefundNotifications(payment, refundAmount) {
    try {
      const Notification = require('../models/Notification')
      const User = require('../models/User')

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
      const customerNotification = {
        recipient: payment.user._id,
        type: 'customer_payment_refunded',
        title: {
          ru: '–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤',
          uz: 'Pulni qaytarish',
          en: 'Refund processed'
        },
        message: {
          ru: `–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—É–º–º—É ${refundAmount} —Å—É–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –î–µ–Ω—å–≥–∏ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à —Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.`,
          uz: `${refundAmount} so'm miqdoridagi pulni qaytarish qayta ishlandi. Pullar 3-5 ish kunida hisobingizga tushadi.`,
          en: `Refund of ${refundAmount} UZS has been processed. Funds will be credited to your account within 3-5 business days.`
        },
        relatedData: { 
          payment: payment._id,
          order: payment.order?._id 
        },
        priority: 'normal',
        channels: ['in_app', 'email'],
        metadata: {
          icon: 'üí∞',
          color: '#10B981',
          actionUrl: `/orders/${payment.order?._id}`,
          actionText: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑'
        }
      }

      await Notification.create(customerNotification)

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
      const admins = await User.find({ role: 'admin', isActive: true })
      
      for (const admin of admins) {
        const adminNotification = {
          recipient: admin._id,
          type: 'admin_payment_refunded',
          title: {
            ru: '–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
            uz: 'Pulni qaytarish qayta ishlandi',
            en: 'Refund processed'
          },
          message: {
            ru: `–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—É–º–º—É ${refundAmount} —Å—É–º –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ ${payment._id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω.`,
            uz: `${refundAmount} so'm miqdoridagi pulni qaytarish ${payment._id} to'lov uchun qayta ishlandi.`,
            en: `Refund of ${refundAmount} UZS for payment ${payment._id} has been processed.`
          },
          relatedData: { 
            payment: payment._id,
            order: payment.order?._id 
          },
          priority: 'normal',
          channels: ['in_app', 'email'],
          metadata: {
            icon: 'üí∞',
            color: '#10B981',
            actionUrl: `/admin/payments/${payment._id}`,
            actionText: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞—Ç–µ–∂'
          }
        }

        await Notification.create(adminNotification)
      }

      console.log('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã')

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤–æ–∑–≤—Ä–∞—Ç–µ:', error)
    }
  }

  /**
   * üîê –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ò WEBHOOK
   */
  static verifyWebhookSignature(payload, signature) {
    try {
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è –¥–µ–º–æ
      console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook (–¥–µ–º–æ —Ä–µ–∂–∏–º)')
      return true
      
      // –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:
      // const secret = process.env.WEBHOOK_SECRET
      // const expectedSignature = crypto
      //   .createHmac('sha256', secret)
      //   .update(JSON.stringify(payload))
      //   .digest('hex')
      // return signature === expectedSignature
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ webhook:', error)
      return false
    }
  }

  /**
   * üìä –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê WEBHOOK
   */
  static async getWebhookStatus(req, res) {
    try {
      res.status(200).json({
        success: true,
        message: 'Webhook system is working',
        timestamp: new Date().toISOString(),
        endpoints: {
          payment: '/api/v1/webhooks/payment',
          order: '/api/v1/webhooks/order'
        }
      })
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ webhook:', error)
      res.status(500).json({
        success: false,
        message: 'Internal server error'
      })
    }
  }
}

module.exports = WebhookController

