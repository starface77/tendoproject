const { validationResult } = require('express-validator');
const Contact = require('../models/Contact');
const Notification = require('../models/Notification');

/**
 * üìû –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
 * @route   POST /api/v1/contacts
 * @access  Public
 */
const createContactMessage = async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        error: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        details: errors.array()
      });
    }

    const { name, email, subject, message } = req.body;

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const contactMessage = new Contact({
      name,
      email,
      subject,
      message,
      ip: req.ip,
      userAgent: req.get('User-Agent')
    });

    await contactMessage.save();

    console.log(`üìß –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${name} (${email}): ${subject}`);

    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    try {
      const User = require('../models/User');
      const adminUsers = await User.find({ role: 'admin' });

      const adminNotifications = adminUsers.map(admin => ({
        recipient: admin._id,
        type: 'admin_new_message',
        title: {
          ru: '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞',
          uz: 'Mijozdan yangi xabar',
          en: 'New message from customer'
        },
        message: {
          ru: `${contactMessage.name} (${contactMessage.email}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: "${contactMessage.subject}"`,
          uz: `${contactMessage.name} (${contactMessage.email}) quyidagi mavzu bo'yicha xabar yubordi: "${contactMessage.subject}"`,
          en: `${contactMessage.name} (${contactMessage.email}) sent message about: "${contactMessage.subject}"`
        },
        priority: 'normal',
        channels: ['in_app', 'email'],
        relatedData: { contact: contactMessage._id },
        metadata: {
          actionUrl: `/admin/contacts/${contactMessage._id}`,
          actionText: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å'
        }
      }));

      await Notification.insertMany(adminNotifications);
      console.log(`üìß –°–æ–∑–¥–∞–Ω–æ ${adminNotifications.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–æ–≤`);
    } catch (notificationError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', notificationError);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    }

    res.status(201).json({
      success: true,
      message: '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
      data: {
        id: contactMessage._id,
        createdAt: contactMessage.createdAt
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
};

/**
 * üìã –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
 * @route   GET /api/v1/contacts
 * @access  Private (Admin only)
 */
const getContactMessages = async (req, res) => {
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 20;
    const status = req.query.status;
    const skip = (page - 1) * limit;

    // –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä
    const filter = {};
    if (status && status !== 'all') {
      filter.status = status;
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    const messages = await Contact.find(filter)
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(limit)
      .select('-__v');

    // –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    const total = await Contact.countDocuments(filter);

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const stats = await Contact.aggregate([
      { $group: { _id: '$status', count: { $sum: 1 } } }
    ]);

    const statsObj = stats.reduce((acc, stat) => {
      acc[stat._id] = stat.count;
      return acc;
    }, { new: 0, read: 0, replied: 0, closed: 0 });

    res.status(200).json({
      success: true,
      data: {
        messages,
        pagination: {
          page,
          limit,
          total,
          pages: Math.ceil(total / limit)
        },
        stats: statsObj
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
};

/**
 * üìù –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
 * @route   PATCH /api/v1/contacts/:id/status
 * @access  Private (Admin only)
 */
const updateContactStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const { status } = req.body;

    const errors = require('express-validator').validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        error: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        details: errors.array()
      });
    }

    const contact = await Contact.findByIdAndUpdate(
      id,
      {
        status,
        updatedAt: new Date(),
        ...(status === 'read' && { readAt: new Date() }),
        ...(status === 'replied' && { repliedAt: new Date(), repliedBy: req.user._id })
      },
      { new: true }
    );

    if (!contact) {
      return res.status(404).json({
        success: false,
        error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    res.status(200).json({
      success: true,
      message: '–°—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω',
      data: contact
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
};

/**
 * üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
 * @route   POST /api/v1/contacts/:id/reply
 * @access  Private (Admin only)
 */
const replyToContact = async (req, res) => {
  try {
    const { id } = req.params;
    const { replyMessage } = req.body;

    const errors = require('express-validator').validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        error: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        details: errors.array()
      });
    }

    const contact = await Contact.findByIdAndUpdate(
      id,
      {
        status: 'replied',
        repliedAt: new Date(),
        repliedBy: req.user._id,
        replyMessage,
        updatedAt: new Date()
      },
      { new: true }
    );

    if (!contact) {
      return res.status(404).json({
        success: false,
        error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email (–µ—Å–ª–∏ –æ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)
      const User = require('../models/User');
      let user = await User.findOne({ email: contact.email });

      if (user) {
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const notification = new Notification({
          recipient: user._id,
          type: 'customer_support_reply',
          title: Notification.getNotificationTitle('customer_support_reply', 'customer'),
          message: Notification.getNotificationMessage('customer_support_reply', 'customer', {
            subject: contact.subject,
            replyMessage: replyMessage
          }),
          priority: 'normal',
          channels: ['in_app', 'email'],
          relatedData: { contact: contact._id },
          metadata: {
            actionUrl: '/messages',
            actionText: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å'
          }
        });

        await notification.save();
        console.log(`üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${contact.email}`);
      } else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        console.log(`üìß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${contact.email} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ`);
      }
    } catch (notificationError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', notificationError);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    }

    // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å email –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    console.log(`üìß –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${contact.email}: ${replyMessage}`);

    res.status(200).json({
      success: true,
      message: '–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      data: contact
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
};

module.exports = {
  createContactMessage,
  getContactMessages,
  updateContactStatus,
  replyToContact
};
