const SellerApplication = require('../models/SellerApplication');
const User = require('../models/User');
const Seller = require('../models/Seller');

// @desc    Create seller application
// @route   POST /api/v1/seller-applications
// @access  Public
exports.createApplication = async (req, res) => {
  try {
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞...');
    console.log('–î–∞–Ω–Ω—ã–µ:', req.body);
    
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞ (–µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
    const userId = req.user ? req.user.id : null;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞—è–≤–∫–∞ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userId) {
      const existingApp = await SellerApplication.findOne({ userId });
      if (existingApp) {
        return res.status(400).json({
          success: false,
          message: '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞'
        });
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
    const applicationData = {
      status: 'pending',
      businessInfo: {
        companyName: req.body.businessName || req.body.companyName,
        registrationNumber: req.body.registrationNumber || 'TEMP-' + Date.now(),
        taxId: req.body.taxId || 'TAX-' + Date.now(),
        address: {
          street: req.body.address || '',
          city: req.body.city || '–¢–∞—à–∫–µ–Ω—Ç',
          state: req.body.region || '–¢–∞—à–∫–µ–Ω—Ç',
          postalCode: req.body.postalCode || '100000',
          country: '–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω'
        },
        description: req.body.businessDescription || req.body.description || '',
        website: req.body.website || '',
        phone: req.body.businessPhone || req.body.phone
      },
      contactInfo: {
        contactPerson: req.body.contactName || req.body.fullName,
        position: req.body.position || '–î–∏—Ä–µ–∫—Ç–æ—Ä',
        email: req.body.email,
        phone: req.body.phone
      },
      documents: {
        businessLicense: req.body.businessLicense || '/uploads/placeholder.pdf',
        taxCertificate: req.body.taxCertificate || '/uploads/placeholder.pdf',
        identityDocument: req.body.identityDocument || '/uploads/placeholder.pdf',
        bankStatement: req.body.bankStatement || ''
      },
      productCategories: req.body.categories || req.body.productCategories || ['–†–∞–∑–Ω–æ–µ'],
      expectedMonthlyRevenue: parseInt(req.body.expectedRevenue) || 0,
      salesExperience: req.body.experience || 'none',
      additionalInfo: req.body.additionalInfo || req.body.comments || ''
    };
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ ID
    if (userId) {
      applicationData.userId = userId;
    } else {
      // –î–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º userId
      // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, –Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑—Ä–µ—à–∞–µ–º
      console.log('‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ');
    }
    
    const application = new SellerApplication(applicationData);
    await application.save();
    
    console.log('‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', application._id);
    
    res.status(201).json({
      success: true,
      message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ',
      data: {
        id: application._id,
        status: application.status,
        createdAt: application.createdAt
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏',
      error: error.message
    });
  }
};

// @desc    Get all seller applications
// @route   GET /api/v1/admin/seller-applications
// @access  Private (Admin)
exports.getApplications = async (req, res) => {
  try {
  console.log('üìã –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤...');
  
  const page = parseInt(req.query.page, 10) || 1;
  const limit = parseInt(req.query.limit, 10) || 10;
  const status = req.query.status;
  
  // –°—Ç—Ä–æ–∏–º —Ñ–∏–ª—å—Ç—Ä
  let filter = {};
  if (status) {
    filter.status = status;
  }
  
  const startIndex = (page - 1) * limit;
  
  // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  const applications = await SellerApplication.find(filter)
    .populate('userId', 'username email avatar')
    .sort({ createdAt: -1 })
    .limit(limit)
    .skip(startIndex);
    
  const total = await SellerApplication.countDocuments(filter);
  
  // Pagination result
  const pagination = {};
  
  if (startIndex + limit < total) {
    pagination.next = {
      page: page + 1,
      limit
    };
  }
  
  if (startIndex > 0) {
    pagination.prev = {
      page: page - 1,
      limit
    };
  }
  
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${applications.length} –∑–∞—è–≤–æ–∫ –∏–∑ ${total}`);
  
  res.status(200).json({
    success: true,
    count: applications.length,
    total,
    pagination,
    data: applications
  });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫'
    });
  }
};

// @desc    Get single seller application
// @route   GET /api/v1/admin/seller-applications/:id
// @access  Private (Admin)
exports.getApplication = async (req, res) => {
  try {
  const application = await SellerApplication.findById(req.params.id)
    .populate('userId', 'username email avatar phone createdAt');
    
  if (!application) {
    return res.status(404).json({
      success: false,
      message: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
    });
  }
  
  res.status(200).json({
    success: true,
    data: application
  });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏'
    });
  }
};

// @desc    Approve seller application
// @route   PUT /api/v1/admin/seller-applications/:id/approve
// @access  Private (Admin)
exports.approveApplication = async (req, res) => {
  try {
  console.log(`üü¢ –û–¥–æ–±—Ä—è–µ–º –∑–∞—è–≤–∫—É ${req.params.id}...`);
  
  const application = await SellerApplication.findById(req.params.id);
  
  if (!application) {
    return res.status(404).json({
      success: false,
      message: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
    });
  }
  
  if (application.status !== 'pending') {
    return res.status(400).json({
      success: false,
      message: '–ú–æ–∂–Ω–æ –æ–¥–æ–±—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "pending"'
    });
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
  application.status = 'approved';
  application.processedAt = new Date();
  application.processedBy = req.user._id;
  
  if (req.body.notes) {
    application.adminNotes = req.body.notes;
  }
  
  await application.save();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –¥–µ–ª–∞–µ–º –µ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–æ–º
  const user = await User.findById(application.userId);
  if (user) {
    user.role = 'seller';
    user.sellerProfile = {
      businessName: application.businessInfo.companyName,
      description: application.businessInfo.description || '',
      isApproved: true,
      approvedAt: new Date(),
      approvedBy: req.user._id,
      commissionRate: 0.05, // 5% –∫–æ–º–∏—Å—Å–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      status: 'active'
    };
    
    await user.save();
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username} —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–¥–∞–≤–µ—Ü`);
  }
  
  // –ú–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ)
  
  res.status(200).json({
    success: true,
    message: '–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞',
    data: application
  });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏'
    });
  }
};

// @desc    Reject seller application
// @route   PUT /api/v1/admin/seller-applications/:id/reject
// @access  Private (Admin)
exports.rejectApplication = async (req, res) => {
  try {
  console.log(`üî¥ –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É ${req.params.id}...`);
  
  const application = await SellerApplication.findById(req.params.id);
  
  if (!application) {
    return res.status(404).json({
      success: false,
      message: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
    });
  }
  
  if (application.status !== 'pending') {
    return res.status(400).json({
      success: false,
      message: '–ú–æ–∂–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "pending"'
    });
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
  application.status = 'rejected';
  application.processedAt = new Date();
  application.processedBy = req.user._id;
  
  if (req.body.reason) {
    application.rejectionReason = req.body.reason;
  }
  
  if (req.body.notes) {
    application.adminNotes = req.body.notes;
  }
  
  await application.save();
  
  // –ú–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ)
  
  res.status(200).json({
    success: true,
    message: '–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞',
    data: application
  });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏'
    });
  }
};

// @desc    Request additional documents
// @route   PUT /api/v1/admin/seller-applications/:id/request-documents
// @access  Private (Admin)
exports.requestDocuments = async (req, res) => {
  try {
  console.log(`üìÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∑–∞—è–≤–∫–∏ ${req.params.id}...`);
  
  const application = await SellerApplication.findById(req.params.id);
  
  if (!application) {
    return res.status(404).json({
      success: false,
      message: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
    });
  }
  
  if (application.status !== 'pending') {
    return res.status(400).json({
      success: false,
      message: '–ú–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "pending"'
    });
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
  application.status = 'documents_required';
  application.processedAt = new Date();
  application.processedBy = req.user._id;
  
  if (req.body.requiredDocuments) {
    application.requiredDocuments = req.body.requiredDocuments;
  }
  
  if (req.body.notes) {
    application.adminNotes = req.body.notes;
  }
  
  await application.save();
  
  // –ú–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ)
  
  res.status(200).json({
    success: true,
    message: '–ó–∞–ø—Ä–æ—à–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã',
    data: application
  });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'
    });
  }
};

// @desc    Get seller applications statistics
// @route   GET /api/v1/admin/seller-applications/stats
// @access  Private (Admin)
exports.getApplicationStats = async (req, res) => {
  try {
  console.log('üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞—è–≤–æ–∫...');
  
  // –ê–≥—Ä–µ–≥–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const stats = await SellerApplication.aggregate([
    {
      $group: {
        _id: '$status',
        count: { $sum: 1 }
      }
    }
  ]);
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
  const today = new Date();
  const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
  const monthAgo = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);
  
  const [
    totalCount,
    weekCount,
    monthCount,
    pendingCount
  ] = await Promise.all([
    SellerApplication.countDocuments(),
    SellerApplication.countDocuments({ createdAt: { $gte: weekAgo } }),
    SellerApplication.countDocuments({ createdAt: { $gte: monthAgo } }),
    SellerApplication.countDocuments({ status: 'pending' })
  ]);
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
  const statusStats = {
    pending: 0,
    approved: 0,
    rejected: 0,
    documents_required: 0
  };
  
  stats.forEach(stat => {
    if (statusStats.hasOwnProperty(stat._id)) {
      statusStats[stat._id] = stat.count;
    }
  });
  
  const result = {
    total: totalCount,
    byStatus: statusStats,
    recent: {
      thisWeek: weekCount,
      thisMonth: monthCount
    },
    pending: pendingCount
  };
  
  console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫ –ø–æ–ª—É—á–µ–Ω–∞:', result);
  
  res.status(200).json({
    success: true,
    data: result
  });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
    });
  }
};

// @desc    Get current user's seller application status
// @route   GET /api/v1/seller-applications/status
// @access  Private (Auth)
exports.getMyApplicationStatus = async (req, res) => {
  try {
    if (!req.user) {
      return res.status(401).json({ success: false, message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
    }

    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞ ‚Äî —Å—á–∏—Ç–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º
    const existingSeller = await Seller.findOne({ userId: req.user._id }).select('_id status').lean();
    if (existingSeller) {
      return res.json({ success: true, status: 'approved', data: { sellerStatus: existingSeller.status } });
    }

    // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const lastApplication = await SellerApplication
      .findOne({ userId: req.user._id })
      .sort({ createdAt: -1 })
      .select('status createdAt updatedAt processedAt rejectionReason requiredDocuments')
      .lean();

    if (!lastApplication) {
      return res.json({ success: true, status: 'none' });
    }

    return res.json({ success: true, status: lastApplication.status, data: lastApplication });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏:', error.message);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏' });
  }
};