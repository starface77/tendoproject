const { ObjectId, MongoClient } = require("mongodb"); const createOrder = async (req, res) => { try { console.log("🛒 ORDER START"); const client = new MongoClient(process.env.MONGO_URI || "mongodb://localhost:27017/tendo"); await client.connect(); const db = client.db("tendo"); const orderId = new ObjectId(); const orderData = { _id: orderId, orderNumber: `ORD-${Date.now()}`, items: req.body.items, totalAmount: req.body.totalAmount, status: "pending", createdAt: new Date(), paymentStatus: "pending" }; const enrichedItems = []; for (const item of req.body.items) { try { const product = await db.collection("products").findOne({ _id: new ObjectId(item.productId) }); const enrichedItem = { ...item, product: item.productId, productName: product?.name || "Unknown Product", seller: product?.seller || null }; enrichedItems.push(enrichedItem); if (product?.seller) { const sellerOrderData = { _id: new ObjectId(), mainOrderId: orderId, orderNumber: orderData.orderNumber, seller: product.seller, items: [enrichedItem], totalAmount: item.price * item.quantity, status: "pending", createdAt: new Date(), paymentStatus: "pending" }; await db.collection("seller_orders").insertOne(sellerOrderData); console.log("📦 Seller order created"); } } catch (error) { enrichedItems.push(item); } } orderData.items = enrichedItems; await db.collection("orders").insertOne(orderData); await client.close(); res.json({ success: true, data: orderData }); console.log("✅ ORDER SAVED:", orderId); } catch (error) { console.log("❌ ORDER ERROR:", error); res.status(500).json({ success: false, error: error.message }); } }; const getOrders = async (req, res) => { try { const client = new MongoClient(process.env.MONGO_URI || "mongodb://localhost:27017/tendo"); await client.connect(); const db = client.db("tendo"); const orders = await db.collection("orders").find({}).sort({ createdAt: -1 }).limit(10).toArray(); await client.close(); res.json({ success: true, data: orders, total: orders.length }); } catch (error) { res.status(500).json({ success: false, error: error.message }); } }; module.exports = { createOrder, getOrders };
