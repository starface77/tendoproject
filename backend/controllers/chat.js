const Chat = require('../models/Chat');
const User = require('../models/User');
const Seller = require('../models/Seller');
const Product = require('../models/Product');

// @desc    –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç –º–µ–∂–¥—É –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–º
// @route   POST /api/v1/chats/start
// @access  Private (Customer)
const startChat = async (req, res) => {
  try {
    const { sellerId, productId, initialMessage } = req.body;
    const customerId = req.user.id;

    console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞:', { customerId, sellerId, productId });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞
    const seller = await Seller.findById(sellerId);
    if (!seller) {
      return res.status(404).json({
        success: false,
        error: '–ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    const customer = await User.findById(customerId);
    if (!customer) {
      return res.status(404).json({
        success: false,
        error: '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
    let product = null;
    if (productId) {
      product = await Product.findById(productId);
      if (!product) {
        return res.status(404).json({
          success: false,
          error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }
    }

    // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç
    let chat = await Chat.findChatByParticipants(customerId, sellerId, productId);

    // –ï—Å–ª–∏ —á–∞—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    if (!chat) {
      const chatData = {
        customer: {
          id: customer._id,
          name: customer.firstName + ' ' + customer.lastName,
          email: customer.email
        },
        seller: {
          id: seller._id,
          businessName: seller.businessName,
          email: seller.email
        }
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (product) {
        chatData.product = {
          id: product._id,
          name: product.name,
          image: product.images && product.images[0] ? product.images[0] : null
        };
      }

      chat = new Chat(chatData);
      await chat.save();
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (initialMessage && initialMessage.trim()) {
      await chat.addMessage('customer', customer.firstName + ' ' + customer.lastName, initialMessage.trim());
    }

    res.status(200).json({
      success: true,
      data: {
        chatId: chat._id,
        chat: chat
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞'
    });
  }
};

// @desc    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
// @route   POST /api/v1/chats/:chatId/messages
// @access  Private (Customer/Seller)
const sendMessage = async (req, res) => {
  try {
    const { chatId } = req.params;
    const { content, attachments = [] } = req.body;
    const userId = req.user.id;
    const userType = req.user.role || 'customer'; // customer –∏–ª–∏ seller

    console.log('üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', { chatId, userId, userType, content });

    if (!content || content.trim().length === 0) {
      return res.status(400).json({
        success: false,
        error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
      });
    }

    // –ù–∞—Ö–æ–¥–∏–º —á–∞—Ç
    const chat = await Chat.findById(chatId);
    if (!chat) {
      return res.status(404).json({
        success: false,
        error: '–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    const isCustomer = chat.customer.id.toString() === userId;
    const isSeller = chat.seller.id.toString() === userId;
    
    if (!isCustomer && !isSeller) {
      return res.status(403).json({
        success: false,
        error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É'
      });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    const senderType = isCustomer ? 'customer' : 'seller';
    const senderName = isCustomer ? chat.customer.name : chat.seller.businessName;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await chat.addMessage(senderType, senderName, content.trim(), attachments);

    res.status(200).json({
      success: true,
      data: {
        message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
        chat: chat
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è'
    });
  }
};

// @desc    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
// @route   GET /api/v1/chats/customer
// @access  Private (Customer)
const getCustomerChats = async (req, res) => {
  try {
    const customerId = req.user.id;
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 20;

    const chats = await Chat.getCustomerChats(customerId, page, limit);

    res.status(200).json({
      success: true,
      data: {
        chats: chats,
        pagination: {
          page,
          limit,
          total: chats.length
        }
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤'
    });
  }
};

// @desc    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞
// @route   GET /api/v1/chats/seller
// @access  Private (Seller)
const getSellerChats = async (req, res) => {
  try {
    const sellerId = req.user.id;
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 20;

    const chats = await Chat.getSellerChats(sellerId, page, limit);

    res.status(200).json({
      success: true,
      data: {
        chats: chats,
        pagination: {
          page,
          limit,
          total: chats.length
        }
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤'
    });
  }
};

// @desc    –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
// @route   GET /api/v1/chats/:chatId
// @access  Private (Customer/Seller)
const getChat = async (req, res) => {
  try {
    const { chatId } = req.params;
    const userId = req.user.id;
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 50;

    const chat = await Chat.findById(chatId);
    if (!chat) {
      return res.status(404).json({
        success: false,
        error: '–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    const isCustomer = chat.customer.id.toString() === userId;
    const isSeller = chat.seller.id.toString() === userId;
    
    if (!isCustomer && !isSeller) {
      return res.status(403).json({
        success: false,
        error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É'
      });
    }

    // –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    const readerType = isCustomer ? 'customer' : 'seller';
    await chat.markAsRead(readerType);

    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
    const messagesTotal = chat.messages.length;
    const skip = Math.max(0, messagesTotal - (page * limit));
    const paginatedMessages = chat.messages.slice(skip, skip + limit);

    res.status(200).json({
      success: true,
      data: {
        chat: {
          ...chat.toObject(),
          messages: paginatedMessages
        },
        pagination: {
          page,
          limit,
          total: messagesTotal,
          hasMore: skip > 0
        }
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–∞'
    });
  }
};

// @desc    –ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç
// @route   PUT /api/v1/chats/:chatId/close
// @access  Private (Customer/Seller)
const closeChat = async (req, res) => {
  try {
    const { chatId } = req.params;
    const userId = req.user.id;

    const chat = await Chat.findById(chatId);
    if (!chat) {
      return res.status(404).json({
        success: false,
        error: '–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    const isCustomer = chat.customer.id.toString() === userId;
    const isSeller = chat.seller.id.toString() === userId;
    
    if (!isCustomer && !isSeller) {
      return res.status(403).json({
        success: false,
        error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É'
      });
    }

    chat.status = 'closed';
    await chat.save();

    res.status(200).json({
      success: true,
      data: {
        message: '–ß–∞—Ç –∑–∞–∫—Ä—ã—Ç',
        chat: chat
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞'
    });
  }
};

module.exports = {
  startChat,
  sendMessage,
  getCustomerChats,
  getSellerChats,
  getChat,
  closeChat
};



