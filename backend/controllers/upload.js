const fs = require('fs');
const path = require('path');

/**
 * üìÅ –ö–û–ù–¢–†–û–õ–õ–ï–† –ó–ê–ì–†–£–ó–ö–ò –§–ê–ô–õ–û–í
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–æ–π –∏ —É–¥–∞–ª–µ–Ω–∏–µ–º —Ñ–∞–π–ª–æ–≤
 */

// @desc    –ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
// @route   POST /api/v1/upload/single
// @access  Private
const uploadSingle = async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({
        success: false,
        error: '–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω'
      });
    }

    const file = req.file;
    const baseUrl = `${req.protocol}://${req.get('host')}`;
    
    res.status(200).json({
      success: true,
      message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω',
      data: {
        filename: file.filename,
        originalName: file.originalname,
        mimetype: file.mimetype,
        size: file.size,
        url: `${baseUrl}/uploads/${path.basename(path.dirname(file.path))}/${file.filename}`,
        uploadedAt: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('Upload Single Error:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞'
    });
  }
};

// @desc    –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
// @route   POST /api/v1/upload/multiple
// @access  Private
const uploadMultiple = async (req, res) => {
  try {
    if (!req.files || req.files.length === 0) {
      return res.status(400).json({
        success: false,
        error: '–§–∞–π–ª—ã –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'
      });
    }

    const files = req.files;
    const baseUrl = `${req.protocol}://${req.get('host')}`;
    
    const uploadedFiles = files.map(file => ({
      filename: file.filename,
      originalName: file.originalname,
      mimetype: file.mimetype,
      size: file.size,
      url: `${baseUrl}/uploads/${path.basename(path.dirname(file.path))}/${file.filename}`,
      uploadedAt: new Date().toISOString()
    }));

    res.status(200).json({
      success: true,
      message: `${files.length} —Ñ–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ`,
      count: files.length,
      data: uploadedFiles
    });

  } catch (error) {
    console.error('Upload Multiple Error:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤'
    });
  }
};

// @desc    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
// @route   GET /api/v1/upload/info/:filename
// @access  Private
const getFileInfo = async (req, res) => {
  try {
    const filename = req.params.filename;
    
    // –ò—â–µ–º —Ñ–∞–π–ª –≤–æ –≤—Å–µ—Ö –ø–∞–ø–∫–∞—Ö uploads
    const uploadPaths = [
      'uploads/products/',
      'uploads/categories/',
      'uploads/users/',
      'uploads/reviews/',
      'uploads/misc/'
    ];

    let filePath = null;
    let stats = null;

    for (const uploadPath of uploadPaths) {
      const fullPath = path.join(__dirname, '..', uploadPath, filename);
      if (fs.existsSync(fullPath)) {
        filePath = fullPath;
        stats = fs.statSync(fullPath);
        break;
      }
    }

    if (!filePath) {
      return res.status(404).json({
        success: false,
        error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    const baseUrl = `${req.protocol}://${req.get('host')}`;
    const directory = path.basename(path.dirname(filePath));
    
    res.status(200).json({
      success: true,
      data: {
        filename,
        path: path.basename(path.dirname(filePath)),
        size: stats.size,
        created: stats.birthtime,
        modified: stats.mtime,
        url: `${baseUrl}/uploads/${directory}/${filename}`
      }
    });

  } catch (error) {
    console.error('Get File Info Error:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ'
    });
  }
};

// @desc    –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª
// @route   DELETE /api/v1/upload/:filename
// @access  Private (Admin)
const deleteFile = async (req, res) => {
  try {
    const filename = req.params.filename;
    
    // –ò—â–µ–º —Ñ–∞–π–ª –≤–æ –≤—Å–µ—Ö –ø–∞–ø–∫–∞—Ö uploads
    const uploadPaths = [
      'uploads/products/',
      'uploads/categories/',
      'uploads/users/',
      'uploads/reviews/',
      'uploads/misc/'
    ];

    let filePath = null;

    for (const uploadPath of uploadPaths) {
      const fullPath = path.join(__dirname, '..', uploadPath, filename);
      if (fs.existsSync(fullPath)) {
        filePath = fullPath;
        break;
      }
    }

    if (!filePath) {
      return res.status(404).json({
        success: false,
        error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
    fs.unlinkSync(filePath);

    res.status(200).json({
      success: true,
      message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
    });

  } catch (error) {
    console.error('Delete File Error:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞'
    });
  }
};

// @desc    –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ (—É—Ç–∏–ª–∏—Ç–∞)
// @access  Private (Cron job or manual)
const cleanupOldFiles = async () => {
  try {
    const uploadPaths = [
      'uploads/products/',
      'uploads/categories/',
      'uploads/users/',
      'uploads/reviews/',
      'uploads/misc/'
    ];

    const maxAge = 30 * 24 * 60 * 60 * 1000; // 30 –¥–Ω–µ–π
    const now = Date.now();
    let deletedCount = 0;

    for (const uploadPath of uploadPaths) {
      const fullPath = path.join(__dirname, '..', uploadPath);
      
      if (!fs.existsSync(fullPath)) continue;

      const files = fs.readdirSync(fullPath);
      
      for (const file of files) {
        const filePath = path.join(fullPath, file);
        const stats = fs.statSync(filePath);
        
        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
        if (now - stats.mtime.getTime() > maxAge) {
          fs.unlinkSync(filePath);
          deletedCount++;
          console.log(`Deleted old file: ${file}`);
        }
      }
    }

    console.log(`Cleanup completed. Deleted ${deletedCount} old files.`);
    return { success: true, deletedCount };

  } catch (error) {
    console.error('Cleanup Error:', error);
    return { success: false, error: error.message };
  }
};

// @desc    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∑–æ–∫
// @access  Private (Admin)
const getUploadStats = async () => {
  try {
    const uploadPaths = [
      'uploads/products/',
      'uploads/categories/',
      'uploads/users/',
      'uploads/reviews/',
      'uploads/misc/'
    ];

    const stats = {};
    let totalFiles = 0;
    let totalSize = 0;

    for (const uploadPath of uploadPaths) {
      const fullPath = path.join(__dirname, '..', uploadPath);
      const folderName = path.basename(uploadPath);
      
      stats[folderName] = {
        files: 0,
        size: 0
      };

      if (!fs.existsSync(fullPath)) continue;

      const files = fs.readdirSync(fullPath);
      
      for (const file of files) {
        const filePath = path.join(fullPath, file);
        const fileStats = fs.statSync(filePath);
        
        stats[folderName].files++;
        stats[folderName].size += fileStats.size;
        totalFiles++;
        totalSize += fileStats.size;
      }
    }

    return {
      success: true,
      data: {
        total: {
          files: totalFiles,
          size: totalSize,
          sizeFormatted: formatFileSize(totalSize)
        },
        byCategory: Object.keys(stats).map(category => ({
          category,
          files: stats[category].files,
          size: stats[category].size,
          sizeFormatted: formatFileSize(stats[category].size)
        }))
      }
    };

  } catch (error) {
    console.error('Upload Stats Error:', error);
    return { success: false, error: error.message };
  }
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
const formatFileSize = (bytes) => {
  if (bytes === 0) return '0 Bytes';
  
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
const ensureUploadDirectories = () => {
  const uploadPaths = [
    'uploads/products/',
    'uploads/categories/',
    'uploads/users/',
    'uploads/reviews/',
    'uploads/misc/'
  ];

  for (const uploadPath of uploadPaths) {
    const fullPath = path.join(__dirname, '..', uploadPath);
    if (!fs.existsSync(fullPath)) {
      fs.mkdirSync(fullPath, { recursive: true });
      console.log(`Created upload directory: ${uploadPath}`);
    }
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–ø–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
ensureUploadDirectories();

module.exports = {
  uploadSingle,
  uploadMultiple,
  getFileInfo,
  deleteFile,
  cleanupOldFiles,
  getUploadStats
};
