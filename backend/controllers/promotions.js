/**
 * üéÅ –ö–û–ù–¢–†–û–õ–õ–ï–† –ü–†–û–ú–û–ê–ö–¶–ò–ô –ò –ü–†–û–ú–û–ö–û–î–û–í
 * –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤, —Å–∫–∏–¥–æ–∫ –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
 */

const Promotion = require('../models/Promotion');
const Order = require('../models/Order');
const User = require('../models/User');
const { validationResult } = require('express-validator');

/**
 * @desc    –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–º–æ–∞–∫—Ü–∏–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
 * @route   GET /api/v1/promotions
 * @access  Private (Admin)
 */
const getPromotions = async (req, res) => {
  try {
    const { 
      page = 1, 
      limit = 20, 
      status, 
      type, 
      search,
      sortBy = '-createdAt'
    } = req.query;

    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    const query = {};

    if (status) query.status = status;
    if (type) query.type = type;
    
    if (search) {
      query.$or = [
        { code: { $regex: search, $options: 'i' } },
        { 'name.ru': { $regex: search, $options: 'i' } },
        { 'name.uz': { $regex: search, $options: 'i' } },
        { 'name.en': { $regex: search, $options: 'i' } }
      ];
    }

    const limitNum = Math.min(parseInt(limit), 100);
    const pageNum = parseInt(page);
    const skip = (pageNum - 1) * limitNum;

    const [promotions, total] = await Promise.all([
      Promotion.find(query)
        .populate('createdBy', 'firstName lastName')
        .populate('updatedBy', 'firstName lastName')
        .sort(sortBy)
        .skip(skip)
        .limit(limitNum)
        .lean(),
      Promotion.countDocuments(query)
    ]);

    res.json({
      success: true,
      count: promotions.length,
      total,
      pagination: {
        page: pageNum,
        limit: limitNum,
        pages: Math.ceil(total / limitNum)
      },
      data: promotions
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∞–∫—Ü–∏–π:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∞–∫—Ü–∏–π',
      message: error.message
    });
  }
};

/**
 * @desc    –ü–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∞–∫—Ü–∏–∏
 * @route   GET /api/v1/promotions/public
 * @access  Public
 */
const getPublicPromotions = async (req, res) => {
  try {
    const { limit = 10 } = req.query;

    const promotions = await Promotion.findActivePromotions()
      .find({ 'settings.public': true })
      .select('name code type discount validUntil conditions.minOrderAmount')
      .sort({ 'settings.priority': -1, 'analytics.successes': -1 })
      .limit(parseInt(limit))
      .lean();

    res.json({
      success: true,
      data: promotions
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω—ã—Ö –ø—Ä–æ–º–æ–∞–∫—Ü–∏–π:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∞–∫—Ü–∏–π'
    });
  }
};

/**
 * @desc    –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∞–∫—Ü–∏—é
 * @route   POST /api/v1/promotions
 * @access  Private (Admin)
 */
const createPromotion = async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        error: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        details: errors.array()
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞
    const existingPromo = await Promotion.findOne({ 
      code: req.body.code.toUpperCase() 
    });

    if (existingPromo) {
      return res.status(400).json({
        success: false,
        error: '–ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
      });
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ–∞–∫—Ü–∏—é
    const promotionData = {
      ...req.body,
      code: req.body.code.toUpperCase(),
      createdBy: req.user._id
    };

    const promotion = new Promotion(promotionData);
    await promotion.save();

    await promotion.populate('createdBy', 'firstName lastName');

    res.status(201).json({
      success: true,
      message: '–ü—Ä–æ–º–æ–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
      data: promotion
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∞–∫—Ü–∏–∏:', error);
    
    if (error.name === 'ValidationError') {
      const errors = Object.values(error.errors).map(err => err.message);
      return res.status(400).json({
        success: false,
        error: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
        details: errors
      });
    }
    
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∞–∫—Ü–∏–∏',
      message: error.message
    });
  }
};

/**
 * @desc    –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–º–æ–∞–∫—Ü–∏—é
 * @route   PUT /api/v1/promotions/:id
 * @access  Private (Admin)
 */
const updatePromotion = async (req, res) => {
  try {
    const promotion = await Promotion.findById(req.params.id);

    if (!promotion) {
      return res.status(404).json({
        success: false,
        error: '–ü—Ä–æ–º–æ–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    // –ï—Å–ª–∏ –º–µ–Ω—è–µ—Ç—Å—è –∫–æ–¥, –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    if (req.body.code && req.body.code.toUpperCase() !== promotion.code) {
      const existingPromo = await Promotion.findOne({ 
        code: req.body.code.toUpperCase(),
        _id: { $ne: req.params.id }
      });

      if (existingPromo) {
        return res.status(400).json({
          success: false,
          error: '–ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
        });
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    const updateData = {
      ...req.body,
      updatedBy: req.user._id
    };

    if (req.body.code) {
      updateData.code = req.body.code.toUpperCase();
    }

    const updatedPromotion = await Promotion.findByIdAndUpdate(
      req.params.id,
      updateData,
      { new: true, runValidators: true }
    ).populate('createdBy updatedBy', 'firstName lastName');

    res.json({
      success: true,
      message: '–ü—Ä–æ–º–æ–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
      data: updatedPromotion
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∞–∫—Ü–∏–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∞–∫—Ü–∏–∏',
      message: error.message
    });
  }
};

/**
 * @desc    –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∞–∫—Ü–∏—é
 * @route   DELETE /api/v1/promotions/:id
 * @access  Private (Admin)
 */
const deletePromotion = async (req, res) => {
  try {
    const promotion = await Promotion.findById(req.params.id);

    if (!promotion) {
      return res.status(404).json({
        success: false,
        error: '–ü—Ä–æ–º–æ–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
    promotion.status = 'discontinued';
    await promotion.save();

    res.json({
      success: true,
      message: '–ü—Ä–æ–º–æ–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∞–∫—Ü–∏–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∞–∫—Ü–∏–∏',
      message: error.message
    });
  }
};

/**
 * @desc    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
 * @route   POST /api/v1/promotions/validate
 * @access  Public
 */
const validatePromoCode = async (req, res) => {
  try {
    const { code, orderData } = req.body;
    const user = req.user; // –ú–æ–∂–µ—Ç –±—ã—Ç—å undefined –¥–ª—è –≥–æ—Å—Ç–µ–π

    if (!code) {
      return res.status(400).json({
        success: false,
        error: '–ö–æ–¥ –ø—Ä–æ–º–æ–∞–∫—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    console.log('üéÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞:', code);

    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–º–æ–∞–∫—Ü–∏—é
    const promotion = await Promotion.findByCode(code);

    if (!promotion) {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
      await Promotion.updateOne(
        { code: code.toUpperCase() },
        { $inc: { 'analytics.attempts': 1 } }
      );

      return res.status(404).json({
        success: false,
        error: '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'
      });
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    promotion.analytics.attempts += 1;
    promotion.analytics.views += 1;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    const validationResult = promotion.canUse(user, orderData);

    if (!validationResult.valid) {
      await promotion.save();
      return res.status(400).json({
        success: false,
        error: validationResult.reason
      });
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (promotion.conditions.newCustomersOnly && user) {
      const existingOrders = await Order.countDocuments({
        customer: user._id,
        status: { $in: ['delivered', 'confirmed'] }
      });

      if (existingOrders > 0) {
        await promotion.save();
        return res.status(400).json({
          success: false,
          error: '–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π'
        });
      }
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É
    let discountAmount = 0;
    let discountType = promotion.type;

    if (orderData) {
      discountAmount = promotion.calculateDiscount(orderData);
    }

    await promotion.save();

    res.json({
      success: true,
      data: {
        promotion: {
          id: promotion._id,
          code: promotion.code,
          name: promotion.name,
          type: promotion.type,
          discount: promotion.discount,
          description: promotion.description
        },
        discountAmount,
        discountType,
        savings: discountAmount,
        message: discountAmount > 0 
          ? `–°–∫–∏–¥–∫–∞ ${discountAmount} —Å—É–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!`
          : '–ü—Ä–æ–º–æ–∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω'
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞',
      message: error.message
    });
  }
};

/**
 * @desc    –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –∫ –∑–∞–∫–∞–∑—É
 * @route   POST /api/v1/promotions/apply
 * @access  Private
 */
const applyPromoCode = async (req, res) => {
  try {
    const { code, orderId } = req.body;
    const user = req.user;

    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑
    const order = await Order.findOne({
      _id: orderId,
      customer: user._id,
      status: 'pending'
    });

    if (!order) {
      return res.status(404).json({
        success: false,
        error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω'
      });
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–º–æ–∞–∫—Ü–∏—é
    const promotion = await Promotion.findByCode(code);

    if (!promotion) {
      return res.status(404).json({
        success: false,
        error: '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    const orderData = {
      subtotal: order.pricing.subtotal,
      shippingCost: order.pricing.shipping,
      items: order.items.map(item => ({
        productId: item.product,
        categoryId: item.productSnapshot?.categoryId,
        quantity: item.quantity,
        price: item.price
      }))
    };

    const validationResult = promotion.canUse(user, orderData);

    if (!validationResult.valid) {
      return res.status(400).json({
        success: false,
        error: validationResult.reason
      });
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É
    const discountAmount = promotion.calculateDiscount(orderData);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –∫ –∑–∞–∫–∞–∑—É
    order.promoCode = {
      code: promotion.code,
      type: promotion.type,
      value: promotion.discount.value,
      discount: discountAmount
    };

    order.pricing.discount = discountAmount;
    order.pricing.total = order.pricing.subtotal + order.pricing.shipping + order.pricing.tax - discountAmount;

    await order.save();

    // –û—Ç–º–µ—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    await promotion.use(user, order, discountAmount);

    res.json({
      success: true,
      message: `–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω! –°–∫–∏–¥–∫–∞: ${discountAmount} —Å—É–º`,
      data: {
        orderId: order._id,
        discountAmount,
        newTotal: order.pricing.total,
        promotion: {
          code: promotion.code,
          name: promotion.name
        }
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞',
      message: error.message
    });
  }
};

/**
 * @desc    –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø—Ä–æ–º–æ–∞–∫—Ü–∏–∏
 * @route   GET /api/v1/promotions/:id/analytics
 * @access  Private (Admin)
 */
const getPromotionAnalytics = async (req, res) => {
  try {
    const promotion = await Promotion.findById(req.params.id);

    if (!promotion) {
      return res.status(404).json({
        success: false,
        error: '–ü—Ä–æ–º–æ–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏–∑ –∑–∞–∫–∞–∑–æ–≤
    const orderStats = await Order.aggregate([
      {
        $match: {
          'promoCode.code': promotion.code
        }
      },
      {
        $group: {
          _id: null,
          totalOrders: { $sum: 1 },
          totalRevenue: { $sum: '$pricing.total' },
          totalSavings: { $sum: '$promoCode.discount' },
          avgOrderValue: { $avg: '$pricing.total' },
          uniqueCustomers: { $addToSet: '$customer' }
        }
      }
    ]);

    const stats = orderStats[0] || {
      totalOrders: 0,
      totalRevenue: 0,
      totalSavings: 0,
      avgOrderValue: 0,
      uniqueCustomers: []
    };

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
    const dailyStats = await Order.aggregate([
      {
        $match: {
          'promoCode.code': promotion.code,
          createdAt: { $gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) }
        }
      },
      {
        $group: {
          _id: {
            year: { $year: '$createdAt' },
            month: { $month: '$createdAt' },
            day: { $dayOfMonth: '$createdAt' }
          },
          orders: { $sum: 1 },
          revenue: { $sum: '$pricing.total' },
          savings: { $sum: '$promoCode.discount' }
        }
      },
      {
        $addFields: {
          date: {
            $dateFromParts: {
              year: '$_id.year',
              month: '$_id.month',
              day: '$_id.day'
            }
          }
        }
      },
      { $sort: { date: 1 } }
    ]);

    const analytics = {
      ...promotion.analytics,
      
      // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
      totalOrders: stats.totalOrders,
      totalRevenue: stats.totalRevenue,
      totalSavings: stats.totalSavings,
      avgOrderValue: Math.round(stats.avgOrderValue || 0),
      uniqueCustomers: stats.uniqueCustomers.length,
      
      // –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      conversionRate: promotion.analytics.attempts > 0 
        ? Math.round((promotion.analytics.successes / promotion.analytics.attempts) * 100)
        : 0,
      
      revenuePerUse: promotion.analytics.successes > 0
        ? Math.round(stats.totalRevenue / promotion.analytics.successes)
        : 0,
      
      // –ì—Ä–∞—Ñ–∏–∫ –ø–æ –¥–Ω—è–º
      dailyChart: dailyStats.map(day => ({
        date: day.date,
        orders: day.orders,
        revenue: day.revenue,
        savings: day.savings
      })),
      
      // –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
      roi: stats.totalSavings > 0
        ? Math.round(((stats.totalRevenue - stats.totalSavings) / stats.totalSavings) * 100)
        : 0
    };

    res.json({
      success: true,
      data: analytics
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–º–æ–∞–∫—Ü–∏–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏',
      message: error.message
    });
  }
};

/**
 * @desc    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ª—É—á—à–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
 * @route   POST /api/v1/promotions/auto-apply
 * @access  Public
 */
const autoApplyBestPromo = async (req, res) => {
  try {
    const { orderData } = req.body;
    const user = req.user; // –ú–æ–∂–µ—Ç –±—ã—Ç—å undefined

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º—ã–µ –ø—Ä–æ–º–æ–∞–∫—Ü–∏–∏
    const autoPromotions = await Promotion.findActivePromotions()
      .find({ 'settings.autoApply': true })
      .sort({ 'settings.priority': -1 });

    let bestPromotion = null;
    let maxDiscount = 0;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –ø—Ä–æ–º–æ–∞–∫—Ü–∏—é
    for (const promotion of autoPromotions) {
      const validationResult = promotion.canUse(user, orderData);
      
      if (validationResult.valid) {
        const discount = promotion.calculateDiscount(orderData);
        
        if (discount > maxDiscount) {
          maxDiscount = discount;
          bestPromotion = promotion;
        }
      }
    }

    if (bestPromotion) {
      res.json({
        success: true,
        data: {
          promotion: {
            id: bestPromotion._id,
            code: bestPromotion.code,
            name: bestPromotion.name,
            type: bestPromotion.type
          },
          discountAmount: maxDiscount,
          message: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –ª—É—á—à–∞—è —Å–∫–∏–¥–∫–∞: ${maxDiscount} —Å—É–º`
        }
      });
    } else {
      res.json({
        success: true,
        data: null,
        message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∫–∏–¥–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞'
      });
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏'
    });
  }
};

module.exports = {
  getPromotions,
  getPublicPromotions,
  createPromotion,
  updatePromotion,
  deletePromotion,
  validatePromoCode,
  applyPromoCode,
  getPromotionAnalytics,
  autoApplyBestPromo
};