const Product = require('../models/Product')
const Category = require('../models/Category')

/**
 * üîç –ö–û–ù–¢–†–û–õ–õ–ï–† –ü–û–ò–°–ö–ê
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏, –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
 */

// @desc    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
// @route   POST /api/v1/search
// @access  Public
const advancedSearch = async (req, res) => {
  try {
    const {
      query,
      category,
      minPrice,
      maxPrice,
      inStock,
      sortBy,
      page = 1,
      limit = 20,
      tags,
      seller,
      rating
    } = req.body

    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    let searchQuery = {}

    // –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –æ–ø–∏—Å–∞–Ω–∏—é –∏ —Ç–µ–≥–∞–º
    if (query) {
      searchQuery.$or = [
        { name: { $regex: query, $options: 'i' } },
        { description: { $regex: query, $options: 'i' } },
        { tags: { $in: [new RegExp(query, 'i')] } }
      ]
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (category) {
      searchQuery.category = category
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
    if (minPrice || maxPrice) {
      searchQuery.price = {}
      if (minPrice) searchQuery.price.$gte = parseFloat(minPrice)
      if (maxPrice) searchQuery.price.$lte = parseFloat(maxPrice)
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ª–∏—á–∏—é
    if (inStock !== undefined) {
      searchQuery.stock = { $gt: 0 }
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ–¥–∞–≤—Ü—É
    if (seller) {
      searchQuery.seller = seller
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    if (rating) {
      searchQuery.averageRating = { $gte: parseFloat(rating) }
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥–∞–º
    if (tags && tags.length > 0) {
      searchQuery.tags = { $in: tags }
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    let sortOptions = {}
    switch (sortBy) {
      case 'price_asc':
        sortOptions.price = 1
        break
      case 'price_desc':
        sortOptions.price = -1
        break
      case 'rating':
        sortOptions.averageRating = -1
        break
      case 'newest':
        sortOptions.createdAt = -1
        break
      case 'sales':
        sortOptions.soldCount = -1
        break
      default:
        sortOptions.createdAt = -1
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    const products = await Product
      .find(searchQuery)
      .populate('category', 'name slug')
      .populate('seller', 'name rating')
      .sort(sortOptions)
      .limit(parseInt(limit))
      .skip((parseInt(page) - 1) * parseInt(limit))

    // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    const total = await Product.countDocuments(searchQuery)

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞
    const searchStats = {
      totalResults: total,
      currentPage: parseInt(page),
      totalPages: Math.ceil(total / parseInt(limit)),
      hasNext: parseInt(page) < Math.ceil(total / parseInt(limit)),
      hasPrev: parseInt(page) > 1
    }

    res.json({
      success: true,
      data: products,
      pagination: searchStats,
      query: {
        searchTerm: query,
        appliedFilters: {
          category,
          priceRange: { min: minPrice, max: maxPrice },
          inStock,
          seller,
          rating,
          tags
        }
      }
    })
  } catch (error) {
    console.error('Search error:', error)
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞'
    })
  }
}

// @desc    –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
// @route   GET /api/v1/search/autocomplete
// @access  Public
const searchAutocomplete = async (req, res) => {
  try {
    const { q } = req.query

    if (!q || q.length < 2) {
      return res.json({
        success: true,
        data: {
          products: [],
          categories: [],
          suggestions: []
        }
      })
    }

    // –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
    const products = await Product
      .find({
        $or: [
          { name: { $regex: q, $options: 'i' } },
          { tags: { $in: [new RegExp(q, 'i')] } }
        ]
      })
      .select('name price images category')
      .populate('category', 'name')
      .limit(5)

    // –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const categories = await Category
      .find({ name: { $regex: q, $options: 'i' } })
      .select('name slug icon')
      .limit(3)

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    const suggestions = [
      `${q} –∫—É–ø–∏—Ç—å`,
      `${q} —Ü–µ–Ω–∞`,
      `${q} –æ—Ç–∑—ã–≤—ã`,
      `–ª—É—á—à–∏–π ${q}`,
      `–¥–µ—à–µ–≤—ã–π ${q}`
    ]

    res.json({
      success: true,
      data: {
        products,
        categories,
        suggestions
      }
    })
  } catch (error) {
    console.error('Autocomplete error:', error)
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è'
    })
  }
}

// @desc    –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
// @route   GET /api/v1/search/filters
// @access  Public
const getSearchFilters = async () => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = await Category.find({}).select('name slug')

    // –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
    const priceRange = await Product.aggregate([
      {
        $group: {
          _id: null,
          minPrice: { $min: '$price' },
          maxPrice: { $max: '$price' }
        }
      }
    ])

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–≥–∏
    const tags = await Product.aggregate([
      { $unwind: '$tags' },
      { $group: { _id: '$tags', count: { $sum: 1 } } },
      { $sort: { count: -1 } },
      { $limit: 20 }
    ])

    return {
      categories,
      priceRange: priceRange[0] || { minPrice: 0, maxPrice: 1000000 },
      popularTags: tags.map(tag => tag._id),
      sortOptions: [
        { value: 'newest', label: '–°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ' },
        { value: 'price_asc', label: '–¶–µ–Ω–∞: –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é' },
        { value: 'price_desc', label: '–¶–µ–Ω–∞: –ø–æ —É–±—ã–≤–∞–Ω–∏—é' },
        { value: 'rating', label: '–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É' },
        { value: 'sales', label: '–ü–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏' }
      ]
    }
  } catch (error) {
    console.error('Get filters error:', error)
    throw error
  }
}

// @desc    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
// @route   POST /api/v1/search/analytics
// @access  Public
const logSearchQuery = async (req, res) => {
  try {
    const { query, results, userId } = req.body

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–∏—Å–∫–∞
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é SearchAnalytics

    res.json({
      success: true,
      message: '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'
    })
  } catch (error) {
    console.error('Log search error:', error)
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è'
    })
  }
}

module.exports = {
  advancedSearch,
  searchAutocomplete,
  getSearchFilters,
  logSearchQuery
}