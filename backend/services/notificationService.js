const Notification = require('../models/Notification');
const User = require('../models/User');
const Order = require('../models/Order');
const Payment = require('../models/Payment');

/**
 * üîî –°–ï–†–í–ò–° –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
 */

class NotificationService {
  
  /**
   * üìß –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ü–û–°–õ–ï –û–ü–õ–ê–¢–´
   */
  static async sendPaymentNotifications(paymentData) {
    try {
      console.log('üîî –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:', paymentData._id);
      
      const notifications = [];
      
      // 1. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
      const customerNotification = {
        recipient: paymentData.user,
        type: 'customer_payment_success',
        title: {
          ru: '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ',
          uz: 'To\'lov muvaffaqiyatli amalga oshirildi',
          en: 'Payment successful'
        },
        message: {
          ru: `–í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É ${paymentData.amount} —Å—É–º —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ó–∞–∫–∞–∑ #${paymentData.order.orderNumber} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.`,
          uz: `${paymentData.amount} so'm miqdoridagi to'lovingiz muvaffaqiyatli qayta ishlandi. #${paymentData.order.orderNumber} raqamli buyurtma tasdiqlandi.`,
          en: `Your payment of ${paymentData.amount} UZS has been processed successfully. Order #${paymentData.order.orderNumber} confirmed.`
        },
        relatedData: { 
          payment: paymentData._id,
          order: paymentData.order._id 
        },
        priority: 'high',
        channels: ['in_app', 'email'],
        metadata: {
          icon: '‚úÖ',
          color: '#10B981',
          actionUrl: `/orders/${paymentData.order._id}`,
          actionText: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑'
        }
      };
      
      notifications.push(customerNotification);
      
      // 2. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
      if (paymentData.order.seller) {
        const sellerNotification = {
          recipient: paymentData.order.seller,
          type: 'seller_payment_received',
          title: {
            ru: '–ü–æ–ª—É—á–µ–Ω –ø–ª–∞—Ç–µ–∂',
            uz: 'To\'lov qabul qilindi',
            en: 'Payment received'
          },
          message: {
            ru: `–ü–æ–ª—É—á–µ–Ω –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É ${paymentData.amount} —Å—É–º –∑–∞ –∑–∞–∫–∞–∑ #${paymentData.order.orderNumber}. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ.`,
            uz: `#${paymentData.order.orderNumber} raqamli buyurtma uchun ${paymentData.amount} so'm miqdorida to'lov qabul qilindi. Mahsulotni yuborishga tayyorlang.`,
            en: `Payment of ${paymentData.amount} UZS received for order #${paymentData.order.orderNumber}. Prepare the product for shipping.`
          },
          relatedData: { 
            payment: paymentData._id,
            order: paymentData.order._id 
          },
          priority: 'high',
          channels: ['in_app', 'email', 'telegram'],
          metadata: {
            icon: 'üí∞',
            color: '#3B82F6',
            actionUrl: `/seller/orders/${paymentData.order._id}`,
            actionText: '–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–∫–∞–∑'
          }
        };
        
        notifications.push(sellerNotification);
      }
      
      // 3. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
      const admins = await User.find({ role: 'admin', isActive: true });
      
      for (const admin of admins) {
        const adminNotification = {
          recipient: admin._id,
          type: 'admin_payment_processed',
          title: {
            ru: '–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
            uz: 'To\'lov qayta ishlandi',
            en: 'Payment processed'
          },
          message: {
            ru: `–ü–ª–∞—Ç–µ–∂ ${paymentData._id} –Ω–∞ —Å—É–º–º—É ${paymentData.amount} —Å—É–º —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ó–∞–∫–∞–∑ #${paymentData.order.orderNumber}.`,
            uz: `${paymentData.amount} so'm miqdoridagi ${paymentData._id} to'lov muvaffaqiyatli qayta ishlandi. #${paymentData.order.orderNumber} raqamli buyurtma.`,
            en: `Payment ${paymentData._id} of ${paymentData.amount} UZS processed successfully. Order #${paymentData.order.orderNumber}.`
          },
          relatedData: { 
            payment: paymentData._id,
            order: paymentData.order._id 
          },
          priority: 'normal',
          channels: ['in_app', 'email'],
          metadata: {
            icon: 'üìä',
            color: '#6B7280',
            actionUrl: `/admin/payments/${paymentData._id}`,
            actionText: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞—Ç–µ–∂'
          }
        };
        
        notifications.push(adminNotification);
      }
      
      // –°–æ–∑–¥–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const createdNotifications = await Notification.insertMany(notifications);
      
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${createdNotifications.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
      await this.sendNotificationsThroughChannels(createdNotifications);
      
      return createdNotifications;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ:', error);
      throw error;
    }
  }
  
  /**
   * üõí –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –û –°–û–ó–î–ê–ù–ò–ò –ó–ê–ö–ê–ó–ê
   */
  static async sendOrderNotifications(orderData) {
    try {
      console.log('üîî –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–µ:', orderData._id);
      
      const notifications = [];
      
      // 1. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
      const customerNotification = {
        recipient: orderData.customer,
        type: 'customer_order_update',
        title: {
          ru: '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω',
          uz: 'Buyurtma yaratildi',
          en: 'Order created'
        },
        message: {
          ru: `–í–∞—à –∑–∞–∫–∞–∑ #${orderData.orderNumber} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –Ω–∞ —Å—É–º–º—É ${orderData.pricing.total} —Å—É–º. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.`,
          uz: `${orderData.pricing.total} so'm miqdoridagi #${orderData.orderNumber} raqamli buyurtmangiz muvaffaqiyatli yaratildi. Tasdiqlanishini kuting.`,
          en: `Your order #${orderData.orderNumber} for ${orderData.pricing.total} UZS has been created successfully. Wait for confirmation.`
        },
        relatedData: { order: orderData._id },
        priority: 'normal',
        channels: ['in_app', 'email'],
        metadata: {
          icon: 'üõí',
          color: '#3B82F6',
          actionUrl: `/orders/${orderData._id}`,
          actionText: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑'
        }
      };
      
      notifications.push(customerNotification);
      
      // 2. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
      if (orderData.seller) {
        const sellerNotification = {
          recipient: orderData.seller,
          type: 'seller_order_received',
          title: {
            ru: '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑',
            uz: 'Yangi buyurtma',
            en: 'New order'
          },
          message: {
            ru: `–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ #${orderData.orderNumber} –Ω–∞ —Å—É–º–º—É ${orderData.pricing.total} —Å—É–º. –¢—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.`,
            uz: `${orderData.pricing.total} so'm miqdoridagi #${orderData.orderNumber} raqamli yangi buyurtma qabul qilindi. Qayta ishlash talab qilinadi.`,
            en: `New order #${orderData.orderNumber} received for ${orderData.pricing.total} UZS. Requires processing.`
          },
          relatedData: { order: orderData._id },
          priority: 'high',
          channels: ['in_app', 'email', 'telegram'],
          metadata: {
            icon: 'üì¶',
            color: '#F59E0B',
            actionUrl: `/seller/orders/${orderData._id}`,
            actionText: '–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–∫–∞–∑'
          }
        };
        
        notifications.push(sellerNotification);
      }
      
      // 3. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
      const admins = await User.find({ role: 'admin', isActive: true });
      
      for (const admin of admins) {
        const adminNotification = {
          recipient: admin._id,
          type: 'admin_order_created',
          title: {
            ru: '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ —Å–∏—Å—Ç–µ–º–µ',
            uz: 'Tizimda yangi buyurtma',
            en: 'New order in system'
          },
          message: {
            ru: `–í —Å–∏—Å—Ç–µ–º–µ —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ #${orderData.orderNumber} –æ—Ç ${orderData.customerInfo.firstName} ${orderData.customerInfo.lastName} –Ω–∞ —Å—É–º–º—É ${orderData.pricing.total} —Å—É–º.`,
            uz: `Tizimda ${orderData.customerInfo.firstName} ${orderData.customerInfo.lastName} tomonidan ${orderData.pricing.total} so'm miqdoridagi #${orderData.orderNumber} raqamli yangi buyurtma yaratildi.`,
            en: `New order #${orderData.orderNumber} created in system by ${orderData.customerInfo.firstName} ${orderData.customerInfo.lastName} for ${orderData.pricing.total} UZS.`
          },
          relatedData: { order: orderData._id },
          priority: 'normal',
          channels: ['in_app', 'email'],
          metadata: {
            icon: 'üìã',
            color: '#6B7280',
            actionUrl: `/admin/orders/${orderData._id}`,
            actionText: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑'
          }
        };
        
        notifications.push(adminNotification);
      }
      
      // –°–æ–∑–¥–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const createdNotifications = await Notification.insertMany(notifications);
      
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${createdNotifications.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–µ`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
      await this.sendNotificationsThroughChannels(createdNotifications);
      
      return createdNotifications;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–µ:', error);
      throw error;
    }
  }
  
  /**
   * üì± –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ß–ï–†–ï–ó –†–ê–ó–õ–ò–ß–ù–´–ï –ö–ê–ù–ê–õ–´
   */
  static async sendNotificationsThroughChannels(notifications) {
    for (const notification of notifications) {
      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
        for (const channel of notification.channels) {
          switch (channel) {
            case 'in_app':
              // –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ - —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ –≤ –ë–î
              await notification.markAsSent('in_app');
              break;
              
            case 'email':
              await this.sendEmailNotification(notification);
              break;
              
            case 'sms':
              await this.sendSMSNotification(notification);
              break;
              
            case 'telegram':
              await this.sendTelegramNotification(notification);
              break;
              
            case 'push':
              await this.sendPushNotification(notification);
              break;
          }
        }
        
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ
        await notification.markAsDelivered();
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${notification._id}:`, error);
        await notification.markAsFailed('system', error.message);
      }
    }
  }
  
  /**
   * üìß –û–¢–ü–†–ê–í–ö–ê EMAIL –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
   */
  static async sendEmailNotification(notification) {
    try {
      // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å email —Å–µ—Ä–≤–∏—Å–æ–º (Nodemailer, SendGrid, etc.)
      console.log(`üìß Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${notification._id}`);
      await notification.markAsSent('email');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
      throw error;
    }
  }
  
  /**
   * üì± –û–¢–ü–†–ê–í–ö–ê SMS –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
   */
  static async sendSMSNotification(notification) {
    try {
      // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SMS —Å–µ—Ä–≤–∏—Å–æ–º
      console.log(`üì± SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${notification._id}`);
      await notification.markAsSent('sms');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS:', error);
      throw error;
    }
  }
  
  /**
   * üì± –û–¢–ü–†–ê–í–ö–ê TELEGRAM –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
   */
  static async sendTelegramNotification(notification) {
    try {
      // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Bot API
      console.log(`üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${notification._id}`);
      await notification.markAsSent('telegram');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram:', error);
      throw error;
    }
  }
  
  /**
   * üì± –û–¢–ü–†–ê–í–ö–ê PUSH –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
   */
  static async sendPushNotification(notification) {
    try {
      // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Push —Å–µ—Ä–≤–∏—Å–æ–º (Firebase, OneSignal, etc.)
      console.log(`üì± Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${notification._id}`);
      await notification.markAsSent('push');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Push:', error);
      throw error;
    }
  }
  
  /**
   * üîÑ –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –û –°–¢–ê–¢–£–°–ï –ó–ê–ö–ê–ó–ê
   */
  static async sendOrderStatusNotification(orderId, newStatus, oldStatus) {
    try {
      const order = await Order.findById(orderId)
        .populate('customer', 'firstName lastName email')
        .populate('seller', 'firstName lastName email');
      
      if (!order) {
        throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      const statusMessages = {
        confirmed: {
          ru: '–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
          uz: 'Buyurtma tasdiqlandi',
          en: 'Order confirmed'
        },
        shipped: {
          ru: '–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
          uz: 'Buyurtma yuborildi',
          en: 'Order shipped'
        },
        delivered: {
          ru: '–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
          uz: 'Buyurtma yetkazildi',
          en: 'Order delivered'
        },
        cancelled: {
          ru: '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω',
          uz: 'Buyurtma bekor qilindi',
          en: 'Order cancelled'
        }
      };
      
      const message = statusMessages[newStatus];
      if (!message) return;
      
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
      const customerNotification = {
        recipient: order.customer._id,
        type: 'customer_order_update',
        title: message,
        message: {
          ru: `–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #${order.orderNumber} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${message.ru}".`,
          uz: `#${order.orderNumber} raqamli buyurtmangizning holati "${message.uz}" ga o'zgartirildi.`,
          en: `Status of your order #${order.orderNumber} changed to "${message.en}".`
        },
        relatedData: { order: order._id },
        priority: 'normal',
        channels: ['in_app', 'email'],
        metadata: {
          icon: 'üìã',
          color: '#3B82F6',
          actionUrl: `/orders/${order._id}`,
          actionText: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑'
        }
      };
      
      await Notification.create(customerNotification);
      
      console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${order._id}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞:', error);
    }
  }
  
  /**
   * üìä –ü–û–õ–£–ß–ï–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
   */
  static async getUserNotifications(userId, options = {}) {
    try {
      const { page = 1, limit = 20, unreadOnly = false } = options;
      
      const query = { recipient: userId };
      if (unreadOnly) {
        query.isRead = false;
      }
      
      const notifications = await Notification.find(query)
        .sort({ createdAt: -1 })
        .skip((page - 1) * limit)
        .limit(limit)
        .populate('relatedData.order', 'orderNumber')
        .populate('relatedData.payment', 'amount');
      
      const total = await Notification.countDocuments(query);
      
      return {
        notifications,
        pagination: {
          page,
          limit,
          total,
          pages: Math.ceil(total / limit)
        }
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  }
  
  /**
   * ‚úÖ –û–¢–ú–ï–¢–ò–¢–¨ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ö–ê–ö –ü–†–û–ß–ò–¢–ê–ù–ù–û–ï
   */
  static async markNotificationAsRead(notificationId, userId) {
    try {
      const notification = await Notification.findOneAndUpdate(
        { _id: notificationId, recipient: userId },
        { isRead: true, readAt: new Date() },
        { new: true }
      );
      
      return notification;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ:', error);
      throw error;
    }
  }
  
  /**
   * üóëÔ∏è –ê–†–•–ò–í–ò–†–û–í–ê–¢–¨ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï
   */
  static async archiveNotification(notificationId, userId) {
    try {
      const notification = await Notification.findOneAndUpdate(
        { _id: notificationId, recipient: userId },
        { isArchived: true },
        { new: true }
      );
      
      return notification;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      throw error;
    }
  }
}

module.exports = NotificationService;

