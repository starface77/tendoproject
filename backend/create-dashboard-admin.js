const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const { connectDB } = require('./config/database');
const User = require('./models/User');

async function createDashboardAdmin() {
  try {
    console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
    await connectDB();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∞ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
    const existingAdmin = await User.findOne({ 
      $or: [
        { email: 'admin@tendo.uz' },
        { email: 'admin@dashboard.tendo.uz' }
      ]
    });
    
    if (existingAdmin) {
      console.log('‚úÖ –ê–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:');
      console.log(`üìß Email: ${existingAdmin.email}`);
      console.log(`üëë –†–æ–ª—å: ${existingAdmin.role}`);
      console.log(`üîí –ê–∫—Ç–∏–≤–µ–Ω: ${existingAdmin.isActive}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
      const isPasswordValid = await existingAdmin.checkPassword('admin123456');
      console.log(`üîê –ü–∞—Ä–æ–ª—å 'admin123456' –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: ${isPasswordValid}`);
      
      if (!isPasswordValid) {
        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å...');
        existingAdmin.password = await bcrypt.hash('admin123456', 12);
        await existingAdmin.save();
        console.log('‚úÖ –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω');
      }
      
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
    console.log('üîê –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–æ–ª—å...');
    const hashedPassword = await bcrypt.hash('admin123456', 12);

    console.log('üëë –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞...');
    const admin = new User({
      email: 'admin@tendo.uz',
      password: hashedPassword,
      firstName: 'Admin',
      lastName: 'Dashboard',
      phone: '+998901234567',
      role: 'admin',
      isActive: true,
      isVerified: true,
      permissions: {
        canManageUsers: true,
        canManageProducts: true,
        canManageOrders: true,
        canManageSettings: true,
        canViewAnalytics: true,
        canManagePayments: true,
        canManageSellers: true,
        canManageCategories: true,
        canManageReviews: true
      }
    });

    await admin.save();

    console.log('üéâ ==========================================');
    console.log('‚úÖ –ê–î–ú–ò–ù –î–õ–Ø –î–ê–®–ë–û–†–î–ê –°–û–ó–î–ê–ù –£–°–ü–ï–®–ù–û!');
    console.log('üéâ ==========================================');
    console.log(`üìß Email: ${admin.email}`);
    console.log('üîê –ü–∞—Ä–æ–ª—å: admin123456');
    console.log(`üëë –†–æ–ª—å: ${admin.role}`);
    console.log('üéâ ==========================================');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.error(' Stack:', error.stack);
  } finally {
    await mongoose.connection.close();
    console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MongoDB');
    process.exit(0);
  }
}

createDashboardAdmin();