const mongoose = require('mongoose');

// –ü—Ä–æ—Å—Ç–∞—è —Å—Ö–µ–º–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
const productSchema = new mongoose.Schema({
  name: String,
  price: Number,
  description: String,
  brand: String,
  model: String,
  images: [String],
  isActive: { type: Boolean, default: true },
  inStock: { type: Boolean, default: true },
  stock: { type: Number, default: 1 },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
});

const Product = mongoose.model('Product', productSchema);

async function createTestProduct() {
  try {
    console.log('üîÑ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ MongoDB...');
    await mongoose.connect('mongodb://localhost:27017/tendomarketuz');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–¥—É–∫—Ç
    const existing = await Product.findOne({ name: 'Test iPhone 15' });
    if (existing) {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.log('üìã ID:', existing._id);
      console.log('üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ:', existing.name);
      console.log('üí∞ –¶–µ–Ω–∞:', existing.price);
      await mongoose.disconnect();
      return existing;
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
    console.log('üì± –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç...');
    const product = new Product({
      name: 'Test iPhone 15',
      price: 1500000,
      description: '–¢–µ—Å—Ç–æ–≤—ã–π iPhone 15 –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏',
      brand: 'Apple',
      model: 'iPhone 15',
      images: ['https://example.com/iphone15.jpg'],
      isActive: true,
      inStock: true,
      stock: 5
    });

    await product.save();
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω');
    console.log('üìã ID:', product._id);
    console.log('üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ:', product.name);
    console.log('üí∞ –¶–µ–Ω–∞:', product.price);
    console.log('üì¶ –í –Ω–∞–ª–∏—á–∏–∏:', product.stock, '—à—Ç.');

    await mongoose.disconnect();
    console.log('‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MongoDB');

    return product;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    await mongoose.disconnect();
  }
}

createTestProduct();




