/**
 * üì± –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ú–û–ë–ò–õ–¨–ù–û–ì–û –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API
 */

const http = require('http');

const API_BASE_URL = 'http://localhost:5000/api/v1';

// –¢–µ—Å—Ç–∏—Ä—É–µ–º URL –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const mobileURLs = [
  'http://localhost:5000/api/v1',           // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
  'http://10.0.2.2:5000/api/v1',           // Android —ç–º—É–ª—è—Ç–æ—Ä
  'http://127.0.0.1:5000/api/v1'           // iOS —Å–∏–º—É–ª—è—Ç–æ—Ä
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è URL
function testMobileURL(url, name) {
  return new Promise((resolve) => {
    console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º ${name}:`);
    console.log(`URL: ${url}`);
    
    const urlObj = new URL(url);
    
    const options = {
      hostname: urlObj.hostname,
      port: urlObj.port,
      path: '/health',
      method: 'GET',
      headers: {
        'Accept': 'application/json'
      }
    };
    
    const req = http.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        try {
          const parsedData = JSON.parse(responseData);
          console.log(`‚úÖ –£–°–ü–ï–• (${res.statusCode}):`);
          console.log('–û—Ç–≤–µ—Ç:', JSON.stringify(parsedData, null, 2));
          resolve({ success: true, url, status: res.statusCode, data: parsedData });
        } catch (error) {
          console.log(`‚úÖ –£–°–ü–ï–• (${res.statusCode}):`);
          console.log('–û—Ç–≤–µ—Ç (—Ç–µ–∫—Å—Ç):', responseData);
          resolve({ success: true, url, status: res.statusCode, data: responseData });
        }
      });
    });
    
    req.on('error', (error) => {
      console.log(`‚ùå –û–®–ò–ë–ö–ê:`);
      console.log('–°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
      resolve({ success: false, url, error: error.message });
    });
    
    req.setTimeout(5000, () => {
      console.log(`‚ùå –¢–ê–ô–ú–ê–£–¢:`);
      console.log('URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥');
      req.destroy();
      resolve({ success: false, url, error: 'Timeout' });
    });
    
    req.end();
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function testMobileConnection() {
  console.log('üöÄ –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ú–û–ë–ò–õ–¨–ù–û–ì–û –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø');
  console.log('=============================================');
  
  const results = [];
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ URL –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  for (const url of mobileURLs) {
    const name = url.includes('10.0.2.2') ? 'Android Emulator' : 
                 url.includes('127.0.0.1') ? 'iOS Simulator' : 'Local Development';
    results.push(await testMobileURL(url, name));
  }
  
  // –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const successful = results.filter(r => r.success).length;
  const failed = results.filter(r => !r.success).length;
  
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log('=====================================');
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: ${successful}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${failed}`);
  console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((successful / results.length) * 100)}%`);
  
  if (successful > 0) {
    console.log('\nüéâ –ú–û–ë–ò–õ–¨–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ú–û–ñ–ï–¢ –ü–û–î–ö–õ–Æ–ß–ò–¢–¨–°–Ø!');
    console.log('üì± API –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –º–æ–±–∏–ª—å–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–±–æ—á–∏–µ URL
    const workingURLs = results.filter(r => r.success);
    console.log('\nüîó –†–ê–ë–û–ß–ò–ï URL –î–õ–Ø –ú–û–ë–ò–õ–¨–ù–û–ì–û –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø:');
    workingURLs.forEach(result => {
      console.log(`‚úÖ ${result.url}`);
    });
  } else {
    console.log('\nüîß –ü–†–û–ë–õ–ï–ú–´ –° –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï–ú:');
    console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ firewall/–∞–Ω—Ç–∏–≤–∏—Ä—É—Å');
    console.log('4. –î–ª—è Android —ç–º—É–ª—è—Ç–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 10.0.2.2');
    console.log('5. –î–ª—è iOS —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 127.0.0.1');
  }
  
  return results;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testMobileConnection()
  .then(() => {
    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    process.exit(0);
  })
  .catch(error => {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });


