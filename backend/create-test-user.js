const mongoose = require('mongoose');
const User = require('./models/User');
const bcrypt = require('bcryptjs');

async function createTestUser() {
  try {
    await mongoose.connect('mongodb://localhost:27017/tendo-market');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');

    // –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await User.findOne({ email: 'test@example.com' });
    if (existingUser) {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', existingUser._id);
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const hashedPassword = await bcrypt.hash('password123', 12);

    const user = await User.create({
      firstName: '–ò–≤–∞–Ω',
      lastName: '–ò–≤–∞–Ω–æ–≤',
      email: 'test2@example.com',
      password: hashedPassword,
      role: 'user', // –ù–∞—á–∞–ª—å–Ω–∞—è —Ä–æ–ª—å
      isActive: true
    });

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:');
    console.log('üìã ID:', user._id);
    console.log('üë§ –ò–º—è:', `${user.firstName} ${user.lastName}`);
    console.log('üìß Email:', user.email);
    console.log('üîë –†–æ–ª—å:', user.role);

    await mongoose.disconnect();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

createTestUser();
