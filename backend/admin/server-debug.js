/**
 * üõ†Ô∏è CHEXOL.UZ ADMIN PANEL - DEBUG VERSION
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ API
 */

const express = require('express');
const cors = require('cors');
const path = require('path');
require('dotenv').config({ path: './.env' });

// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
const { connectDB } = require('../config/database');

// –°–æ–∑–¥–∞–Ω–∏–µ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();

// üåê CORS –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
const corsOptions = {
  origin: '*', // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  credentials: true
};
app.use(cors(corsOptions));

// üîÑ –ü–ê–†–°–ò–ù–ì –î–ê–ù–ù–´–•
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`üìù ${req.method} ${req.url} - ${new Date().toISOString()}`);
  next();
});

// üìÅ –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –§–ê–ô–õ–´ (–∞–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å)
app.use(express.static(path.join(__dirname, 'public')));

// üè• HEALTH CHECK
app.get('/health', (req, res) => {
  res.status(200).json({
    status: 'success',
    message: 'Chexol.uz Admin Panel —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    jwt_secret: process.env.JWT_SECRET ? 'SET' : 'NOT SET'
  });
});

// üìç –ü–†–û–°–¢–û–ô API –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
app.get('/api/test', (req, res) => {
  res.status(200).json({
    success: true,
    message: 'API —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    environment: process.env.NODE_ENV,
    jwt_secret_exists: !!process.env.JWT_SECRET
  });
});

// üîê –ü–†–û–°–¢–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø (–ë–ï–ó –í–ù–ï–®–ù–ò–• –†–û–£–¢–û–í)
app.post('/api/auth/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    
    console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', { email, password: password ? '***' : '–ø—É—Å—Ç–æ' });
    console.log('üîë JWT_SECRET:', process.env.JWT_SECRET ? '–ï–°–¢–¨' : '–ù–ï–¢');
    
    if (!email || !password) {
      return res.status(400).json({
        success: false,
        error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }
    
    if (email === 'admin@chexoluz.com' && password === 'admin123456') {
      const jwt = require('jsonwebtoken');
      
      const token = jwt.sign(
        { id: 'admin123', email: 'admin@chexoluz.com' },
        process.env.JWT_SECRET,
        { expiresIn: '8h' }
      );
      
      res.status(200).json({
        success: true,
        message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥',
        token,
        user: {
          id: 'admin123',
          email: 'admin@chexoluz.com',
          firstName: '–°—É–ø–µ—Ä',
          lastName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
          role: 'super_admin'
        }
      });
    } else {
      res.status(401).json({
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message
    });
  }
});

// üìã –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê –ê–î–ú–ò–ù–ö–ò
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// 404 –¥–ª—è API –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use('/api/*', (req, res) => {
  console.log('‚ùå 404 API:', req.method, req.url);
  res.status(404).json({
    success: false,
    error: 'API endpoint not found',
    method: req.method,
    url: req.url
  });
});

// SPA –º–∞—Ä—à—Ä—É—Ç—ã
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// üöÄ –ó–ê–ü–£–°–ö –ê–î–ú–ò–ù–°–ö–û–ì–û –°–ï–†–í–ï–†–ê
const PORT = process.env.ADMIN_PORT || 5001;

const startAdminServer = async () => {
  try {
    console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await connectDB();
    
    console.log('üîç DEBUG INFO:');
    console.log('- NODE_ENV:', process.env.NODE_ENV);
    console.log('- JWT_SECRET:', process.env.JWT_SECRET ? '–£–°–¢–ê–ù–û–í–õ–ï–ù' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
    console.log('- MONGO_URI:', process.env.MONGO_URI ? '–£–°–¢–ê–ù–û–í–õ–ï–ù' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
    
    const server = app.listen(PORT, () => {
      console.log('');
      console.log('üü° ==========================================');
      console.log('üêõ    DEBUG ADMIN PANEL –ó–ê–ü–£–©–ï–ù');
      console.log('üü° ==========================================');
      console.log(`üìç –ê–¥–º–∏–Ω–∫–∞:       http://localhost:${PORT}`);
      console.log(`üîê API:           http://localhost:${PORT}/api`);
      console.log(`üè• Health:        http://localhost:${PORT}/health`);
      console.log(`üß™ Test API:      http://localhost:${PORT}/api/test`);
      console.log('üü° ==========================================');
      console.log('');
    });

    process.on('SIGTERM', () => {
      console.log('üîÑ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–∫—Ä—ã—Ç–∏–µ –∞–¥–º–∏–Ω —Å–µ—Ä–≤–µ—Ä–∞...');
      server.close(() => {
        console.log('‚úÖ –ê–¥–º–∏–Ω —Å–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç');
        process.exit(0);
      });
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–¥–º–∏–Ω —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
    process.exit(1);
  }
};

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if (require.main === module) {
  startAdminServer();
}

module.exports = app;
